//--------------------------------------------------------------------------------
// Auto-generated by Migen (b1b2b29) & LiteX (3391398a) on 2020-12-29 23:08:09
//--------------------------------------------------------------------------------
module top(
	(* keep = "true" *)	input wire clk48,
	output reg spiflash4x_cs_n,
	output reg spiflash4x_clk,
	inout wire [3:0] spiflash4x_dq,
	inout wire usb_d_p,
	inout wire usb_d_n,
	output wire usb_pullup,
	inout wire touch_pads_t1,
	inout wire touch_pads_t2,
	inout wire touch_pads_t3,
	inout wire touch_pads_t4,
	output wire rgb_led_r,
	output wire rgb_led_g,
	output wire rgb_led_b
);

wire clk12;
reg [11:0] reset_delay = 12'd4095;
wire por_clk;
wire por_rst;
reg reset = 1'd0;
(* keep = "true" *) wire sys_clk;
wire sys_rst;
(* keep = "true" *) wire usb_12_clk;
wire usb_12_rst;
(* keep = "true" *) wire usb_48_clk;
wire usb_48_rst;
reg basesoc_soccontroller_reset_storage = 1'd0;
reg basesoc_soccontroller_reset_re = 1'd0;
reg [31:0] basesoc_soccontroller_scratch_storage = 32'd305419896;
reg basesoc_soccontroller_scratch_re = 1'd0;
wire [31:0] basesoc_soccontroller_bus_errors_status;
wire basesoc_soccontroller_bus_errors_we;
wire basesoc_soccontroller_reset;
wire basesoc_soccontroller_bus_error;
reg [31:0] basesoc_soccontroller_bus_errors = 32'd0;
wire basesoc_cpu_reset;
reg [31:0] basesoc_cpu_interrupt = 32'd0;
wire [29:0] basesoc_cpu_ibus_adr;
wire [31:0] basesoc_cpu_ibus_dat_w;
wire [31:0] basesoc_cpu_ibus_dat_r;
wire [3:0] basesoc_cpu_ibus_sel;
wire basesoc_cpu_ibus_cyc;
wire basesoc_cpu_ibus_stb;
wire basesoc_cpu_ibus_ack;
wire basesoc_cpu_ibus_we;
wire [2:0] basesoc_cpu_ibus_cti;
wire [1:0] basesoc_cpu_ibus_bte;
wire basesoc_cpu_ibus_err;
wire [29:0] basesoc_cpu_dbus_adr;
wire [31:0] basesoc_cpu_dbus_dat_w;
wire [31:0] basesoc_cpu_dbus_dat_r;
wire [3:0] basesoc_cpu_dbus_sel;
wire basesoc_cpu_dbus_cyc;
wire basesoc_cpu_dbus_stb;
wire basesoc_cpu_dbus_ack;
wire basesoc_cpu_dbus_we;
wire [2:0] basesoc_cpu_dbus_cti;
wire [1:0] basesoc_cpu_dbus_bte;
wire basesoc_cpu_dbus_err;
reg [31:0] basesoc_load_storage = 32'd0;
reg basesoc_load_re = 1'd0;
reg [31:0] basesoc_reload_storage = 32'd0;
reg basesoc_reload_re = 1'd0;
reg basesoc_en_storage = 1'd0;
reg basesoc_en_re = 1'd0;
reg basesoc_update_value_storage = 1'd0;
reg basesoc_update_value_re = 1'd0;
reg [31:0] basesoc_value_status = 32'd0;
wire basesoc_value_we;
wire basesoc_irq;
wire basesoc_zero_status;
reg basesoc_zero_pending = 1'd0;
wire basesoc_zero_trigger;
reg basesoc_zero_clear = 1'd0;
reg basesoc_zero_old_trigger = 1'd0;
wire basesoc_eventmanager_status_re;
wire basesoc_eventmanager_status_r;
wire basesoc_eventmanager_status_we;
wire basesoc_eventmanager_status_w;
wire basesoc_eventmanager_pending_re;
wire basesoc_eventmanager_pending_r;
wire basesoc_eventmanager_pending_we;
wire basesoc_eventmanager_pending_w;
reg basesoc_eventmanager_storage = 1'd0;
reg basesoc_eventmanager_re = 1'd0;
reg [31:0] basesoc_value = 32'd0;
reg [13:0] basesoc_adr = 14'd0;
reg basesoc_we = 1'd0;
wire [31:0] basesoc_dat_w;
wire [31:0] basesoc_dat_r;
wire [29:0] basesoc_wishbone_adr;
wire [31:0] basesoc_wishbone_dat_w;
wire [31:0] basesoc_wishbone_dat_r;
wire [3:0] basesoc_wishbone_sel;
wire basesoc_wishbone_cyc;
wire basesoc_wishbone_stb;
reg basesoc_wishbone_ack = 1'd0;
wire basesoc_wishbone_we;
wire [2:0] basesoc_wishbone_cti;
wire [1:0] basesoc_wishbone_bte;
reg basesoc_wishbone_err = 1'd0;
wire [29:0] spram_bus_adr;
wire [31:0] spram_bus_dat_w;
reg [31:0] spram_bus_dat_r = 32'd0;
wire [3:0] spram_bus_sel;
wire spram_bus_cyc;
wire spram_bus_stb;
reg spram_bus_ack = 1'd0;
wire spram_bus_we;
wire [2:0] spram_bus_cti;
wire [1:0] spram_bus_bte;
reg spram_bus_err = 1'd0;
wire [15:0] spram_datain0;
wire [15:0] spram_dataout0;
reg [3:0] spram_maskwren0 = 4'd0;
reg spram_wren0 = 1'd0;
wire [15:0] spram_datain1;
wire [15:0] spram_dataout1;
reg [3:0] spram_maskwren1 = 4'd0;
reg spram_wren1 = 1'd0;
wire [29:0] a2mem_bus_adr;
wire [31:0] a2mem_bus_dat_w;
wire [31:0] a2mem_bus_dat_r;
wire [3:0] a2mem_bus_sel;
wire a2mem_bus_cyc;
wire a2mem_bus_stb;
reg a2mem_bus_ack = 1'd0;
wire a2mem_bus_we;
wire [2:0] a2mem_bus_cti;
wire [1:0] a2mem_bus_bte;
reg a2mem_bus_err = 1'd0;
reg a2mem_access6502 = 1'd0;
reg a2mem_hold_en6502 = 1'd0;
wire [1:0] a2mem_shift;
reg [1:0] a2mem_read_shift = 2'd0;
reg [13:0] a2mem_addr = 14'd0;
reg [31:0] a2mem_din = 32'd0;
wire [31:0] a2mem_dout;
reg a2mem_wren = 1'd0;
reg [7:0] a2mem_wrenmask = 8'd0;
wire [15:0] a2mem_addr6502;
wire [7:0] a2mem_din6502;
reg [7:0] a2mem_dout6502 = 8'd0;
reg [7:0] a2mem_hold6502 = 8'd0;
reg [7:0] a2mem_transparent6502 = 8'd0;
wire a2mem_wren6502;
wire [13:0] a2mem_addrwb;
wire [31:0] a2mem_dinwb;
wire [31:0] a2mem_doutwb;
wire a2mem_wrenwb;
wire [3:0] a2mem_wrenmaskwb;
reg a2mem_accesswb = 1'd0;
wire [15:0] apple2_addr;
wire [7:0] apple2_dout;
reg [7:0] apple2_din = 8'd0;
wire apple2_wren;
reg apple2_iosel = 1'd0;
reg [7:0] apple2_ior_addr = 8'd0;
reg apple2_r_memsel = 1'd0;
reg apple2_w_memsel = 1'd0;
reg apple2_clk_en = 1'd0;
wire apple2_active;
reg apple2_available = 1'd0;
reg [3:0] apple2_idlecount = 4'd0;
reg [3:0] apple2_disk_phase = 4'd0;
reg apple2_disk_motor = 1'd0;
reg apple2_disk_drive = 1'd0;
reg apple2_disk_reading = 1'd0;
reg apple2_disk_data_available = 1'd0;
reg apple2_disk_data_wanted = 1'd0;
reg apple2_disk_read = 1'd0;
wire apple2_Reset;
wire [3:0] apple2_Divisor;
reg [11:0] apple2_control_storage = 12'd2817;
reg apple2_control_re = 1'd0;
reg [7:0] apple2_keyboard_storage = 8'd0;
reg apple2_keyboard_re = 1'd0;
reg apple2_keyboard_we = 1'd0;
reg [7:0] apple2_keyboard_dat_w = 8'd0;
wire apple2_strobe_re;
wire apple2_strobe_r;
wire apple2_strobe_we;
wire apple2_strobe_w;
wire [7:0] apple2_Character;
wire apple2_Valid;
wire apple2_More;
wire apple2_Repeat;
wire apple2_ScrollStart;
wire apple2_ScrollEnd;
wire [5:0] apple2_Horizontal;
wire [4:0] apple2_Vertical;
reg [28:0] apple2_screen_status = 29'd0;
reg apple2_screen_we = 1'd0;
wire [3:0] apple2_Phase;
wire apple2_Motor;
wire apple2_Drive;
wire apple2_Wanted;
wire apple2_Pending;
reg [7:0] apple2_diskctrl_status = 8'd0;
wire apple2_diskctrl_we;
reg [7:0] apple2_diskdata_storage = 8'd0;
reg apple2_diskdata_re = 1'd0;
wire apple2_display_fifo_re;
reg apple2_display_fifo_readable = 1'd0;
wire apple2_display_fifo_syncfifo_we;
wire apple2_display_fifo_syncfifo_writable;
wire apple2_display_fifo_syncfifo_re;
wire apple2_display_fifo_syncfifo_readable;
reg [31:0] apple2_display_fifo_syncfifo_din = 32'd0;
wire [31:0] apple2_display_fifo_syncfifo_dout;
reg [8:0] apple2_display_fifo_level0 = 9'd0;
reg apple2_display_fifo_replace = 1'd0;
reg [7:0] apple2_display_fifo_produce = 8'd0;
reg [7:0] apple2_display_fifo_consume = 8'd0;
reg [7:0] apple2_display_fifo_wrport_adr = 8'd0;
wire [31:0] apple2_display_fifo_wrport_dat_r;
wire apple2_display_fifo_wrport_we;
wire [31:0] apple2_display_fifo_wrport_dat_w;
wire apple2_display_fifo_do_read;
wire [7:0] apple2_display_fifo_rdport_adr;
wire [31:0] apple2_display_fifo_rdport_dat_r;
wire apple2_display_fifo_rdport_re;
wire [8:0] apple2_display_fifo_level1;
wire apple2_fbsel;
wire apple2_fb_r;
wire apple2_fb_w;
wire [2:0] apple2_segment;
wire [6:0] apple2_triple;
reg [1:0] apple2_third = 2'd0;
reg [5:0] apple2_horiz = 6'd0;
wire [4:0] apple2_vert;
reg apple2_scroll_active = 1'd0;
wire apple2_scroll_match;
wire apple2_scroll_start;
wire apple2_scroll_end;
reg apple2_scroll_read = 1'd0;
wire apple2_scroll_write_valid;
wire apple2_scroll_next_col;
wire apple2_scroll_next_row;
wire apple2_scroll_sequential;
reg [5:0] apple2_read_horiz = 6'd0;
reg [4:0] apple2_read_vert = 5'd0;
reg apple2_repeat_active = 1'd0;
reg apple2_repeat_match = 1'd0;
reg apple2_repeat_start = 1'd0;
reg apple2_repeat_end = 1'd0;
reg apple2_repeat_sequential = 1'd0;
reg [5:0] apple2_prev_horiz = 6'd0;
reg [4:0] apple2_prev_vert = 5'd0;
reg [7:0] apple2_prev_char = 8'd0;
reg apple2_prev_start = 1'd0;
reg apple2_push_save = 1'd0;
wire apple2_push_saving;
reg [31:0] apple2_fifo_out = 32'd0;
wire [29:0] rom_bus_adr;
wire [31:0] rom_bus_dat_w;
wire [31:0] rom_bus_dat_r;
wire [3:0] rom_bus_sel;
wire rom_bus_cyc;
wire rom_bus_stb;
reg rom_bus_ack = 1'd0;
wire rom_bus_we;
wire [2:0] rom_bus_cti;
wire [1:0] rom_bus_bte;
reg rom_bus_err = 1'd0;
wire [10:0] rom_adr;
wire [31:0] rom_dat_r;
wire [29:0] lxspi_bus_adr;
wire [31:0] lxspi_bus_dat_w;
wire [31:0] lxspi_bus_dat_r;
wire [3:0] lxspi_bus_sel;
wire lxspi_bus_cyc;
wire lxspi_bus_stb;
reg lxspi_bus_ack = 1'd0;
wire lxspi_bus_we;
wire [2:0] lxspi_bus_cti;
wire [1:0] lxspi_bus_bte;
reg lxspi_bus_err = 1'd0;
wire lxspi_mosi;
wire lxspi_clk0;
wire lxspi_cs_n0;
wire lxspi_dir;
reg [3:0] lxspi_bitbang_storage = 4'd0;
reg lxspi_bitbang_re = 1'd0;
reg lxspi_status = 1'd0;
wire lxspi_we;
reg lxspi_bitbang_en_storage = 1'd0;
reg lxspi_bitbang_en_re = 1'd0;
reg lxspi_cs_n1 = 1'd1;
reg lxspi_clk1 = 1'd0;
reg lxspi_dq_oe = 1'd0;
reg [3:0] lxspi_o = 4'd0;
reg lxspi_oe = 1'd0;
wire [3:0] lxspi_i0;
reg [31:0] lxspi_sr = 32'd0;
reg lxspi_i1 = 1'd0;
reg [3:0] lxspi_dqi = 4'd0;
reg [5:0] lxspi_counter = 6'd0;
wire usb_iobuf_usb_tx_en;
wire usb_iobuf_usb_p_tx;
wire usb_iobuf_usb_n_tx;
reg usb_iobuf_usb_p_rx = 1'd0;
reg usb_iobuf_usb_n_rx = 1'd0;
wire usb_iobuf_usb_p_t_o;
wire usb_iobuf_usb_p_t_oe;
wire usb_iobuf_usb_p_t_i0;
wire usb_iobuf_usb_n_t_o;
wire usb_iobuf_usb_n_t_oe;
wire usb_iobuf_usb_n_t_i0;
wire usb_iobuf_usb_pullup;
wire usb_iobuf_usb_p_t_i1;
wire usb_iobuf_usb_n_t_i1;
wire usb_usb_core_tx_i_bit_strobe;
reg [7:0] usb_usb_core_tx_i_data_payload = 8'd0;
wire usb_usb_core_tx_o_data_strobe;
reg usb_usb_core_tx_i_oe = 1'd0;
wire usb_usb_core_tx_o_usbp;
wire usb_usb_core_tx_o_usbn;
wire usb_usb_core_tx_o_oe;
wire [7:0] usb_usb_core_tx_shifter_i_data;
reg usb_usb_core_tx_shifter_o_get = 1'd0;
wire usb_usb_core_tx_shifter_o_empty;
wire usb_usb_core_tx_shifter_o_data;
reg [7:0] usb_usb_core_tx_shifter_shifter = 8'd0;
reg [7:0] usb_usb_core_tx_shifter_pos = 8'd1;
wire usb_usb_core_tx_shifter_empty;
wire usb_usb_core_tx_shifter_ce;
wire usb_usb_core_tx_shifter_reset;
wire usb_usb_core_tx_bitstuff_i_data;
wire usb_usb_core_tx_bitstuff_o_stall;
reg usb_usb_core_tx_bitstuff_o_will_stall = 1'd0;
reg usb_usb_core_tx_bitstuff_o_data = 1'd0;
reg usb_usb_core_tx_bitstuff_stuff_bit = 1'd0;
wire usb_usb_core_tx_bitstuff_reset;
wire usb_usb_core_tx_nrzi_i_valid;
wire usb_usb_core_tx_nrzi_i_oe;
wire usb_usb_core_tx_nrzi_i_data;
reg usb_usb_core_tx_nrzi_usbp = 1'd0;
reg usb_usb_core_tx_nrzi_usbn = 1'd0;
reg usb_usb_core_tx_nrzi_oe0 = 1'd0;
reg usb_usb_core_tx_nrzi_o_usbp = 1'd0;
reg usb_usb_core_tx_nrzi_o_usbn = 1'd0;
reg usb_usb_core_tx_nrzi_o_oe = 1'd0;
reg [7:0] usb_usb_core_tx_sync_pulse = 8'd0;
wire usb_usb_core_tx_fit_dat;
wire usb_usb_core_tx_fit_oe;
reg usb_usb_core_tx_da_reset_shifter = 1'd0;
reg usb_usb_core_tx_da_reset_bitstuff = 1'd0;
wire usb_usb_core_tx_stall;
wire usb_usb_core_tx_sp_reset_bitstuff;
wire usb_usb_core_tx_sp_reset_shifter;
wire usb_usb_core_tx_sp_bit;
wire usb_usb_core_tx_sp_o_data_strobe;
reg usb_usb_core_tx_bitstuff_valid_data = 1'd0;
reg [1:0] usb_usb_core_tx_state_gray = 2'd0;
wire usb_usb_core_tx_state_data;
wire usb_usb_core_tx_state_sync;
wire usb_usb_core_tx_nrzi_dat;
wire usb_usb_core_tx_nrzi_oe1;
reg usb_usb_core_txstate_i_pkt_start = 1'd0;
reg usb_usb_core_txstate_o_pkt_end = 1'd0;
reg [3:0] usb_usb_core_txstate_i_pid = 4'd0;
wire [7:0] usb_usb_core_txstate_i_data_payload0;
wire usb_usb_core_txstate_i_data_ready;
reg usb_usb_core_txstate_o_data_ack = 1'd0;
wire usb_usb_core_txstate_o_oe12;
reg [3:0] usb_usb_core_txstate_pid = 4'd0;
wire [7:0] usb_usb_core_txstate_i_data_payload1;
reg usb_usb_core_txstate_i_data_strobe = 1'd0;
wire [15:0] usb_usb_core_txstate_o_crc;
wire [7:0] usb_usb_core_txstate_crc_dat;
reg [15:0] usb_usb_core_txstate_crc_cur = 16'd65535;
reg [15:0] usb_usb_core_txstate_crc_next = 16'd64770;
wire usb_usb_core_txstate_reset;
reg usb_usb_core_txstate_is_ongoing0 = 1'd0;
reg usb_usb_core_txstate_is_ongoing1 = 1'd0;
reg usb_usb_core_rx_reset0 = 1'd0;
wire usb_usb_core_rx_o_bit_strobe;
wire usb_usb_core_rx_i_usbp;
wire usb_usb_core_rx_i_usbn;
wire usb_usb_core_rx_o_data_strobe;
wire [7:0] usb_usb_core_rx_o_data_payload;
wire usb_usb_core_rx_o_pkt_start;
reg usb_usb_core_rx_o_pkt_in_progress = 1'd0;
wire usb_usb_core_rx_o_pkt_end;
wire [1:0] usb_usb_core_rx_dpair;
reg usb_usb_core_rx_line_state_dt = 1'd0;
reg usb_usb_core_rx_line_state_dj0 = 1'd0;
reg usb_usb_core_rx_line_state_dk0 = 1'd0;
reg usb_usb_core_rx_line_state_se00 = 1'd0;
reg usb_usb_core_rx_line_state_se10 = 1'd0;
reg [1:0] usb_usb_core_rx_line_state_phase = 2'd0;
reg usb_usb_core_rx_line_state_valid = 1'd0;
reg usb_usb_core_rx_line_state_dj1 = 1'd0;
reg usb_usb_core_rx_line_state_dk1 = 1'd0;
reg usb_usb_core_rx_line_state_se01 = 1'd0;
reg usb_usb_core_rx_line_state_se11 = 1'd0;
wire usb_usb_core_rx_o_reset;
reg [6:0] usb_usb_core_rx_reset_counter = 7'd0;
wire usb_usb_core_rx_nrzi_i_valid;
wire usb_usb_core_rx_nrzi_i_dj;
wire usb_usb_core_rx_nrzi_i_dk;
wire usb_usb_core_rx_nrzi_i_se0;
reg usb_usb_core_rx_nrzi_o_valid = 1'd0;
reg usb_usb_core_rx_nrzi_o_data = 1'd0;
reg usb_usb_core_rx_nrzi_o_se0 = 1'd0;
reg usb_usb_core_rx_nrzi_last_data = 1'd0;
wire usb_usb_core_rx_reset1;
wire usb_usb_core_rx_detect_i_valid;
wire usb_usb_core_rx_detect_i_data;
wire usb_usb_core_rx_detect_i_se0;
reg usb_usb_core_rx_detect_pkt_start = 1'd0;
reg usb_usb_core_rx_detect_pkt_active = 1'd0;
reg usb_usb_core_rx_detect_pkt_end = 1'd0;
wire usb_usb_core_rx_detect_o_pkt_start;
wire usb_usb_core_rx_detect_o_pkt_active;
wire usb_usb_core_rx_detect_o_pkt_end;
wire usb_usb_core_rx_detect_reset;
wire usb_usb_core_rx_bitstuff_i_valid;
wire usb_usb_core_rx_bitstuff_i_data;
reg usb_usb_core_rx_bitstuff_drop_bit = 1'd0;
reg usb_usb_core_rx_bitstuff_o_data = 1'd0;
reg usb_usb_core_rx_bitstuff_o_error = 1'd0;
reg usb_usb_core_rx_bitstuff_o_stall = 1'd1;
wire usb_usb_core_rx_bitstuff_reset;
reg usb_usb_core_rx_last_reset = 1'd0;
wire usb_usb_core_rx_shifter_i_valid;
wire usb_usb_core_rx_shifter_i_data;
wire [7:0] usb_usb_core_rx_shifter_o_data;
reg usb_usb_core_rx_shifter_o_put = 1'd0;
reg [8:0] usb_usb_core_rx_shifter_shift_reg = 9'd1;
wire usb_usb_core_rx_shifter_reset;
wire usb_usb_core_rx_flag_start;
wire usb_usb_core_rx_flag_end;
wire usb_usb_core_rx_flag_valid;
wire usb_usb_core_rx_payloadFifo_asyncfifo_we;
wire usb_usb_core_rx_payloadFifo_asyncfifo_writable;
wire usb_usb_core_rx_payloadFifo_asyncfifo_re;
wire usb_usb_core_rx_payloadFifo_asyncfifo_readable;
wire [7:0] usb_usb_core_rx_payloadFifo_asyncfifo_din;
wire [7:0] usb_usb_core_rx_payloadFifo_asyncfifo_dout;
wire usb_usb_core_rx_payloadFifo_graycounter0_ce;
reg [1:0] usb_usb_core_rx_payloadFifo_graycounter0_q = 2'd0;
wire [1:0] usb_usb_core_rx_payloadFifo_graycounter0_q_next;
reg [1:0] usb_usb_core_rx_payloadFifo_graycounter0_q_binary = 2'd0;
reg [1:0] usb_usb_core_rx_payloadFifo_graycounter0_q_next_binary = 2'd0;
wire usb_usb_core_rx_payloadFifo_graycounter1_ce;
reg [1:0] usb_usb_core_rx_payloadFifo_graycounter1_q = 2'd0;
wire [1:0] usb_usb_core_rx_payloadFifo_graycounter1_q_next;
reg [1:0] usb_usb_core_rx_payloadFifo_graycounter1_q_binary = 2'd0;
reg [1:0] usb_usb_core_rx_payloadFifo_graycounter1_q_next_binary = 2'd0;
wire [1:0] usb_usb_core_rx_payloadFifo_produce_rdomain;
wire [1:0] usb_usb_core_rx_payloadFifo_consume_wdomain;
wire usb_usb_core_rx_payloadFifo_wrport_adr;
wire [7:0] usb_usb_core_rx_payloadFifo_wrport_dat_r;
wire usb_usb_core_rx_payloadFifo_wrport_we;
wire [7:0] usb_usb_core_rx_payloadFifo_wrport_dat_w;
wire usb_usb_core_rx_payloadFifo_rdport_adr;
wire [7:0] usb_usb_core_rx_payloadFifo_rdport_dat_r;
wire usb_usb_core_rx_flagsFifo_asyncfifo_we;
wire usb_usb_core_rx_flagsFifo_asyncfifo_writable;
wire usb_usb_core_rx_flagsFifo_asyncfifo_re;
wire usb_usb_core_rx_flagsFifo_asyncfifo_readable;
reg [1:0] usb_usb_core_rx_flagsFifo_asyncfifo_din = 2'd0;
wire [1:0] usb_usb_core_rx_flagsFifo_asyncfifo_dout;
wire usb_usb_core_rx_flagsFifo_graycounter0_ce;
reg [1:0] usb_usb_core_rx_flagsFifo_graycounter0_q = 2'd0;
wire [1:0] usb_usb_core_rx_flagsFifo_graycounter0_q_next;
reg [1:0] usb_usb_core_rx_flagsFifo_graycounter0_q_binary = 2'd0;
reg [1:0] usb_usb_core_rx_flagsFifo_graycounter0_q_next_binary = 2'd0;
wire usb_usb_core_rx_flagsFifo_graycounter1_ce;
reg [1:0] usb_usb_core_rx_flagsFifo_graycounter1_q = 2'd0;
wire [1:0] usb_usb_core_rx_flagsFifo_graycounter1_q_next;
reg [1:0] usb_usb_core_rx_flagsFifo_graycounter1_q_binary = 2'd0;
reg [1:0] usb_usb_core_rx_flagsFifo_graycounter1_q_next_binary = 2'd0;
wire [1:0] usb_usb_core_rx_flagsFifo_produce_rdomain;
wire [1:0] usb_usb_core_rx_flagsFifo_consume_wdomain;
wire usb_usb_core_rx_flagsFifo_wrport_adr;
wire [1:0] usb_usb_core_rx_flagsFifo_wrport_dat_r;
wire usb_usb_core_rx_flagsFifo_wrport_we;
wire [1:0] usb_usb_core_rx_flagsFifo_wrport_dat_w;
wire usb_usb_core_rx_flagsFifo_rdport_adr;
wire [1:0] usb_usb_core_rx_flagsFifo_rdport_dat_r;
reg [3:0] usb_usb_core_o_pid = 4'd0;
reg [6:0] usb_usb_core_o_addr = 7'd0;
reg usb_usb_core_endp4 = 1'd0;
reg [3:0] usb_usb_core_o_endp = 4'd0;
reg [4:0] usb_usb_core_crc5 = 5'd0;
reg usb_usb_core_o_decoded = 1'd0;
wire usb_usb_core_reset0;
wire usb_usb_core_usb_reset;
reg usb_usb_core_data_recv_put = 1'd0;
wire [7:0] usb_usb_core_data_recv_payload;
reg usb_usb_core_data_send_get = 1'd0;
reg usb_usb_core_data_send_have = 1'd0;
reg [7:0] usb_usb_core_data_send_payload = 8'd0;
reg usb_usb_core_rdy = 1'd1;
wire usb_usb_core_dtb;
reg usb_usb_core_arm = 1'd0;
reg usb_usb_core_sta = 1'd0;
reg [6:0] usb_usb_core_addr = 7'd0;
reg [3:0] usb_usb_core_tok = 4'd0;
reg [3:0] usb_usb_core_endp = 4'd0;
reg usb_usb_core_idle = 1'd0;
reg usb_usb_core_start = 1'd0;
reg usb_usb_core_poll = 1'd0;
reg usb_usb_core_setup = 1'd0;
reg usb_usb_core_commit = 1'd0;
reg usb_usb_core_retry = 1'd0;
reg usb_usb_core_abort = 1'd0;
wire usb_usb_core_end;
reg usb_usb_core_data_end = 1'd0;
reg usb_usb_core_error = 1'd0;
wire usb_usb_core_transfer_reset;
reg [3:0] usb_usb_core_response_pid = 4'd0;
wire usb_usb_core_is_el0;
wire usb_usb_core_is_el1;
reg usb_pullup_storage = 1'd0;
reg usb_pullup_re = 1'd0;
reg usb_debug_packet_detected = 1'd0;
wire [6:0] usb_csrfield_addr;
reg [6:0] usb_csrstorage_storage = 7'd0;
reg usb_csrstorage_re = 1'd0;
wire usb_address_reset;
reg usb_csrfield_in = 1'd0;
reg usb_csrfield_out = 1'd0;
reg usb_csrfield_setup = 1'd0;
reg usb_csrfield_reset = 1'd0;
reg [3:0] usb_status = 4'd0;
wire usb_we;
reg usb_setuphandler_reset = 1'd0;
reg usb_setuphandler_begin = 1'd0;
reg usb_setuphandler_epno = 1'd0;
wire usb_setuphandler_usb_reset;
wire [7:0] usb_setuphandler_csrfield_data0;
wire [7:0] usb_setuphandler_data_status;
wire usb_setuphandler_data_we;
reg usb_setuphandler_csrfield_reset = 1'd0;
reg [5:0] usb_setuphandler_ctrl_storage = 6'd0;
reg usb_setuphandler_ctrl_re = 1'd0;
wire [3:0] usb_setuphandler_csrfield_epno;
wire usb_setuphandler_csrfield_have;
wire usb_setuphandler_csrfield_pend;
wire usb_setuphandler_csrfield_is_in;
wire usb_setuphandler_csrfield_data1;
reg [7:0] usb_setuphandler_status_status = 8'd0;
wire usb_setuphandler_status_we;
wire usb_setuphandler_irq;
wire usb_setuphandler_packet_status;
reg usb_setuphandler_packet_pending = 1'd0;
wire usb_setuphandler_packet_trigger;
reg usb_setuphandler_packet_clear = 1'd0;
wire usb_setuphandler_reset_status;
reg usb_setuphandler_reset_pending = 1'd0;
wire usb_setuphandler_reset_trigger;
reg usb_setuphandler_reset_clear = 1'd0;
reg usb_setuphandler_reset_old_trigger = 1'd0;
wire usb_setuphandler_eventmanager_status_re;
wire [1:0] usb_setuphandler_eventmanager_status_r;
wire usb_setuphandler_eventmanager_status_we;
reg [1:0] usb_setuphandler_eventmanager_status_w = 2'd0;
wire usb_setuphandler_eventmanager_pending_re;
wire [1:0] usb_setuphandler_eventmanager_pending_r;
wire usb_setuphandler_eventmanager_pending_we;
reg [1:0] usb_setuphandler_eventmanager_pending_w = 2'd0;
reg [1:0] usb_setuphandler_eventmanager_storage = 2'd0;
reg usb_setuphandler_eventmanager_re = 1'd0;
reg [7:0] usb_setuphandler_data_recv_payload = 8'd0;
reg usb_setuphandler_data_recv_put = 1'd0;
wire usb_setuphandler_setuphandlerinner_re;
reg usb_setuphandler_setuphandlerinner_readable = 1'd0;
reg usb_setuphandler_setuphandlerinner_syncfifo_we = 1'd0;
wire usb_setuphandler_setuphandlerinner_syncfifo_writable;
wire usb_setuphandler_setuphandlerinner_syncfifo_re;
wire usb_setuphandler_setuphandlerinner_syncfifo_readable;
reg [7:0] usb_setuphandler_setuphandlerinner_syncfifo_din = 8'd0;
wire [7:0] usb_setuphandler_setuphandlerinner_syncfifo_dout;
reg [3:0] usb_setuphandler_setuphandlerinner_level0 = 4'd0;
reg usb_setuphandler_setuphandlerinner_replace = 1'd0;
reg [3:0] usb_setuphandler_setuphandlerinner_produce = 4'd0;
reg [3:0] usb_setuphandler_setuphandlerinner_consume = 4'd0;
reg [3:0] usb_setuphandler_setuphandlerinner_wrport_adr = 4'd0;
wire [7:0] usb_setuphandler_setuphandlerinner_wrport_dat_r;
wire usb_setuphandler_setuphandlerinner_wrport_we;
wire [7:0] usb_setuphandler_setuphandlerinner_wrport_dat_w;
wire usb_setuphandler_setuphandlerinner_do_read;
wire [3:0] usb_setuphandler_setuphandlerinner_rdport_adr;
wire [7:0] usb_setuphandler_setuphandlerinner_rdport_dat_r;
wire usb_setuphandler_setuphandlerinner_rdport_re;
wire [3:0] usb_setuphandler_setuphandlerinner_level1;
reg [3:0] usb_setuphandler_setuphandlerinner_data_byte = 4'd0;
reg usb_setuphandler_setuphandlerinner_have_data_stage = 1'd0;
reg usb_setuphandler_setuphandlerinner_is_in = 1'd0;
wire usb_setuphandler_setuphandlerinner_empty;
wire usb_setuphandler_inner_reset;
wire usb_inhandler_dtb;
reg [15:0] usb_inhandler_dtbs = 16'd1;
reg [15:0] usb_inhandler_stall_status = 16'd0;
wire usb_inhandler_syncfifobuffered_re;
reg usb_inhandler_syncfifobuffered_readable = 1'd0;
wire usb_inhandler_syncfifobuffered_syncfifo_we;
wire usb_inhandler_syncfifobuffered_syncfifo_writable;
wire usb_inhandler_syncfifobuffered_syncfifo_re;
wire usb_inhandler_syncfifobuffered_syncfifo_readable;
wire [7:0] usb_inhandler_syncfifobuffered_syncfifo_din;
wire [7:0] usb_inhandler_syncfifobuffered_syncfifo_dout;
reg [6:0] usb_inhandler_syncfifobuffered_level0 = 7'd0;
reg usb_inhandler_syncfifobuffered_replace = 1'd0;
reg [5:0] usb_inhandler_syncfifobuffered_produce = 6'd0;
reg [5:0] usb_inhandler_syncfifobuffered_consume = 6'd0;
reg [5:0] usb_inhandler_syncfifobuffered_wrport_adr = 6'd0;
wire [7:0] usb_inhandler_syncfifobuffered_wrport_dat_r;
wire usb_inhandler_syncfifobuffered_wrport_we;
wire [7:0] usb_inhandler_syncfifobuffered_wrport_dat_w;
wire usb_inhandler_syncfifobuffered_do_read;
wire [5:0] usb_inhandler_syncfifobuffered_rdport_adr;
wire [7:0] usb_inhandler_syncfifobuffered_rdport_dat_r;
wire usb_inhandler_syncfifobuffered_rdport_re;
wire [6:0] usb_inhandler_syncfifobuffered_level1;
wire usb_inhandler_data_buf_reset;
wire [7:0] usb_inhandler_csrfield_data;
reg [7:0] usb_inhandler_data_storage = 8'd0;
reg usb_inhandler_data_re = 1'd0;
wire [3:0] usb_inhandler_csrfield_epno;
reg usb_inhandler_csrfield_reset = 1'd0;
reg usb_inhandler_csrfield_stall = 1'd0;
reg [6:0] usb_inhandler_ctrl_storage = 7'd0;
reg usb_inhandler_ctrl_re = 1'd0;
wire usb_inhandler_csrfield_idle;
wire usb_inhandler_csrfield_have;
wire usb_inhandler_csrfield_pend;
reg [5:0] usb_inhandler_status_status = 6'd0;
wire usb_inhandler_status_we;
wire usb_inhandler_irq;
wire usb_inhandler_packet_status;
reg usb_inhandler_packet_pending = 1'd0;
wire usb_inhandler_packet_trigger;
reg usb_inhandler_packet_clear = 1'd0;
wire usb_inhandler_eventmanager_status_re;
wire usb_inhandler_eventmanager_status_r;
wire usb_inhandler_eventmanager_status_we;
wire usb_inhandler_eventmanager_status_w;
wire usb_inhandler_eventmanager_pending_re;
wire usb_inhandler_eventmanager_pending_r;
wire usb_inhandler_eventmanager_pending_we;
wire usb_inhandler_eventmanager_pending_w;
reg usb_inhandler_eventmanager_storage = 1'd0;
reg usb_inhandler_eventmanager_re = 1'd0;
wire [15:0] usb_inhandler_ep_stall_mask;
wire usb_inhandler_stalled;
wire usb_inhandler_response;
reg usb_inhandler_queued = 1'd0;
reg usb_inhandler_was_queued = 1'd0;
reg usb_inhandler_transmitted = 1'd0;
reg usb_inhandler_dtb_reset = 1'd0;
wire [7:0] usb_inhandler_data_out;
wire usb_inhandler_data_out_have;
reg usb_inhandler_data_out_advance = 1'd0;
wire usb_inhandler_is_our_packet;
wire usb_inhandler_is_in_packet;
wire usb_outhandler_syncfifobuffered_re;
reg usb_outhandler_syncfifobuffered_readable = 1'd0;
wire usb_outhandler_syncfifobuffered_syncfifo_we;
wire usb_outhandler_syncfifobuffered_syncfifo_writable;
wire usb_outhandler_syncfifobuffered_syncfifo_re;
wire usb_outhandler_syncfifobuffered_syncfifo_readable;
wire [7:0] usb_outhandler_syncfifobuffered_syncfifo_din;
wire [7:0] usb_outhandler_syncfifobuffered_syncfifo_dout;
reg [6:0] usb_outhandler_syncfifobuffered_level0 = 7'd0;
reg usb_outhandler_syncfifobuffered_replace = 1'd0;
reg [6:0] usb_outhandler_syncfifobuffered_produce = 7'd0;
reg [6:0] usb_outhandler_syncfifobuffered_consume = 7'd0;
reg [6:0] usb_outhandler_syncfifobuffered_wrport_adr = 7'd0;
wire [7:0] usb_outhandler_syncfifobuffered_wrport_dat_r;
wire usb_outhandler_syncfifobuffered_wrport_we;
wire [7:0] usb_outhandler_syncfifobuffered_wrport_dat_w;
wire usb_outhandler_syncfifobuffered_do_read;
wire [6:0] usb_outhandler_syncfifobuffered_rdport_adr;
wire [7:0] usb_outhandler_syncfifobuffered_rdport_dat_r;
wire usb_outhandler_syncfifobuffered_rdport_re;
wire [6:0] usb_outhandler_syncfifobuffered_level1;
wire usb_outhandler_data_buf_reset;
wire [7:0] usb_outhandler_csrfield_data;
wire [7:0] usb_outhandler_data_status;
wire usb_outhandler_data_we;
wire [3:0] usb_outhandler_csrfield_epno0;
wire usb_outhandler_csrfield_enable;
reg usb_outhandler_csrfield_reset = 1'd0;
wire usb_outhandler_csrfield_stall;
reg [6:0] usb_outhandler_ctrl_storage = 7'd0;
reg usb_outhandler_ctrl_re = 1'd0;
wire [3:0] usb_outhandler_csrfield_epno1;
wire usb_outhandler_csrfield_have;
wire usb_outhandler_csrfield_pend;
reg [5:0] usb_outhandler_status_status = 6'd0;
wire usb_outhandler_status_we;
wire usb_outhandler_irq;
wire usb_outhandler_packet_status;
reg usb_outhandler_packet_pending = 1'd0;
wire usb_outhandler_packet_trigger;
reg usb_outhandler_packet_clear = 1'd0;
wire usb_outhandler_eventmanager_status_re;
wire usb_outhandler_eventmanager_status_r;
wire usb_outhandler_eventmanager_status_we;
wire usb_outhandler_eventmanager_status_w;
wire usb_outhandler_eventmanager_pending_re;
wire usb_outhandler_eventmanager_pending_r;
wire usb_outhandler_eventmanager_pending_we;
wire usb_outhandler_eventmanager_pending_w;
reg usb_outhandler_eventmanager_storage = 1'd0;
reg usb_outhandler_eventmanager_re = 1'd0;
reg usb_outhandler_usb_reset = 1'd0;
wire usb_outhandler_stalled;
wire usb_outhandler_enabled;
reg [15:0] usb_outhandler_stall_status = 16'd0;
reg [15:0] usb_outhandler_enable_status = 16'd0;
reg [15:0] usb_outhandler_ep_mask = 16'd1;
reg [3:0] usb_outhandler_epno = 4'd0;
wire usb_outhandler_response;
reg usb_outhandler_responding = 1'd0;
wire usb_outhandler_is_out_packet;
reg [7:0] usb_outhandler_data_recv_payload = 8'd0;
reg usb_outhandler_data_recv_put = 1'd0;
wire usb_ev_irq;
reg usb_in_next = 1'd0;
reg usb_out_next = 1'd0;
reg usb_usb_core_reset1 = 1'd0;
wire usb_resetinserter_reset;
wire touch_touch1_o;
wire touch_touch1_oe;
wire touch_touch1_i;
wire touch_touch2_o;
wire touch_touch2_oe;
wire touch_touch2_i;
wire touch_touch3_o;
wire touch_touch3_oe;
wire touch_touch3_i;
wire touch_touch4_o;
wire touch_touch4_oe;
wire touch_touch4_i;
reg [3:0] touch_o_storage = 4'd0;
reg touch_o_re = 1'd0;
reg [3:0] touch_oe_storage = 4'd0;
reg touch_oe_re = 1'd0;
wire [3:0] touch_status;
wire touch_we;
wire [1:0] image;
wire [5:0] key;
reg [7:0] ctrl_storage = 8'd0;
reg ctrl_re = 1'd0;
reg [31:0] addr_storage = 32'd0;
reg addr_re = 1'd0;
wire do_reset;
reg [2:0] sbled_rgba_pwm = 3'd0;
reg [7:0] sbled_dat_storage = 8'd0;
reg sbled_dat_re = 1'd0;
reg [3:0] sbled_addr_storage = 4'd0;
reg sbled_addr_re = 1'd0;
wire sbled_exe;
wire sbled_curren;
wire sbled_rgbleden;
wire sbled_rraw;
wire sbled_graw;
wire sbled_braw;
reg [5:0] sbled_ctrl_storage = 6'd0;
reg sbled_ctrl_re = 1'd0;
wire sbled_r;
wire sbled_g;
wire sbled_b;
reg [2:0] sbled_raw_storage = 3'd0;
reg sbled_raw_re = 1'd0;
wire [2:0] sbled_ledd_value;
wire sbled;
reg wb2csr_state = 1'd0;
reg wb2csr_next_state = 1'd0;
reg [1:0] triendpointinterface_fsm_state = 2'd0;
reg [1:0] triendpointinterface_fsm_next_state = 2'd0;
reg [7:0] usb_usb_core_tx_sync_pulse_txpipeline_next_value0 = 8'd0;
reg usb_usb_core_tx_sync_pulse_txpipeline_next_value_ce0 = 1'd0;
reg [1:0] usb_usb_core_tx_state_gray_txpipeline_next_value1 = 2'd0;
reg usb_usb_core_tx_state_gray_txpipeline_next_value_ce1 = 1'd0;
reg [2:0] triendpointinterface_resetinserter_state = 3'd0;
reg [2:0] triendpointinterface_resetinserter_next_state = 3'd0;
reg [2:0] triendpointinterface_txnrziencoder_state = 3'd0;
reg [2:0] triendpointinterface_txnrziencoder_next_state = 3'd0;
reg [3:0] triendpointinterface_txpacketsend_state = 4'd0;
reg [3:0] triendpointinterface_txpacketsend_next_state = 4'd0;
reg usb_usb_core_tx_i_oe_txpacketsend_next_value0 = 1'd0;
reg usb_usb_core_tx_i_oe_txpacketsend_next_value_ce0 = 1'd0;
reg [3:0] usb_usb_core_txstate_pid_txpacketsend_next_value1 = 4'd0;
reg usb_usb_core_txstate_pid_txpacketsend_next_value_ce1 = 1'd0;
reg [2:0] triendpointinterface_rxpipeline_state = 3'd0;
reg [2:0] triendpointinterface_rxpipeline_next_state = 3'd0;
reg [2:0] triendpointinterface_rxpipeline_rxpacketdetect_state = 3'd0;
reg [2:0] triendpointinterface_rxpipeline_rxpacketdetect_next_state = 3'd0;
reg [2:0] triendpointinterface_rxpipeline_rxbitstuffremover_state = 3'd0;
reg [2:0] triendpointinterface_rxpipeline_rxbitstuffremover_next_state = 3'd0;
reg [2:0] triendpointinterface_packetheaderdecode_state = 3'd0;
reg [2:0] triendpointinterface_packetheaderdecode_next_state = 3'd0;
reg [3:0] usb_usb_core_o_pid_packetheaderdecode_next_value0 = 4'd0;
reg usb_usb_core_o_pid_packetheaderdecode_next_value_ce0 = 1'd0;
reg [6:0] triendpointinterface_packetheaderdecode_next_value = 7'd0;
reg triendpointinterface_packetheaderdecode_next_value_ce = 1'd0;
reg usb_usb_core_endp4_packetheaderdecode_next_value1 = 1'd0;
reg usb_usb_core_endp4_packetheaderdecode_next_value_ce1 = 1'd0;
reg [3:0] usb_usb_core_o_endp_packetheaderdecode_next_value2 = 4'd0;
reg usb_usb_core_o_endp_packetheaderdecode_next_value_ce2 = 1'd0;
reg [4:0] usb_usb_core_crc5_packetheaderdecode_next_value3 = 5'd0;
reg usb_usb_core_crc5_packetheaderdecode_next_value_ce3 = 1'd0;
reg [3:0] triendpointinterface_clockdomainsrenamer_state = 4'd1;
reg [3:0] triendpointinterface_clockdomainsrenamer_next_state = 4'd0;
reg [3:0] usb_usb_core_tok_f_next_value0 = 4'd0;
reg usb_usb_core_tok_f_next_value_ce0 = 1'd0;
reg [3:0] usb_usb_core_endp_f_next_value1 = 4'd0;
reg usb_usb_core_endp_f_next_value_ce1 = 1'd0;
reg [3:0] usb_usb_core_response_pid_t_next_value = 4'd0;
reg usb_usb_core_response_pid_t_next_value_ce = 1'd0;
reg [2:0] triendpointinterface_state = 3'd0;
reg [2:0] triendpointinterface_next_state = 3'd0;
reg [6:0] usb_usb_core_addr_next_value = 7'd0;
reg usb_usb_core_addr_next_value_ce = 1'd0;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire [1:0] request;
reg grant = 1'd0;
reg [4:0] slave_sel = 5'd0;
reg [4:0] slave_sel_r = 5'd0;
reg error = 1'd0;
wire wait_1;
wire done;
reg [19:0] count = 20'd1000000;
wire [13:0] interface0_bank_bus_adr;
wire interface0_bank_bus_we;
wire [31:0] interface0_bank_bus_dat_w;
reg [31:0] interface0_bank_bus_dat_r = 32'd0;
wire csrbank0_control0_re;
wire [11:0] csrbank0_control0_r;
wire csrbank0_control0_we;
wire [11:0] csrbank0_control0_w;
wire csrbank0_keyboard0_re;
wire [7:0] csrbank0_keyboard0_r;
wire csrbank0_keyboard0_we;
wire [7:0] csrbank0_keyboard0_w;
wire csrbank0_screen_re;
wire [28:0] csrbank0_screen_r;
wire csrbank0_screen_we;
wire [28:0] csrbank0_screen_w;
wire csrbank0_diskctrl_re;
wire [7:0] csrbank0_diskctrl_r;
wire csrbank0_diskctrl_we;
wire [7:0] csrbank0_diskctrl_w;
wire csrbank0_diskdata0_re;
wire [7:0] csrbank0_diskdata0_r;
wire csrbank0_diskdata0_we;
wire [7:0] csrbank0_diskdata0_w;
wire csrbank0_sel;
wire [13:0] interface1_bank_bus_adr;
wire interface1_bank_bus_we;
wire [31:0] interface1_bank_bus_dat_w;
reg [31:0] interface1_bank_bus_dat_r = 32'd0;
wire csrbank1_reset0_re;
wire csrbank1_reset0_r;
wire csrbank1_reset0_we;
wire csrbank1_reset0_w;
wire csrbank1_scratch0_re;
wire [31:0] csrbank1_scratch0_r;
wire csrbank1_scratch0_we;
wire [31:0] csrbank1_scratch0_w;
wire csrbank1_bus_errors_re;
wire [31:0] csrbank1_bus_errors_r;
wire csrbank1_bus_errors_we;
wire [31:0] csrbank1_bus_errors_w;
wire csrbank1_sel;
wire [13:0] interface2_bank_bus_adr;
wire interface2_bank_bus_we;
wire [31:0] interface2_bank_bus_dat_w;
reg [31:0] interface2_bank_bus_dat_r = 32'd0;
wire csrbank2_bitbang0_re;
wire [3:0] csrbank2_bitbang0_r;
wire csrbank2_bitbang0_we;
wire [3:0] csrbank2_bitbang0_w;
wire csrbank2_miso_re;
wire csrbank2_miso_r;
wire csrbank2_miso_we;
wire csrbank2_miso_w;
wire csrbank2_bitbang_en0_re;
wire csrbank2_bitbang_en0_r;
wire csrbank2_bitbang_en0_we;
wire csrbank2_bitbang_en0_w;
wire csrbank2_sel;
wire [13:0] interface3_bank_bus_adr;
wire interface3_bank_bus_we;
wire [31:0] interface3_bank_bus_dat_w;
reg [31:0] interface3_bank_bus_dat_r = 32'd0;
wire csrbank3_ctrl0_re;
wire [7:0] csrbank3_ctrl0_r;
wire csrbank3_ctrl0_we;
wire [7:0] csrbank3_ctrl0_w;
wire csrbank3_addr0_re;
wire [31:0] csrbank3_addr0_r;
wire csrbank3_addr0_we;
wire [31:0] csrbank3_addr0_w;
wire csrbank3_sel;
wire [13:0] interface4_bank_bus_adr;
wire interface4_bank_bus_we;
wire [31:0] interface4_bank_bus_dat_w;
reg [31:0] interface4_bank_bus_dat_r = 32'd0;
wire csrbank4_dat0_re;
wire [7:0] csrbank4_dat0_r;
wire csrbank4_dat0_we;
wire [7:0] csrbank4_dat0_w;
wire csrbank4_addr0_re;
wire [3:0] csrbank4_addr0_r;
wire csrbank4_addr0_we;
wire [3:0] csrbank4_addr0_w;
wire csrbank4_ctrl0_re;
wire [5:0] csrbank4_ctrl0_r;
wire csrbank4_ctrl0_we;
wire [5:0] csrbank4_ctrl0_w;
wire csrbank4_raw0_re;
wire [2:0] csrbank4_raw0_r;
wire csrbank4_raw0_we;
wire [2:0] csrbank4_raw0_w;
wire csrbank4_sel;
wire [13:0] interface5_bank_bus_adr;
wire interface5_bank_bus_we;
wire [31:0] interface5_bank_bus_dat_w;
reg [31:0] interface5_bank_bus_dat_r = 32'd0;
wire csrbank5_load0_re;
wire [31:0] csrbank5_load0_r;
wire csrbank5_load0_we;
wire [31:0] csrbank5_load0_w;
wire csrbank5_reload0_re;
wire [31:0] csrbank5_reload0_r;
wire csrbank5_reload0_we;
wire [31:0] csrbank5_reload0_w;
wire csrbank5_en0_re;
wire csrbank5_en0_r;
wire csrbank5_en0_we;
wire csrbank5_en0_w;
wire csrbank5_update_value0_re;
wire csrbank5_update_value0_r;
wire csrbank5_update_value0_we;
wire csrbank5_update_value0_w;
wire csrbank5_value_re;
wire [31:0] csrbank5_value_r;
wire csrbank5_value_we;
wire [31:0] csrbank5_value_w;
wire csrbank5_ev_enable0_re;
wire csrbank5_ev_enable0_r;
wire csrbank5_ev_enable0_we;
wire csrbank5_ev_enable0_w;
wire csrbank5_sel;
wire [13:0] interface6_bank_bus_adr;
wire interface6_bank_bus_we;
wire [31:0] interface6_bank_bus_dat_w;
reg [31:0] interface6_bank_bus_dat_r = 32'd0;
wire csrbank6_o0_re;
wire [3:0] csrbank6_o0_r;
wire csrbank6_o0_we;
wire [3:0] csrbank6_o0_w;
wire csrbank6_oe0_re;
wire [3:0] csrbank6_oe0_r;
wire csrbank6_oe0_we;
wire [3:0] csrbank6_oe0_w;
wire csrbank6_i_re;
wire [3:0] csrbank6_i_r;
wire csrbank6_i_we;
wire [3:0] csrbank6_i_w;
wire csrbank6_sel;
wire [13:0] interface7_bank_bus_adr;
wire interface7_bank_bus_we;
wire [31:0] interface7_bank_bus_dat_w;
reg [31:0] interface7_bank_bus_dat_r = 32'd0;
wire csrbank7_pullup_out0_re;
wire csrbank7_pullup_out0_r;
wire csrbank7_pullup_out0_we;
wire csrbank7_pullup_out0_w;
wire csrbank7_address0_re;
wire [6:0] csrbank7_address0_r;
wire csrbank7_address0_we;
wire [6:0] csrbank7_address0_w;
wire csrbank7_next_ev_re;
wire [3:0] csrbank7_next_ev_r;
wire csrbank7_next_ev_we;
wire [3:0] csrbank7_next_ev_w;
wire csrbank7_setup_data_re;
wire [7:0] csrbank7_setup_data_r;
wire csrbank7_setup_data_we;
wire [7:0] csrbank7_setup_data_w;
wire csrbank7_setup_ctrl0_re;
wire [5:0] csrbank7_setup_ctrl0_r;
wire csrbank7_setup_ctrl0_we;
wire [5:0] csrbank7_setup_ctrl0_w;
wire csrbank7_setup_status_re;
wire [7:0] csrbank7_setup_status_r;
wire csrbank7_setup_status_we;
wire [7:0] csrbank7_setup_status_w;
wire csrbank7_setup_ev_enable0_re;
wire [1:0] csrbank7_setup_ev_enable0_r;
wire csrbank7_setup_ev_enable0_we;
wire [1:0] csrbank7_setup_ev_enable0_w;
wire csrbank7_in_data0_re;
wire [7:0] csrbank7_in_data0_r;
wire csrbank7_in_data0_we;
wire [7:0] csrbank7_in_data0_w;
wire csrbank7_in_ctrl0_re;
wire [6:0] csrbank7_in_ctrl0_r;
wire csrbank7_in_ctrl0_we;
wire [6:0] csrbank7_in_ctrl0_w;
wire csrbank7_in_status_re;
wire [5:0] csrbank7_in_status_r;
wire csrbank7_in_status_we;
wire [5:0] csrbank7_in_status_w;
wire csrbank7_in_ev_enable0_re;
wire csrbank7_in_ev_enable0_r;
wire csrbank7_in_ev_enable0_we;
wire csrbank7_in_ev_enable0_w;
wire csrbank7_out_data_re;
wire [7:0] csrbank7_out_data_r;
wire csrbank7_out_data_we;
wire [7:0] csrbank7_out_data_w;
wire csrbank7_out_ctrl0_re;
wire [6:0] csrbank7_out_ctrl0_r;
wire csrbank7_out_ctrl0_we;
wire [6:0] csrbank7_out_ctrl0_w;
wire csrbank7_out_status_re;
wire [5:0] csrbank7_out_status_r;
wire csrbank7_out_status_we;
wire [5:0] csrbank7_out_status_w;
wire csrbank7_out_ev_enable0_re;
wire csrbank7_out_ev_enable0_r;
wire csrbank7_out_ev_enable0_we;
wire csrbank7_out_ev_enable0_w;
wire csrbank7_sel;
wire [13:0] adr;
wire we;
wire [31:0] dat_w;
wire [31:0] dat_r;
wire [8:0] slice_proxy;
reg [29:0] array_muxed0 = 30'd0;
reg [31:0] array_muxed1 = 32'd0;
reg [3:0] array_muxed2 = 4'd0;
reg array_muxed3 = 1'd0;
reg array_muxed4 = 1'd0;
reg array_muxed5 = 1'd0;
reg [2:0] array_muxed6 = 3'd0;
reg [1:0] array_muxed7 = 2'd0;
wire rst1;
reg multiregimpl0_regs0 = 1'd0;
reg multiregimpl0_regs1 = 1'd0;
reg multiregimpl1_regs0 = 1'd0;
reg multiregimpl1_regs1 = 1'd0;
reg multiregimpl2_regs0 = 1'd0;
reg multiregimpl2_regs1 = 1'd0;
reg multiregimpl2_regs2 = 1'd0;
reg multiregimpl3_regs0 = 1'd0;
reg multiregimpl3_regs1 = 1'd0;
reg multiregimpl3_regs2 = 1'd0;
reg multiregimpl4_regs = 1'd0;
reg [1:0] multiregimpl5_regs0 = 2'd0;
reg [1:0] multiregimpl5_regs1 = 2'd0;
reg [1:0] multiregimpl6_regs0 = 2'd0;
reg [1:0] multiregimpl6_regs1 = 2'd0;
reg [1:0] multiregimpl7_regs0 = 2'd0;
reg [1:0] multiregimpl7_regs1 = 2'd0;
reg [1:0] multiregimpl8_regs0 = 2'd0;
reg [1:0] multiregimpl8_regs1 = 2'd0;

assign basesoc_cpu_reset = basesoc_soccontroller_reset;
assign basesoc_soccontroller_bus_error = error;
always @(*) begin
	basesoc_cpu_interrupt <= 32'd0;
	basesoc_cpu_interrupt[2] <= basesoc_irq;
	basesoc_cpu_interrupt[3] <= usb_ev_irq;
end
assign por_clk = sys_clk;
assign sys_rst = (reset_delay != 1'd0);
assign usb_12_rst = (reset_delay != 1'd0);
assign usb_48_rst = (reset_delay != 1'd0);
assign usb_48_clk = clk48;
assign sys_clk = clk12;
assign usb_12_clk = clk12;
assign basesoc_soccontroller_reset = basesoc_soccontroller_reset_re;
assign basesoc_soccontroller_bus_errors_status = basesoc_soccontroller_bus_errors;
assign basesoc_zero_trigger = (basesoc_value != 1'd0);
assign basesoc_eventmanager_status_w = basesoc_zero_status;
always @(*) begin
	basesoc_zero_clear <= 1'd0;
	if ((basesoc_eventmanager_pending_re & basesoc_eventmanager_pending_r)) begin
		basesoc_zero_clear <= 1'd1;
	end
end
assign basesoc_eventmanager_pending_w = basesoc_zero_pending;
assign basesoc_irq = (basesoc_eventmanager_pending_w & basesoc_eventmanager_storage);
assign basesoc_zero_status = basesoc_zero_trigger;
assign basesoc_dat_w = basesoc_wishbone_dat_w;
assign basesoc_wishbone_dat_r = basesoc_dat_r;
always @(*) begin
	basesoc_adr <= 14'd0;
	basesoc_we <= 1'd0;
	basesoc_wishbone_ack <= 1'd0;
	wb2csr_next_state <= 1'd0;
	wb2csr_next_state <= wb2csr_state;
	case (wb2csr_state)
		1'd1: begin
			basesoc_wishbone_ack <= 1'd1;
			wb2csr_next_state <= 1'd0;
		end
		default: begin
			if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
				basesoc_adr <= basesoc_wishbone_adr;
				basesoc_we <= basesoc_wishbone_we;
				wb2csr_next_state <= 1'd1;
			end
		end
	endcase
end
assign spram_datain0 = spram_bus_dat_w[15:0];
always @(*) begin
	spram_maskwren0 <= 4'd0;
	spram_maskwren0[0] <= spram_bus_sel[0];
	spram_maskwren0[1] <= spram_bus_sel[0];
	spram_maskwren0[2] <= spram_bus_sel[1];
	spram_maskwren0[3] <= spram_bus_sel[1];
end
assign spram_datain1 = spram_bus_dat_w[31:16];
always @(*) begin
	spram_wren0 <= 1'd0;
	spram_wren1 <= 1'd0;
	spram_bus_dat_r <= 32'd0;
	if ((spram_bus_adr[14] == 1'd0)) begin
		spram_wren0 <= ((spram_bus_we & spram_bus_stb) & spram_bus_cyc);
		spram_bus_dat_r[15:0] <= spram_dataout0;
	end
	if ((spram_bus_adr[14] == 1'd0)) begin
		spram_wren1 <= ((spram_bus_we & spram_bus_stb) & spram_bus_cyc);
		spram_bus_dat_r[31:16] <= spram_dataout1;
	end
end
always @(*) begin
	spram_maskwren1 <= 4'd0;
	spram_maskwren1[0] <= spram_bus_sel[2];
	spram_maskwren1[1] <= spram_bus_sel[2];
	spram_maskwren1[2] <= spram_bus_sel[3];
	spram_maskwren1[3] <= spram_bus_sel[3];
end
assign a2mem_shift = a2mem_addr6502[1:0];
assign a2mem_addrwb = a2mem_bus_adr[13:0];
assign a2mem_dinwb = a2mem_bus_dat_w;
assign a2mem_doutwb = a2mem_dout;
assign a2mem_wrenwb = ((a2mem_bus_we & a2mem_bus_stb) & a2mem_bus_cyc);
assign a2mem_wrenmaskwb = a2mem_bus_sel;
assign a2mem_bus_dat_r = a2mem_doutwb;
always @(*) begin
	a2mem_transparent6502 <= 8'd0;
	case (a2mem_read_shift)
		1'd0: begin
			a2mem_transparent6502 <= a2mem_dout[7:0];
		end
		1'd1: begin
			a2mem_transparent6502 <= a2mem_dout[15:8];
		end
		2'd2: begin
			a2mem_transparent6502 <= a2mem_dout[23:16];
		end
		2'd3: begin
			a2mem_transparent6502 <= a2mem_dout[31:24];
		end
	endcase
end
always @(*) begin
	a2mem_dout6502 <= 8'd0;
	if (a2mem_hold_en6502) begin
		a2mem_dout6502 <= a2mem_transparent6502;
	end else begin
		a2mem_dout6502 <= a2mem_hold6502;
	end
end
always @(*) begin
	a2mem_din <= 32'd0;
	a2mem_wrenmask <= 8'd0;
	a2mem_wren <= 1'd0;
	a2mem_addr <= 14'd0;
	if (a2mem_access6502) begin
		a2mem_addr <= a2mem_addr6502[15:2];
		a2mem_din <= {4{a2mem_din6502}};
		a2mem_wren <= a2mem_wren6502;
		case (a2mem_shift)
			1'd0: begin
				a2mem_wrenmask[1:0] <= {2{1'd1}};
			end
			1'd1: begin
				a2mem_wrenmask[3:2] <= {2{1'd1}};
			end
			2'd2: begin
				a2mem_wrenmask[5:4] <= {2{1'd1}};
			end
			2'd3: begin
				a2mem_wrenmask[7:6] <= {2{1'd1}};
			end
		endcase
	end else begin
		a2mem_addr <= a2mem_addrwb;
		a2mem_din <= a2mem_dinwb;
		a2mem_wren <= a2mem_wrenwb;
		a2mem_wrenmask <= {a2mem_wrenmaskwb[3], a2mem_wrenmaskwb[3], a2mem_wrenmaskwb[2], a2mem_wrenmaskwb[2], a2mem_wrenmaskwb[1], a2mem_wrenmaskwb[1], a2mem_wrenmaskwb[0], a2mem_wrenmaskwb[0]};
	end
end
assign a2mem_addr6502 = apple2_addr;
assign a2mem_din6502 = apple2_dout;
assign a2mem_wren6502 = apple2_wren;
assign apple2_strobe_w = apple2_available;
always @(*) begin
	apple2_w_memsel <= 1'd0;
	apple2_iosel <= 1'd0;
	a2mem_access6502 <= 1'd0;
	if ((apple2_addr[15:8] == 8'd192)) begin
		apple2_iosel <= 1'd1;
		apple2_w_memsel <= 1'd0;
		a2mem_access6502 <= 1'd0;
	end else begin
		apple2_iosel <= 1'd0;
		apple2_w_memsel <= 1'd1;
		a2mem_access6502 <= apple2_active;
	end
end
always @(*) begin
	apple2_din <= 8'd0;
	apple2_disk_read <= 1'd0;
	apple2_disk_read <= 1'd0;
	if (apple2_r_memsel) begin
		apple2_din <= a2mem_dout6502;
	end else begin
		if ((apple2_ior_addr[7:4] == 1'd0)) begin
			apple2_din <= {apple2_available, apple2_keyboard_storage[6:0]};
		end
		if ((apple2_ior_addr[7:4] == 4'd14)) begin
			apple2_din[6:0] <= apple2_diskdata_storage[6:0];
			apple2_disk_read <= 1'd1;
			if ((apple2_disk_data_available | apple2_diskdata_re)) begin
				apple2_din[7] <= apple2_diskdata_storage[7];
			end else begin
				apple2_din[7] <= 1'd0;
			end
		end
	end
end
assign apple2_active = (apple2_clk_en & apple2_display_fifo_syncfifo_writable);
assign apple2_Phase = apple2_disk_phase;
assign apple2_Motor = apple2_disk_motor;
assign apple2_Drive = apple2_disk_drive;
assign apple2_Wanted = apple2_disk_data_wanted;
assign apple2_Pending = apple2_disk_data_available;
assign apple2_fbsel = ((apple2_addr[14:10] == 1'd1) & apple2_active);
assign apple2_fb_r = (apple2_fbsel & (~apple2_wren));
assign apple2_fb_w = (apple2_fbsel & apple2_wren);
assign apple2_segment = apple2_addr[9:7];
assign apple2_triple = apple2_addr[6:0];
always @(*) begin
	apple2_third <= 2'd0;
	apple2_horiz <= 6'd0;
	if ((apple2_triple >= 7'd80)) begin
		apple2_third <= 2'd2;
		apple2_horiz <= (apple2_addr[6:0] - 7'd80);
	end else begin
		if ((apple2_triple >= 6'd40)) begin
			apple2_third <= 1'd1;
			apple2_horiz <= (apple2_addr[6:0] - 6'd40);
		end else begin
			apple2_third <= 1'd0;
			apple2_horiz <= apple2_addr[6:0];
		end
	end
end
assign apple2_vert = {apple2_third, apple2_segment};
assign apple2_scroll_match = ((apple2_horiz == apple2_read_horiz) & ((apple2_vert + 1'd1) == apple2_read_vert));
assign apple2_scroll_write_valid = ((apple2_scroll_read & apple2_fb_w) & apple2_scroll_match);
assign apple2_scroll_start = (apple2_scroll_write_valid & (~apple2_scroll_active));
assign apple2_scroll_end = ((apple2_scroll_active & apple2_fb_w) & (~apple2_scroll_write_valid));
assign apple2_scroll_next_col = (((apple2_horiz + 1'd1) == apple2_prev_horiz) & (apple2_vert == apple2_prev_vert));
assign apple2_scroll_next_row = (((apple2_horiz == 6'd39) & (apple2_prev_horiz == 1'd0)) & (apple2_vert == (apple2_prev_vert + 1'd1)));
assign apple2_scroll_sequential = (apple2_scroll_next_col | apple2_scroll_next_row);
always @(*) begin
	apple2_display_fifo_syncfifo_din <= 32'd0;
	apple2_display_fifo_syncfifo_din[8] <= 1'd0;
	apple2_display_fifo_syncfifo_din[9] <= 1'd0;
	apple2_display_fifo_syncfifo_din[11] <= apple2_repeat_end;
	if (apple2_push_save) begin
		apple2_display_fifo_syncfifo_din[7:0] <= apple2_prev_char;
		apple2_display_fifo_syncfifo_din[12] <= apple2_prev_start;
		apple2_display_fifo_syncfifo_din[13] <= apple2_scroll_end;
		apple2_display_fifo_syncfifo_din[21:16] <= apple2_prev_horiz;
		apple2_display_fifo_syncfifo_din[28:24] <= apple2_prev_vert;
	end else begin
		if (apple2_push_saving) begin
			apple2_display_fifo_syncfifo_din[7:0] <= apple2_prev_char;
			apple2_display_fifo_syncfifo_din[12] <= apple2_scroll_start;
			apple2_display_fifo_syncfifo_din[13] <= apple2_scroll_end;
			apple2_display_fifo_syncfifo_din[21:16] <= apple2_prev_horiz;
			apple2_display_fifo_syncfifo_din[28:24] <= apple2_prev_vert;
		end else begin
			apple2_display_fifo_syncfifo_din[7:0] <= apple2_dout;
			apple2_display_fifo_syncfifo_din[12] <= apple2_scroll_start;
			apple2_display_fifo_syncfifo_din[13] <= apple2_scroll_end;
			apple2_display_fifo_syncfifo_din[21:16] <= apple2_horiz;
			apple2_display_fifo_syncfifo_din[28:24] <= apple2_vert;
		end
	end
end
assign apple2_display_fifo_syncfifo_we = ((((apple2_push_save | apple2_repeat_end) | apple2_scroll_start) | apple2_scroll_end) | (((apple2_fb_w & (~apple2_scroll_active)) & (~apple2_repeat_active)) & (~apple2_repeat_start)));
assign apple2_push_saving = (((apple2_repeat_end & (~apple2_repeat_sequential)) | apple2_scroll_end) & (~apple2_push_save));
assign apple2_display_fifo_re = apple2_screen_we;
assign apple2_Valid = apple2_display_fifo_readable;
assign apple2_More = apple2_display_fifo_readable;
assign apple2_Character = apple2_fifo_out[7:0];
assign apple2_Horizontal = apple2_fifo_out[21:16];
assign apple2_Vertical = apple2_fifo_out[28:24];
assign apple2_Repeat = apple2_fifo_out[11];
assign apple2_ScrollStart = apple2_fifo_out[12];
assign apple2_ScrollEnd = apple2_fifo_out[13];
assign apple2_display_fifo_syncfifo_re = (apple2_display_fifo_syncfifo_readable & ((~apple2_display_fifo_readable) | apple2_display_fifo_re));
assign apple2_display_fifo_level1 = (apple2_display_fifo_level0 + apple2_display_fifo_readable);
always @(*) begin
	apple2_display_fifo_wrport_adr <= 8'd0;
	if (apple2_display_fifo_replace) begin
		apple2_display_fifo_wrport_adr <= (apple2_display_fifo_produce - 1'd1);
	end else begin
		apple2_display_fifo_wrport_adr <= apple2_display_fifo_produce;
	end
end
assign apple2_display_fifo_wrport_dat_w = apple2_display_fifo_syncfifo_din;
assign apple2_display_fifo_wrport_we = (apple2_display_fifo_syncfifo_we & (apple2_display_fifo_syncfifo_writable | apple2_display_fifo_replace));
assign apple2_display_fifo_do_read = (apple2_display_fifo_syncfifo_readable & apple2_display_fifo_syncfifo_re);
assign apple2_display_fifo_rdport_adr = apple2_display_fifo_consume;
assign apple2_display_fifo_syncfifo_dout = apple2_display_fifo_rdport_dat_r;
assign apple2_display_fifo_rdport_re = apple2_display_fifo_do_read;
assign apple2_display_fifo_syncfifo_writable = (apple2_display_fifo_level0 != 9'd256);
assign apple2_display_fifo_syncfifo_readable = (apple2_display_fifo_level0 != 1'd0);
assign rom_adr = rom_bus_adr[10:0];
assign rom_bus_dat_r = rom_dat_r;
assign lxspi_bus_dat_r = {lxspi_sr[7:0], lxspi_sr[15:8], lxspi_sr[23:16], lxspi_sr[31:24]};
always @(*) begin
	spiflash4x_clk <= 1'd0;
	lxspi_o <= 4'd0;
	lxspi_status <= 1'd0;
	lxspi_oe <= 1'd0;
	spiflash4x_cs_n <= 1'd0;
	if (lxspi_bitbang_en_storage) begin
		spiflash4x_clk <= lxspi_bitbang_storage[1];
		spiflash4x_cs_n <= lxspi_bitbang_storage[2];
		if (lxspi_bitbang_storage[3]) begin
			lxspi_oe <= 1'd0;
		end else begin
			lxspi_oe <= 1'd1;
		end
		if (lxspi_bitbang_storage[1]) begin
			lxspi_status <= lxspi_i0[1];
		end
		lxspi_o <= {{3{1'd1}}, lxspi_bitbang_storage[0]};
	end else begin
		spiflash4x_clk <= lxspi_clk1;
		spiflash4x_cs_n <= lxspi_cs_n1;
		lxspi_o <= lxspi_sr[31:28];
		lxspi_oe <= lxspi_dq_oe;
	end
end
assign usb_address_reset = usb_usb_core_usb_reset;
assign usb_setuphandler_usb_reset = usb_usb_core_usb_reset;
always @(*) begin
	usb_csrfield_setup <= 1'd0;
	usb_csrfield_reset <= 1'd0;
	usb_csrfield_in <= 1'd0;
	usb_csrfield_out <= 1'd0;
	if (usb_setuphandler_reset_pending) begin
		usb_csrfield_reset <= 1'd1;
	end else begin
		if (usb_in_next) begin
			usb_csrfield_in <= 1'd1;
		end else begin
			if (usb_out_next) begin
				usb_csrfield_out <= usb_out_next;
			end else begin
				if (usb_setuphandler_packet_pending) begin
					usb_csrfield_setup <= 1'd1;
				end
			end
		end
	end
end
assign usb_usb_core_dtb = (usb_inhandler_dtb | usb_debug_packet_detected);
assign usb_resetinserter_reset = usb_usb_core_usb_reset;
assign usb_usb_core_reset0 = (usb_usb_core_error | usb_usb_core_reset1);
assign usb_usb_core_tx_i_bit_strobe = usb_usb_core_rx_o_bit_strobe;
assign usb_usb_core_usb_reset = usb_usb_core_rx_o_reset;
assign usb_usb_core_rx_i_usbp = usb_iobuf_usb_p_rx;
assign usb_usb_core_rx_i_usbn = usb_iobuf_usb_n_rx;
assign usb_iobuf_usb_tx_en = usb_usb_core_tx_o_oe;
assign usb_iobuf_usb_p_tx = usb_usb_core_tx_o_usbp;
assign usb_iobuf_usb_n_tx = usb_usb_core_tx_o_usbn;
assign usb_usb_core_end = (usb_usb_core_commit | usb_usb_core_abort);
assign usb_usb_core_transfer_reset = usb_usb_core_reset0;
assign usb_usb_core_data_recv_payload = usb_usb_core_rx_o_data_payload;
assign usb_usb_core_txstate_i_data_payload0 = usb_usb_core_data_send_payload;
assign usb_usb_core_txstate_i_data_ready = usb_usb_core_data_send_have;
always @(*) begin
	usb_usb_core_rx_reset0 <= 1'd0;
	if (usb_usb_core_tx_o_oe) begin
		usb_usb_core_rx_reset0 <= 1'd1;
	end
end
assign usb_pullup = usb_iobuf_usb_pullup;
always @(*) begin
	usb_iobuf_usb_p_rx <= 1'd0;
	usb_iobuf_usb_n_rx <= 1'd0;
	if (usb_iobuf_usb_tx_en) begin
		usb_iobuf_usb_p_rx <= 1'd1;
		usb_iobuf_usb_n_rx <= 1'd0;
	end else begin
		usb_iobuf_usb_p_rx <= usb_iobuf_usb_p_t_i1;
		usb_iobuf_usb_n_rx <= usb_iobuf_usb_n_t_i1;
	end
end
assign usb_iobuf_usb_p_t_oe = usb_iobuf_usb_tx_en;
assign usb_iobuf_usb_n_t_oe = usb_iobuf_usb_tx_en;
assign usb_iobuf_usb_p_t_o = usb_iobuf_usb_p_tx;
assign usb_iobuf_usb_n_t_o = usb_iobuf_usb_n_tx;
assign usb_usb_core_tx_shifter_i_data = usb_usb_core_tx_i_data_payload;
assign usb_usb_core_tx_shifter_reset = (usb_usb_core_tx_da_reset_shifter | usb_usb_core_tx_sp_reset_shifter);
assign usb_usb_core_tx_shifter_ce = (~usb_usb_core_tx_stall);
assign usb_usb_core_tx_bitstuff_reset = usb_usb_core_tx_da_reset_bitstuff;
assign usb_usb_core_tx_bitstuff_i_data = usb_usb_core_tx_shifter_o_data;
assign usb_usb_core_tx_stall = usb_usb_core_tx_bitstuff_o_stall;
assign usb_usb_core_tx_sp_bit = usb_usb_core_tx_sync_pulse[0];
assign usb_usb_core_tx_sp_reset_bitstuff = usb_usb_core_tx_sync_pulse[0];
assign usb_usb_core_tx_sp_reset_shifter = usb_usb_core_tx_sync_pulse[1];
assign usb_usb_core_tx_sp_o_data_strobe = usb_usb_core_tx_sync_pulse[5];
assign usb_usb_core_tx_state_data = (usb_usb_core_tx_state_gray[0] & usb_usb_core_tx_state_gray[1]);
assign usb_usb_core_tx_state_sync = (usb_usb_core_tx_state_gray[0] & (~usb_usb_core_tx_state_gray[1]));
assign usb_usb_core_tx_fit_oe = (usb_usb_core_tx_state_data | usb_usb_core_tx_state_sync);
assign usb_usb_core_tx_fit_dat = (((usb_usb_core_tx_state_data & usb_usb_core_tx_shifter_o_data) & (~usb_usb_core_tx_bitstuff_o_stall)) | usb_usb_core_tx_sp_bit);
assign usb_usb_core_tx_o_data_strobe = ((((usb_usb_core_tx_state_data & usb_usb_core_tx_shifter_o_get) & (~usb_usb_core_tx_stall)) & usb_usb_core_tx_i_oe) | usb_usb_core_tx_sp_o_data_strobe);
assign usb_usb_core_tx_nrzi_i_valid = usb_usb_core_tx_i_bit_strobe;
assign usb_usb_core_tx_nrzi_i_data = usb_usb_core_tx_nrzi_dat;
assign usb_usb_core_tx_nrzi_i_oe = usb_usb_core_tx_nrzi_oe1;
assign usb_usb_core_tx_o_usbp = usb_usb_core_tx_nrzi_o_usbp;
assign usb_usb_core_tx_o_usbn = usb_usb_core_tx_nrzi_o_usbn;
assign usb_usb_core_tx_o_oe = usb_usb_core_tx_nrzi_o_oe;
always @(*) begin
	usb_usb_core_tx_state_gray_txpipeline_next_value1 <= 2'd0;
	usb_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd0;
	triendpointinterface_fsm_next_state <= 2'd0;
	usb_usb_core_tx_sync_pulse_txpipeline_next_value0 <= 8'd0;
	usb_usb_core_tx_sync_pulse_txpipeline_next_value_ce0 <= 1'd0;
	triendpointinterface_fsm_next_state <= triendpointinterface_fsm_state;
	case (triendpointinterface_fsm_state)
		1'd1: begin
			usb_usb_core_tx_sync_pulse_txpipeline_next_value0 <= (usb_usb_core_tx_sync_pulse >>> 1'd1);
			usb_usb_core_tx_sync_pulse_txpipeline_next_value_ce0 <= 1'd1;
			if (usb_usb_core_tx_sync_pulse[0]) begin
				triendpointinterface_fsm_next_state <= 2'd2;
				usb_usb_core_tx_state_gray_txpipeline_next_value1 <= 2'd3;
				usb_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
			end else begin
				usb_usb_core_tx_state_gray_txpipeline_next_value1 <= 1'd1;
				usb_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
			end
		end
		2'd2: begin
			if ((((~usb_usb_core_tx_i_oe) & usb_usb_core_tx_shifter_o_empty) & (~usb_usb_core_tx_bitstuff_o_stall))) begin
				if (usb_usb_core_tx_bitstuff_o_will_stall) begin
					triendpointinterface_fsm_next_state <= 2'd3;
				end else begin
					usb_usb_core_tx_state_gray_txpipeline_next_value1 <= 2'd2;
					usb_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
					triendpointinterface_fsm_next_state <= 1'd0;
				end
			end else begin
				usb_usb_core_tx_state_gray_txpipeline_next_value1 <= 2'd3;
				usb_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
			end
		end
		2'd3: begin
			usb_usb_core_tx_state_gray_txpipeline_next_value1 <= 2'd2;
			usb_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
			triendpointinterface_fsm_next_state <= 1'd0;
		end
		default: begin
			if (usb_usb_core_tx_i_oe) begin
				triendpointinterface_fsm_next_state <= 1'd1;
				usb_usb_core_tx_sync_pulse_txpipeline_next_value0 <= 8'd128;
				usb_usb_core_tx_sync_pulse_txpipeline_next_value_ce0 <= 1'd1;
				usb_usb_core_tx_state_gray_txpipeline_next_value1 <= 1'd1;
				usb_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
			end else begin
				usb_usb_core_tx_state_gray_txpipeline_next_value1 <= 1'd0;
				usb_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
			end
		end
	endcase
end
assign usb_usb_core_tx_shifter_empty = usb_usb_core_tx_shifter_pos[0];
assign usb_usb_core_tx_shifter_o_empty = usb_usb_core_tx_shifter_empty;
assign usb_usb_core_tx_shifter_o_data = usb_usb_core_tx_shifter_shifter[0];
assign usb_usb_core_tx_bitstuff_o_stall = usb_usb_core_tx_bitstuff_stuff_bit;
always @(*) begin
	usb_usb_core_tx_bitstuff_o_will_stall <= 1'd0;
	usb_usb_core_tx_bitstuff_stuff_bit <= 1'd0;
	triendpointinterface_resetinserter_next_state <= 3'd0;
	triendpointinterface_resetinserter_next_state <= triendpointinterface_resetinserter_state;
	case (triendpointinterface_resetinserter_state)
		1'd1: begin
			if (usb_usb_core_tx_bitstuff_i_data) begin
				triendpointinterface_resetinserter_next_state <= 2'd2;
			end else begin
				triendpointinterface_resetinserter_next_state <= 1'd0;
			end
		end
		2'd2: begin
			if (usb_usb_core_tx_bitstuff_i_data) begin
				triendpointinterface_resetinserter_next_state <= 2'd3;
			end else begin
				triendpointinterface_resetinserter_next_state <= 1'd0;
			end
		end
		2'd3: begin
			if (usb_usb_core_tx_bitstuff_i_data) begin
				triendpointinterface_resetinserter_next_state <= 3'd4;
			end else begin
				triendpointinterface_resetinserter_next_state <= 1'd0;
			end
		end
		3'd4: begin
			if (usb_usb_core_tx_bitstuff_i_data) begin
				triendpointinterface_resetinserter_next_state <= 3'd5;
			end else begin
				triendpointinterface_resetinserter_next_state <= 1'd0;
			end
		end
		3'd5: begin
			if (usb_usb_core_tx_bitstuff_i_data) begin
				usb_usb_core_tx_bitstuff_o_will_stall <= 1'd1;
				triendpointinterface_resetinserter_next_state <= 3'd6;
			end else begin
				triendpointinterface_resetinserter_next_state <= 1'd0;
			end
		end
		3'd6: begin
			usb_usb_core_tx_bitstuff_stuff_bit <= 1'd1;
			triendpointinterface_resetinserter_next_state <= 1'd0;
		end
		default: begin
			if (usb_usb_core_tx_bitstuff_i_data) begin
				triendpointinterface_resetinserter_next_state <= 1'd1;
			end else begin
				triendpointinterface_resetinserter_next_state <= 1'd0;
			end
		end
	endcase
end
always @(*) begin
	triendpointinterface_txnrziencoder_next_state <= 3'd0;
	usb_usb_core_tx_nrzi_usbp <= 1'd0;
	usb_usb_core_tx_nrzi_usbn <= 1'd0;
	usb_usb_core_tx_nrzi_oe0 <= 1'd0;
	triendpointinterface_txnrziencoder_next_state <= triendpointinterface_txnrziencoder_state;
	case (triendpointinterface_txnrziencoder_state)
		1'd1: begin
			usb_usb_core_tx_nrzi_usbp <= 1'd1;
			usb_usb_core_tx_nrzi_usbn <= 1'd0;
			usb_usb_core_tx_nrzi_oe0 <= 1'd1;
			if (usb_usb_core_tx_nrzi_i_valid) begin
				if ((~usb_usb_core_tx_nrzi_i_oe)) begin
					triendpointinterface_txnrziencoder_next_state <= 2'd3;
				end else begin
					if (usb_usb_core_tx_nrzi_i_data) begin
						triendpointinterface_txnrziencoder_next_state <= 1'd1;
					end else begin
						triendpointinterface_txnrziencoder_next_state <= 2'd2;
					end
				end
			end
		end
		2'd2: begin
			usb_usb_core_tx_nrzi_usbp <= 1'd0;
			usb_usb_core_tx_nrzi_usbn <= 1'd1;
			usb_usb_core_tx_nrzi_oe0 <= 1'd1;
			if (usb_usb_core_tx_nrzi_i_valid) begin
				if ((~usb_usb_core_tx_nrzi_i_oe)) begin
					triendpointinterface_txnrziencoder_next_state <= 2'd3;
				end else begin
					if (usb_usb_core_tx_nrzi_i_data) begin
						triendpointinterface_txnrziencoder_next_state <= 2'd2;
					end else begin
						triendpointinterface_txnrziencoder_next_state <= 1'd1;
					end
				end
			end
		end
		2'd3: begin
			usb_usb_core_tx_nrzi_usbp <= 1'd0;
			usb_usb_core_tx_nrzi_usbn <= 1'd0;
			usb_usb_core_tx_nrzi_oe0 <= 1'd1;
			if (usb_usb_core_tx_nrzi_i_valid) begin
				triendpointinterface_txnrziencoder_next_state <= 3'd4;
			end
		end
		3'd4: begin
			usb_usb_core_tx_nrzi_usbp <= 1'd0;
			usb_usb_core_tx_nrzi_usbn <= 1'd0;
			usb_usb_core_tx_nrzi_oe0 <= 1'd1;
			if (usb_usb_core_tx_nrzi_i_valid) begin
				triendpointinterface_txnrziencoder_next_state <= 3'd5;
			end
		end
		3'd5: begin
			usb_usb_core_tx_nrzi_usbp <= 1'd1;
			usb_usb_core_tx_nrzi_usbn <= 1'd0;
			usb_usb_core_tx_nrzi_oe0 <= 1'd1;
			if (usb_usb_core_tx_nrzi_i_valid) begin
				triendpointinterface_txnrziencoder_next_state <= 1'd0;
			end
		end
		default: begin
			usb_usb_core_tx_nrzi_usbp <= 1'd1;
			usb_usb_core_tx_nrzi_usbn <= 1'd0;
			usb_usb_core_tx_nrzi_oe0 <= 1'd0;
			if (usb_usb_core_tx_nrzi_i_valid) begin
				if (usb_usb_core_tx_nrzi_i_oe) begin
					triendpointinterface_txnrziencoder_next_state <= 2'd2;
				end
			end
		end
	endcase
end
assign usb_usb_core_txstate_i_data_payload1 = usb_usb_core_txstate_i_data_payload0;
assign usb_usb_core_txstate_reset = usb_usb_core_txstate_is_ongoing0;
always @(*) begin
	usb_usb_core_txstate_i_data_strobe <= 1'd0;
	if (usb_usb_core_txstate_is_ongoing1) begin
		usb_usb_core_txstate_i_data_strobe <= usb_usb_core_tx_o_data_strobe;
	end
end
always @(*) begin
	usb_usb_core_txstate_is_ongoing0 <= 1'd0;
	usb_usb_core_txstate_is_ongoing1 <= 1'd0;
	usb_usb_core_txstate_pid_txpacketsend_next_value1 <= 4'd0;
	usb_usb_core_txstate_pid_txpacketsend_next_value_ce1 <= 1'd0;
	usb_usb_core_tx_i_data_payload <= 8'd0;
	usb_usb_core_txstate_o_pkt_end <= 1'd0;
	usb_usb_core_txstate_o_data_ack <= 1'd0;
	triendpointinterface_txpacketsend_next_state <= 4'd0;
	usb_usb_core_tx_i_oe_txpacketsend_next_value0 <= 1'd0;
	usb_usb_core_tx_i_oe_txpacketsend_next_value_ce0 <= 1'd0;
	triendpointinterface_txpacketsend_next_state <= triendpointinterface_txpacketsend_state;
	case (triendpointinterface_txpacketsend_state)
		1'd1: begin
			usb_usb_core_txstate_pid_txpacketsend_next_value1 <= usb_usb_core_txstate_i_pid;
			usb_usb_core_txstate_pid_txpacketsend_next_value_ce1 <= 1'd1;
			usb_usb_core_tx_i_data_payload <= 1'd1;
			if (usb_usb_core_tx_o_data_strobe) begin
				triendpointinterface_txpacketsend_next_state <= 2'd2;
			end
		end
		2'd2: begin
			usb_usb_core_tx_i_data_payload <= {(usb_usb_core_txstate_pid ^ 4'd15), usb_usb_core_txstate_pid};
			if (usb_usb_core_tx_o_data_strobe) begin
				if (((usb_usb_core_txstate_pid & 2'd3) == 2'd2)) begin
					triendpointinterface_txpacketsend_next_state <= 3'd7;
				end else begin
					if (((usb_usb_core_txstate_pid & 2'd3) == 2'd3)) begin
						triendpointinterface_txpacketsend_next_state <= 2'd3;
					end else begin
						triendpointinterface_txpacketsend_next_state <= 4'd8;
					end
				end
			end
			usb_usb_core_txstate_is_ongoing0 <= 1'd1;
		end
		2'd3: begin
			if ((~usb_usb_core_txstate_i_data_ready)) begin
				triendpointinterface_txpacketsend_next_state <= 3'd5;
			end else begin
				triendpointinterface_txpacketsend_next_state <= 3'd4;
			end
		end
		3'd4: begin
			usb_usb_core_tx_i_data_payload <= usb_usb_core_txstate_i_data_payload0;
			usb_usb_core_txstate_o_data_ack <= usb_usb_core_tx_o_data_strobe;
			if ((~usb_usb_core_txstate_i_data_ready)) begin
				triendpointinterface_txpacketsend_next_state <= 3'd5;
			end
			usb_usb_core_txstate_is_ongoing1 <= 1'd1;
		end
		3'd5: begin
			usb_usb_core_tx_i_data_payload <= usb_usb_core_txstate_o_crc[7:0];
			if (usb_usb_core_tx_o_data_strobe) begin
				triendpointinterface_txpacketsend_next_state <= 3'd6;
			end
		end
		3'd6: begin
			usb_usb_core_tx_i_data_payload <= usb_usb_core_txstate_o_crc[15:8];
			if (usb_usb_core_tx_o_data_strobe) begin
				triendpointinterface_txpacketsend_next_state <= 3'd7;
			end
		end
		3'd7: begin
			usb_usb_core_tx_i_oe_txpacketsend_next_value0 <= 1'd0;
			usb_usb_core_tx_i_oe_txpacketsend_next_value_ce0 <= 1'd1;
			if ((~usb_usb_core_txstate_o_oe12)) begin
				usb_usb_core_txstate_o_pkt_end <= 1'd1;
				triendpointinterface_txpacketsend_next_state <= 1'd0;
			end
		end
		default: begin
			usb_usb_core_tx_i_oe_txpacketsend_next_value0 <= usb_usb_core_txstate_i_pkt_start;
			usb_usb_core_tx_i_oe_txpacketsend_next_value_ce0 <= 1'd1;
			if (usb_usb_core_txstate_i_pkt_start) begin
				triendpointinterface_txpacketsend_next_state <= 1'd1;
			end else begin
				usb_usb_core_tx_i_oe_txpacketsend_next_value0 <= 1'd0;
				usb_usb_core_tx_i_oe_txpacketsend_next_value_ce0 <= 1'd1;
			end
		end
	endcase
end
assign usb_usb_core_txstate_crc_dat = {usb_usb_core_txstate_i_data_payload1[0], usb_usb_core_txstate_i_data_payload1[1], usb_usb_core_txstate_i_data_payload1[2], usb_usb_core_txstate_i_data_payload1[3], usb_usb_core_txstate_i_data_payload1[4], usb_usb_core_txstate_i_data_payload1[5], usb_usb_core_txstate_i_data_payload1[6], usb_usb_core_txstate_i_data_payload1[7]};
assign usb_usb_core_txstate_o_crc = ({usb_usb_core_txstate_crc_cur[0], usb_usb_core_txstate_crc_cur[1], usb_usb_core_txstate_crc_cur[2], usb_usb_core_txstate_crc_cur[3], usb_usb_core_txstate_crc_cur[4], usb_usb_core_txstate_crc_cur[5], usb_usb_core_txstate_crc_cur[6], usb_usb_core_txstate_crc_cur[7], usb_usb_core_txstate_crc_cur[8], usb_usb_core_txstate_crc_cur[9], usb_usb_core_txstate_crc_cur[10], usb_usb_core_txstate_crc_cur[11], usb_usb_core_txstate_crc_cur[12], usb_usb_core_txstate_crc_cur[13], usb_usb_core_txstate_crc_cur[14], usb_usb_core_txstate_crc_cur[15]} ^ 16'd65535);
always @(*) begin
	usb_usb_core_txstate_crc_next <= 16'd64770;
	usb_usb_core_txstate_crc_next[0] <= (((((((((((((((usb_usb_core_txstate_crc_dat[0] ^ usb_usb_core_txstate_crc_dat[1]) ^ usb_usb_core_txstate_crc_dat[2]) ^ usb_usb_core_txstate_crc_dat[3]) ^ usb_usb_core_txstate_crc_dat[4]) ^ usb_usb_core_txstate_crc_dat[5]) ^ usb_usb_core_txstate_crc_dat[6]) ^ usb_usb_core_txstate_crc_dat[7]) ^ usb_usb_core_txstate_crc_cur[8]) ^ usb_usb_core_txstate_crc_cur[9]) ^ usb_usb_core_txstate_crc_cur[10]) ^ usb_usb_core_txstate_crc_cur[11]) ^ usb_usb_core_txstate_crc_cur[12]) ^ usb_usb_core_txstate_crc_cur[13]) ^ usb_usb_core_txstate_crc_cur[14]) ^ usb_usb_core_txstate_crc_cur[15]);
	usb_usb_core_txstate_crc_next[1] <= (((((((((((((usb_usb_core_txstate_crc_dat[1] ^ usb_usb_core_txstate_crc_dat[2]) ^ usb_usb_core_txstate_crc_dat[3]) ^ usb_usb_core_txstate_crc_dat[4]) ^ usb_usb_core_txstate_crc_dat[5]) ^ usb_usb_core_txstate_crc_dat[6]) ^ usb_usb_core_txstate_crc_dat[7]) ^ usb_usb_core_txstate_crc_cur[9]) ^ usb_usb_core_txstate_crc_cur[10]) ^ usb_usb_core_txstate_crc_cur[11]) ^ usb_usb_core_txstate_crc_cur[12]) ^ usb_usb_core_txstate_crc_cur[13]) ^ usb_usb_core_txstate_crc_cur[14]) ^ usb_usb_core_txstate_crc_cur[15]);
	usb_usb_core_txstate_crc_next[2] <= (((usb_usb_core_txstate_crc_dat[0] ^ usb_usb_core_txstate_crc_dat[1]) ^ usb_usb_core_txstate_crc_cur[8]) ^ usb_usb_core_txstate_crc_cur[9]);
	usb_usb_core_txstate_crc_next[3] <= (((usb_usb_core_txstate_crc_dat[1] ^ usb_usb_core_txstate_crc_dat[2]) ^ usb_usb_core_txstate_crc_cur[9]) ^ usb_usb_core_txstate_crc_cur[10]);
	usb_usb_core_txstate_crc_next[4] <= (((usb_usb_core_txstate_crc_dat[2] ^ usb_usb_core_txstate_crc_dat[3]) ^ usb_usb_core_txstate_crc_cur[10]) ^ usb_usb_core_txstate_crc_cur[11]);
	usb_usb_core_txstate_crc_next[5] <= (((usb_usb_core_txstate_crc_dat[3] ^ usb_usb_core_txstate_crc_dat[4]) ^ usb_usb_core_txstate_crc_cur[11]) ^ usb_usb_core_txstate_crc_cur[12]);
	usb_usb_core_txstate_crc_next[6] <= (((usb_usb_core_txstate_crc_dat[4] ^ usb_usb_core_txstate_crc_dat[5]) ^ usb_usb_core_txstate_crc_cur[12]) ^ usb_usb_core_txstate_crc_cur[13]);
	usb_usb_core_txstate_crc_next[7] <= (((usb_usb_core_txstate_crc_dat[5] ^ usb_usb_core_txstate_crc_dat[6]) ^ usb_usb_core_txstate_crc_cur[13]) ^ usb_usb_core_txstate_crc_cur[14]);
	usb_usb_core_txstate_crc_next[8] <= ((((usb_usb_core_txstate_crc_dat[6] ^ usb_usb_core_txstate_crc_dat[7]) ^ usb_usb_core_txstate_crc_cur[0]) ^ usb_usb_core_txstate_crc_cur[14]) ^ usb_usb_core_txstate_crc_cur[15]);
	usb_usb_core_txstate_crc_next[9] <= ((usb_usb_core_txstate_crc_dat[7] ^ usb_usb_core_txstate_crc_cur[1]) ^ usb_usb_core_txstate_crc_cur[15]);
	usb_usb_core_txstate_crc_next[10] <= usb_usb_core_txstate_crc_cur[2];
	usb_usb_core_txstate_crc_next[11] <= usb_usb_core_txstate_crc_cur[3];
	usb_usb_core_txstate_crc_next[12] <= usb_usb_core_txstate_crc_cur[4];
	usb_usb_core_txstate_crc_next[13] <= usb_usb_core_txstate_crc_cur[5];
	usb_usb_core_txstate_crc_next[14] <= usb_usb_core_txstate_crc_cur[6];
	usb_usb_core_txstate_crc_next[15] <= ((((((((((((((((usb_usb_core_txstate_crc_dat[0] ^ usb_usb_core_txstate_crc_dat[1]) ^ usb_usb_core_txstate_crc_dat[2]) ^ usb_usb_core_txstate_crc_dat[3]) ^ usb_usb_core_txstate_crc_dat[4]) ^ usb_usb_core_txstate_crc_dat[5]) ^ usb_usb_core_txstate_crc_dat[6]) ^ usb_usb_core_txstate_crc_dat[7]) ^ usb_usb_core_txstate_crc_cur[7]) ^ usb_usb_core_txstate_crc_cur[8]) ^ usb_usb_core_txstate_crc_cur[9]) ^ usb_usb_core_txstate_crc_cur[10]) ^ usb_usb_core_txstate_crc_cur[11]) ^ usb_usb_core_txstate_crc_cur[12]) ^ usb_usb_core_txstate_crc_cur[13]) ^ usb_usb_core_txstate_crc_cur[14]) ^ usb_usb_core_txstate_crc_cur[15]);
end
assign usb_usb_core_rx_o_bit_strobe = usb_usb_core_rx_line_state_valid;
assign usb_usb_core_rx_o_reset = usb_usb_core_rx_reset_counter[6];
assign usb_usb_core_rx_nrzi_i_valid = usb_usb_core_rx_o_bit_strobe;
assign usb_usb_core_rx_nrzi_i_dj = usb_usb_core_rx_line_state_dj1;
assign usb_usb_core_rx_nrzi_i_dk = usb_usb_core_rx_line_state_dk1;
assign usb_usb_core_rx_nrzi_i_se0 = usb_usb_core_rx_line_state_se01;
assign usb_usb_core_rx_detect_reset = usb_usb_core_rx_reset0;
assign usb_usb_core_rx_detect_i_valid = usb_usb_core_rx_nrzi_o_valid;
assign usb_usb_core_rx_detect_i_se0 = usb_usb_core_rx_nrzi_o_se0;
assign usb_usb_core_rx_detect_i_data = usb_usb_core_rx_nrzi_o_data;
assign usb_usb_core_rx_reset1 = (~usb_usb_core_rx_detect_o_pkt_active);
assign usb_usb_core_rx_bitstuff_reset = ((~usb_usb_core_rx_detect_o_pkt_active) | usb_usb_core_rx_reset0);
assign usb_usb_core_rx_bitstuff_i_valid = usb_usb_core_rx_nrzi_o_valid;
assign usb_usb_core_rx_bitstuff_i_data = usb_usb_core_rx_nrzi_o_data;
assign usb_usb_core_rx_shifter_reset = usb_usb_core_rx_last_reset;
assign usb_usb_core_rx_shifter_i_data = usb_usb_core_rx_bitstuff_o_data;
assign usb_usb_core_rx_shifter_i_valid = ((~usb_usb_core_rx_bitstuff_o_stall) & usb_usb_core_rx_detect_o_pkt_active);
assign usb_usb_core_rx_payloadFifo_asyncfifo_din = {usb_usb_core_rx_shifter_o_data[0], usb_usb_core_rx_shifter_o_data[1], usb_usb_core_rx_shifter_o_data[2], usb_usb_core_rx_shifter_o_data[3], usb_usb_core_rx_shifter_o_data[4], usb_usb_core_rx_shifter_o_data[5], usb_usb_core_rx_shifter_o_data[6], usb_usb_core_rx_shifter_o_data[7]};
assign usb_usb_core_rx_payloadFifo_asyncfifo_we = usb_usb_core_rx_shifter_o_put;
assign usb_usb_core_rx_o_data_payload = usb_usb_core_rx_payloadFifo_asyncfifo_dout;
assign usb_usb_core_rx_o_data_strobe = usb_usb_core_rx_payloadFifo_asyncfifo_readable;
assign usb_usb_core_rx_payloadFifo_asyncfifo_re = 1'd1;
always @(*) begin
	usb_usb_core_rx_flagsFifo_asyncfifo_din <= 2'd0;
	usb_usb_core_rx_flagsFifo_asyncfifo_din[1] <= usb_usb_core_rx_detect_o_pkt_start;
	usb_usb_core_rx_flagsFifo_asyncfifo_din[0] <= usb_usb_core_rx_detect_o_pkt_end;
end
assign usb_usb_core_rx_flagsFifo_asyncfifo_we = (usb_usb_core_rx_detect_o_pkt_start | usb_usb_core_rx_detect_o_pkt_end);
assign usb_usb_core_rx_flag_start = usb_usb_core_rx_flagsFifo_asyncfifo_dout[1];
assign usb_usb_core_rx_flag_end = usb_usb_core_rx_flagsFifo_asyncfifo_dout[0];
assign usb_usb_core_rx_flag_valid = usb_usb_core_rx_flagsFifo_asyncfifo_readable;
assign usb_usb_core_rx_flagsFifo_asyncfifo_re = 1'd1;
assign usb_usb_core_rx_o_pkt_start = (usb_usb_core_rx_flag_start & usb_usb_core_rx_flag_valid);
assign usb_usb_core_rx_o_pkt_end = (usb_usb_core_rx_flag_end & usb_usb_core_rx_flag_valid);
assign usb_usb_core_rx_dpair = {usb_usb_core_rx_i_usbp, usb_usb_core_rx_i_usbn};
always @(*) begin
	usb_usb_core_rx_line_state_dj0 <= 1'd0;
	usb_usb_core_rx_line_state_dk0 <= 1'd0;
	usb_usb_core_rx_line_state_se00 <= 1'd0;
	usb_usb_core_rx_line_state_se10 <= 1'd0;
	triendpointinterface_rxpipeline_next_state <= 3'd0;
	usb_usb_core_rx_line_state_dt <= 1'd0;
	triendpointinterface_rxpipeline_next_state <= triendpointinterface_rxpipeline_state;
	case (triendpointinterface_rxpipeline_state)
		1'd1: begin
			usb_usb_core_rx_line_state_dj0 <= 1'd1;
			if ((usb_usb_core_rx_dpair != 2'd2)) begin
				triendpointinterface_rxpipeline_next_state <= 1'd0;
			end
		end
		2'd2: begin
			usb_usb_core_rx_line_state_dk0 <= 1'd1;
			if ((usb_usb_core_rx_dpair != 1'd1)) begin
				triendpointinterface_rxpipeline_next_state <= 1'd0;
			end
		end
		2'd3: begin
			usb_usb_core_rx_line_state_se00 <= 1'd1;
			if ((usb_usb_core_rx_dpair != 1'd0)) begin
				triendpointinterface_rxpipeline_next_state <= 1'd0;
			end
		end
		3'd4: begin
			usb_usb_core_rx_line_state_se10 <= 1'd1;
			if ((usb_usb_core_rx_dpair != 2'd3)) begin
				triendpointinterface_rxpipeline_next_state <= 1'd0;
			end
		end
		default: begin
			usb_usb_core_rx_line_state_dt <= 1'd1;
			case (usb_usb_core_rx_dpair)
				1'd0: begin
					triendpointinterface_rxpipeline_next_state <= 2'd3;
				end
				1'd1: begin
					triendpointinterface_rxpipeline_next_state <= 2'd2;
				end
				2'd2: begin
					triendpointinterface_rxpipeline_next_state <= 1'd1;
				end
				2'd3: begin
					triendpointinterface_rxpipeline_next_state <= 3'd4;
				end
			endcase
		end
	endcase
end
assign usb_usb_core_rx_detect_o_pkt_start = usb_usb_core_rx_detect_pkt_start;
assign usb_usb_core_rx_detect_o_pkt_active = usb_usb_core_rx_detect_pkt_active;
assign usb_usb_core_rx_detect_o_pkt_end = usb_usb_core_rx_detect_pkt_end;
always @(*) begin
	usb_usb_core_rx_detect_pkt_start <= 1'd0;
	triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 3'd0;
	usb_usb_core_rx_detect_pkt_active <= 1'd0;
	usb_usb_core_rx_detect_pkt_end <= 1'd0;
	triendpointinterface_rxpipeline_rxpacketdetect_next_state <= triendpointinterface_rxpipeline_rxpacketdetect_state;
	case (triendpointinterface_rxpipeline_rxpacketdetect_state)
		1'd1: begin
			if (usb_usb_core_rx_detect_i_valid) begin
				if ((usb_usb_core_rx_detect_i_data | usb_usb_core_rx_detect_i_se0)) begin
					triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				end else begin
					triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 2'd2;
				end
			end
		end
		2'd2: begin
			if (usb_usb_core_rx_detect_i_valid) begin
				if ((usb_usb_core_rx_detect_i_data | usb_usb_core_rx_detect_i_se0)) begin
					triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				end else begin
					triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			if (usb_usb_core_rx_detect_i_valid) begin
				if ((usb_usb_core_rx_detect_i_data | usb_usb_core_rx_detect_i_se0)) begin
					triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				end else begin
					triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 3'd4;
				end
			end
		end
		3'd4: begin
			if (usb_usb_core_rx_detect_i_valid) begin
				if ((usb_usb_core_rx_detect_i_data | usb_usb_core_rx_detect_i_se0)) begin
					triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				end else begin
					triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 3'd5;
				end
			end
		end
		3'd5: begin
			if (usb_usb_core_rx_detect_i_valid) begin
				if (usb_usb_core_rx_detect_i_se0) begin
					triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				end else begin
					if (usb_usb_core_rx_detect_i_data) begin
						usb_usb_core_rx_detect_pkt_start <= 1'd1;
						triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 3'd6;
					end
				end
			end
		end
		3'd6: begin
			usb_usb_core_rx_detect_pkt_active <= 1'd1;
			if ((usb_usb_core_rx_detect_i_valid & usb_usb_core_rx_detect_i_se0)) begin
				triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				usb_usb_core_rx_detect_pkt_active <= 1'd0;
				usb_usb_core_rx_detect_pkt_end <= 1'd1;
			end
		end
		default: begin
			if (usb_usb_core_rx_detect_i_valid) begin
				if ((usb_usb_core_rx_detect_i_data | usb_usb_core_rx_detect_i_se0)) begin
					triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				end else begin
					triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	usb_usb_core_rx_bitstuff_drop_bit <= 1'd0;
	triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 3'd0;
	triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= triendpointinterface_rxpipeline_rxbitstuffremover_state;
	case (triendpointinterface_rxpipeline_rxbitstuffremover_state)
		1'd1: begin
			if (usb_usb_core_rx_bitstuff_i_valid) begin
				if (usb_usb_core_rx_bitstuff_i_data) begin
					triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 2'd2;
				end else begin
					triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
				end
			end
		end
		2'd2: begin
			if (usb_usb_core_rx_bitstuff_i_valid) begin
				if (usb_usb_core_rx_bitstuff_i_data) begin
					triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 2'd3;
				end else begin
					triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			if (usb_usb_core_rx_bitstuff_i_valid) begin
				if (usb_usb_core_rx_bitstuff_i_data) begin
					triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 3'd4;
				end else begin
					triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
				end
			end
		end
		3'd4: begin
			if (usb_usb_core_rx_bitstuff_i_valid) begin
				if (usb_usb_core_rx_bitstuff_i_data) begin
					triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 3'd5;
				end else begin
					triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
				end
			end
		end
		3'd5: begin
			if (usb_usb_core_rx_bitstuff_i_valid) begin
				if (usb_usb_core_rx_bitstuff_i_data) begin
					triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 3'd6;
				end else begin
					triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
				end
			end
		end
		3'd6: begin
			if (usb_usb_core_rx_bitstuff_i_valid) begin
				usb_usb_core_rx_bitstuff_drop_bit <= 1'd1;
				triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
			end
		end
		default: begin
			if (usb_usb_core_rx_bitstuff_i_valid) begin
				if (usb_usb_core_rx_bitstuff_i_data) begin
					triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd1;
				end else begin
					triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
				end
			end
		end
	endcase
end
assign usb_usb_core_rx_shifter_o_data = usb_usb_core_rx_shifter_shift_reg[7:0];
assign usb_usb_core_rx_payloadFifo_graycounter0_ce = (usb_usb_core_rx_payloadFifo_asyncfifo_writable & usb_usb_core_rx_payloadFifo_asyncfifo_we);
assign usb_usb_core_rx_payloadFifo_graycounter1_ce = (usb_usb_core_rx_payloadFifo_asyncfifo_readable & usb_usb_core_rx_payloadFifo_asyncfifo_re);
assign usb_usb_core_rx_payloadFifo_asyncfifo_writable = ((usb_usb_core_rx_payloadFifo_graycounter0_q[1] == usb_usb_core_rx_payloadFifo_consume_wdomain[1]) | (usb_usb_core_rx_payloadFifo_graycounter0_q[0] == usb_usb_core_rx_payloadFifo_consume_wdomain[0]));
assign usb_usb_core_rx_payloadFifo_asyncfifo_readable = (usb_usb_core_rx_payloadFifo_graycounter1_q != usb_usb_core_rx_payloadFifo_produce_rdomain);
assign usb_usb_core_rx_payloadFifo_wrport_adr = usb_usb_core_rx_payloadFifo_graycounter0_q_binary[0];
assign usb_usb_core_rx_payloadFifo_wrport_dat_w = usb_usb_core_rx_payloadFifo_asyncfifo_din;
assign usb_usb_core_rx_payloadFifo_wrport_we = usb_usb_core_rx_payloadFifo_graycounter0_ce;
assign usb_usb_core_rx_payloadFifo_rdport_adr = usb_usb_core_rx_payloadFifo_graycounter1_q_next_binary[0];
assign usb_usb_core_rx_payloadFifo_asyncfifo_dout = usb_usb_core_rx_payloadFifo_rdport_dat_r;
always @(*) begin
	usb_usb_core_rx_payloadFifo_graycounter0_q_next_binary <= 2'd0;
	if (usb_usb_core_rx_payloadFifo_graycounter0_ce) begin
		usb_usb_core_rx_payloadFifo_graycounter0_q_next_binary <= (usb_usb_core_rx_payloadFifo_graycounter0_q_binary + 1'd1);
	end else begin
		usb_usb_core_rx_payloadFifo_graycounter0_q_next_binary <= usb_usb_core_rx_payloadFifo_graycounter0_q_binary;
	end
end
assign usb_usb_core_rx_payloadFifo_graycounter0_q_next = (usb_usb_core_rx_payloadFifo_graycounter0_q_next_binary ^ usb_usb_core_rx_payloadFifo_graycounter0_q_next_binary[1]);
always @(*) begin
	usb_usb_core_rx_payloadFifo_graycounter1_q_next_binary <= 2'd0;
	if (usb_usb_core_rx_payloadFifo_graycounter1_ce) begin
		usb_usb_core_rx_payloadFifo_graycounter1_q_next_binary <= (usb_usb_core_rx_payloadFifo_graycounter1_q_binary + 1'd1);
	end else begin
		usb_usb_core_rx_payloadFifo_graycounter1_q_next_binary <= usb_usb_core_rx_payloadFifo_graycounter1_q_binary;
	end
end
assign usb_usb_core_rx_payloadFifo_graycounter1_q_next = (usb_usb_core_rx_payloadFifo_graycounter1_q_next_binary ^ usb_usb_core_rx_payloadFifo_graycounter1_q_next_binary[1]);
assign usb_usb_core_rx_flagsFifo_graycounter0_ce = (usb_usb_core_rx_flagsFifo_asyncfifo_writable & usb_usb_core_rx_flagsFifo_asyncfifo_we);
assign usb_usb_core_rx_flagsFifo_graycounter1_ce = (usb_usb_core_rx_flagsFifo_asyncfifo_readable & usb_usb_core_rx_flagsFifo_asyncfifo_re);
assign usb_usb_core_rx_flagsFifo_asyncfifo_writable = ((usb_usb_core_rx_flagsFifo_graycounter0_q[1] == usb_usb_core_rx_flagsFifo_consume_wdomain[1]) | (usb_usb_core_rx_flagsFifo_graycounter0_q[0] == usb_usb_core_rx_flagsFifo_consume_wdomain[0]));
assign usb_usb_core_rx_flagsFifo_asyncfifo_readable = (usb_usb_core_rx_flagsFifo_graycounter1_q != usb_usb_core_rx_flagsFifo_produce_rdomain);
assign usb_usb_core_rx_flagsFifo_wrport_adr = usb_usb_core_rx_flagsFifo_graycounter0_q_binary[0];
assign usb_usb_core_rx_flagsFifo_wrport_dat_w = usb_usb_core_rx_flagsFifo_asyncfifo_din;
assign usb_usb_core_rx_flagsFifo_wrport_we = usb_usb_core_rx_flagsFifo_graycounter0_ce;
assign usb_usb_core_rx_flagsFifo_rdport_adr = usb_usb_core_rx_flagsFifo_graycounter1_q_next_binary[0];
assign usb_usb_core_rx_flagsFifo_asyncfifo_dout = usb_usb_core_rx_flagsFifo_rdport_dat_r;
always @(*) begin
	usb_usb_core_rx_flagsFifo_graycounter0_q_next_binary <= 2'd0;
	if (usb_usb_core_rx_flagsFifo_graycounter0_ce) begin
		usb_usb_core_rx_flagsFifo_graycounter0_q_next_binary <= (usb_usb_core_rx_flagsFifo_graycounter0_q_binary + 1'd1);
	end else begin
		usb_usb_core_rx_flagsFifo_graycounter0_q_next_binary <= usb_usb_core_rx_flagsFifo_graycounter0_q_binary;
	end
end
assign usb_usb_core_rx_flagsFifo_graycounter0_q_next = (usb_usb_core_rx_flagsFifo_graycounter0_q_next_binary ^ usb_usb_core_rx_flagsFifo_graycounter0_q_next_binary[1]);
always @(*) begin
	usb_usb_core_rx_flagsFifo_graycounter1_q_next_binary <= 2'd0;
	if (usb_usb_core_rx_flagsFifo_graycounter1_ce) begin
		usb_usb_core_rx_flagsFifo_graycounter1_q_next_binary <= (usb_usb_core_rx_flagsFifo_graycounter1_q_binary + 1'd1);
	end else begin
		usb_usb_core_rx_flagsFifo_graycounter1_q_next_binary <= usb_usb_core_rx_flagsFifo_graycounter1_q_binary;
	end
end
assign usb_usb_core_rx_flagsFifo_graycounter1_q_next = (usb_usb_core_rx_flagsFifo_graycounter1_q_next_binary ^ usb_usb_core_rx_flagsFifo_graycounter1_q_next_binary[1]);
always @(*) begin
	usb_usb_core_crc5_packetheaderdecode_next_value_ce3 <= 1'd0;
	triendpointinterface_packetheaderdecode_next_state <= 3'd0;
	usb_usb_core_o_pid_packetheaderdecode_next_value0 <= 4'd0;
	usb_usb_core_o_pid_packetheaderdecode_next_value_ce0 <= 1'd0;
	triendpointinterface_packetheaderdecode_next_value <= 7'd0;
	triendpointinterface_packetheaderdecode_next_value_ce <= 1'd0;
	usb_usb_core_endp4_packetheaderdecode_next_value1 <= 1'd0;
	usb_usb_core_endp4_packetheaderdecode_next_value_ce1 <= 1'd0;
	usb_usb_core_o_decoded <= 1'd0;
	usb_usb_core_o_endp_packetheaderdecode_next_value2 <= 4'd0;
	usb_usb_core_o_endp_packetheaderdecode_next_value_ce2 <= 1'd0;
	usb_usb_core_crc5_packetheaderdecode_next_value3 <= 5'd0;
	triendpointinterface_packetheaderdecode_next_state <= triendpointinterface_packetheaderdecode_state;
	case (triendpointinterface_packetheaderdecode_state)
		1'd1: begin
			if (usb_usb_core_rx_o_data_strobe) begin
				usb_usb_core_o_pid_packetheaderdecode_next_value0 <= usb_usb_core_rx_o_data_payload[3:0];
				usb_usb_core_o_pid_packetheaderdecode_next_value_ce0 <= 1'd1;
				case ((usb_usb_core_rx_o_data_payload[3:0] & 2'd3))
					1'd1: begin
						triendpointinterface_packetheaderdecode_next_state <= 2'd2;
					end
					2'd2: begin
						triendpointinterface_packetheaderdecode_next_state <= 3'd4;
					end
					2'd3: begin
						triendpointinterface_packetheaderdecode_next_state <= 3'd4;
					end
				endcase
			end
		end
		2'd2: begin
			if (usb_usb_core_rx_o_data_strobe) begin
				triendpointinterface_packetheaderdecode_next_value <= usb_usb_core_rx_o_data_payload[6:0];
				triendpointinterface_packetheaderdecode_next_value_ce <= 1'd1;
				usb_usb_core_endp4_packetheaderdecode_next_value1 <= usb_usb_core_rx_o_data_payload[7];
				usb_usb_core_endp4_packetheaderdecode_next_value_ce1 <= 1'd1;
				triendpointinterface_packetheaderdecode_next_state <= 2'd3;
			end
		end
		2'd3: begin
			if (usb_usb_core_rx_o_data_strobe) begin
				usb_usb_core_o_endp_packetheaderdecode_next_value2 <= {usb_usb_core_rx_o_data_payload[2:0], usb_usb_core_endp4};
				usb_usb_core_o_endp_packetheaderdecode_next_value_ce2 <= 1'd1;
				usb_usb_core_crc5_packetheaderdecode_next_value3 <= usb_usb_core_rx_o_data_payload[7:4];
				usb_usb_core_crc5_packetheaderdecode_next_value_ce3 <= 1'd1;
				triendpointinterface_packetheaderdecode_next_state <= 3'd4;
			end
		end
		3'd4: begin
			usb_usb_core_o_decoded <= 1'd1;
			triendpointinterface_packetheaderdecode_next_state <= 1'd0;
		end
		default: begin
			if (usb_usb_core_rx_o_pkt_start) begin
				triendpointinterface_packetheaderdecode_next_state <= 1'd1;
			end
		end
	endcase
end
assign usb_usb_core_is_el0 = ((~(triendpointinterface_clockdomainsrenamer_state == 3'd6)) & (triendpointinterface_clockdomainsrenamer_next_state == 3'd6));
assign usb_usb_core_is_el1 = ((~(triendpointinterface_clockdomainsrenamer_state == 4'd8)) & (triendpointinterface_clockdomainsrenamer_next_state == 4'd8));
always @(*) begin
	usb_usb_core_tok_f_next_value0 <= 4'd0;
	usb_usb_core_tok_f_next_value_ce0 <= 1'd0;
	usb_usb_core_endp_f_next_value1 <= 4'd0;
	usb_usb_core_endp_f_next_value_ce1 <= 1'd0;
	usb_usb_core_data_recv_put <= 1'd0;
	usb_usb_core_response_pid_t_next_value <= 4'd0;
	usb_usb_core_data_send_get <= 1'd0;
	usb_usb_core_response_pid_t_next_value_ce <= 1'd0;
	usb_usb_core_txstate_i_pkt_start <= 1'd0;
	usb_usb_core_txstate_i_pid <= 4'd0;
	usb_usb_core_idle <= 1'd0;
	usb_usb_core_start <= 1'd0;
	usb_usb_core_poll <= 1'd0;
	usb_usb_core_setup <= 1'd0;
	usb_usb_core_commit <= 1'd0;
	usb_usb_core_retry <= 1'd0;
	usb_usb_core_abort <= 1'd0;
	triendpointinterface_clockdomainsrenamer_next_state <= 4'd0;
	usb_usb_core_data_end <= 1'd0;
	usb_usb_core_error <= 1'd0;
	if (usb_usb_core_is_el0) begin
		if (usb_usb_core_dtb) begin
			usb_usb_core_txstate_i_pid <= 4'd11;
		end else begin
			usb_usb_core_txstate_i_pid <= 2'd3;
		end
		usb_usb_core_txstate_i_pkt_start <= 1'd1;
	end
	if (usb_usb_core_is_el1) begin
		usb_usb_core_txstate_i_pid <= usb_usb_core_response_pid;
		usb_usb_core_txstate_i_pkt_start <= 1'd1;
	end
	triendpointinterface_clockdomainsrenamer_next_state <= triendpointinterface_clockdomainsrenamer_state;
	case (triendpointinterface_clockdomainsrenamer_state)
		1'd0: begin
			usb_usb_core_error <= 1'd1;
		end
		2'd2: begin
			usb_usb_core_idle <= 1'd0;
			if (usb_usb_core_o_decoded) begin
				if ((usb_usb_core_o_addr != usb_usb_core_addr)) begin
					triendpointinterface_clockdomainsrenamer_next_state <= 1'd1;
				end else begin
					usb_usb_core_start <= 1'd1;
					usb_usb_core_tok_f_next_value0 <= usb_usb_core_o_pid;
					usb_usb_core_tok_f_next_value_ce0 <= 1'd1;
					usb_usb_core_endp_f_next_value1 <= usb_usb_core_o_endp;
					usb_usb_core_endp_f_next_value_ce1 <= 1'd1;
					triendpointinterface_clockdomainsrenamer_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			usb_usb_core_poll <= 1'd1;
			if (usb_usb_core_rdy) begin
				if ((usb_usb_core_tok == 4'd13)) begin
					usb_usb_core_response_pid_t_next_value <= 2'd2;
					usb_usb_core_response_pid_t_next_value_ce <= 1'd1;
				end else begin
					if (usb_usb_core_sta) begin
						usb_usb_core_response_pid_t_next_value <= 4'd14;
						usb_usb_core_response_pid_t_next_value_ce <= 1'd1;
					end else begin
						if (usb_usb_core_arm) begin
							usb_usb_core_response_pid_t_next_value <= 2'd2;
							usb_usb_core_response_pid_t_next_value_ce <= 1'd1;
						end else begin
							usb_usb_core_response_pid_t_next_value <= 4'd10;
							usb_usb_core_response_pid_t_next_value_ce <= 1'd1;
						end
					end
				end
				if ((usb_usb_core_o_pid == 3'd5)) begin
					triendpointinterface_clockdomainsrenamer_next_state <= 1'd1;
				end else begin
					if ((usb_usb_core_tok == 4'd13)) begin
						triendpointinterface_clockdomainsrenamer_next_state <= 3'd4;
					end else begin
						if ((usb_usb_core_tok == 1'd1)) begin
							triendpointinterface_clockdomainsrenamer_next_state <= 3'd4;
						end else begin
							if ((usb_usb_core_tok == 4'd9)) begin
								if (((~usb_usb_core_arm) | usb_usb_core_sta)) begin
									triendpointinterface_clockdomainsrenamer_next_state <= 4'd8;
								end else begin
									triendpointinterface_clockdomainsrenamer_next_state <= 3'd6;
								end
							end else begin
								triendpointinterface_clockdomainsrenamer_next_state <= 1'd1;
							end
						end
					end
				end
			end
		end
		3'd4: begin
			if (usb_usb_core_o_decoded) begin
				if (((usb_usb_core_o_pid & 2'd3) == 2'd3)) begin
					triendpointinterface_clockdomainsrenamer_next_state <= 3'd5;
				end else begin
					if ((usb_usb_core_o_pid == 3'd5)) begin
						triendpointinterface_clockdomainsrenamer_next_state <= 3'd4;
					end else begin
						triendpointinterface_clockdomainsrenamer_next_state <= 1'd0;
					end
				end
			end
		end
		3'd5: begin
			if ((usb_usb_core_response_pid == 2'd2)) begin
				usb_usb_core_data_recv_put <= usb_usb_core_rx_o_data_strobe;
			end
			if (usb_usb_core_rx_o_pkt_end) begin
				triendpointinterface_clockdomainsrenamer_next_state <= 4'd8;
			end
		end
		3'd6: begin
			if (usb_usb_core_dtb) begin
				usb_usb_core_txstate_i_pid <= 4'd11;
			end else begin
				usb_usb_core_txstate_i_pid <= 2'd3;
			end
			usb_usb_core_data_send_get <= usb_usb_core_txstate_o_data_ack;
			usb_usb_core_data_end <= usb_usb_core_txstate_o_pkt_end;
			if (usb_usb_core_txstate_o_pkt_end) begin
				triendpointinterface_clockdomainsrenamer_next_state <= 3'd7;
			end
		end
		3'd7: begin
			if (usb_usb_core_o_decoded) begin
				usb_usb_core_commit <= 1'd1;
				if ((usb_usb_core_o_pid == 2'd2)) begin
					triendpointinterface_clockdomainsrenamer_next_state <= 1'd1;
				end else begin
					if ((usb_usb_core_o_pid == 4'd9)) begin
						usb_usb_core_retry <= 1'd1;
						triendpointinterface_clockdomainsrenamer_next_state <= 3'd6;
					end else begin
						triendpointinterface_clockdomainsrenamer_next_state <= 1'd0;
					end
				end
			end
		end
		4'd8: begin
			usb_usb_core_txstate_i_pid <= usb_usb_core_response_pid;
			if (usb_usb_core_txstate_o_pkt_end) begin
				usb_usb_core_setup <= (usb_usb_core_tok == 4'd13);
				if ((usb_usb_core_response_pid == 2'd2)) begin
					usb_usb_core_commit <= 1'd1;
				end else begin
					usb_usb_core_abort <= 1'd1;
				end
				triendpointinterface_clockdomainsrenamer_next_state <= 1'd1;
			end
		end
		default: begin
			usb_usb_core_idle <= 1'd1;
			if (usb_usb_core_rx_o_pkt_start) begin
				triendpointinterface_clockdomainsrenamer_next_state <= 2'd2;
			end
		end
	endcase
end
assign usb_iobuf_usb_pullup = usb_pullup_storage;
assign usb_setuphandler_reset_trigger = (~usb_setuphandler_usb_reset);
assign usb_setuphandler_inner_reset = ((usb_setuphandler_reset | usb_setuphandler_begin) | usb_setuphandler_csrfield_reset);
always @(*) begin
	usb_setuphandler_packet_clear <= 1'd0;
	usb_setuphandler_packet_clear <= usb_setuphandler_begin;
	if ((usb_setuphandler_eventmanager_pending_re & usb_setuphandler_eventmanager_pending_r[0])) begin
		usb_setuphandler_packet_clear <= 1'd1;
	end
end
always @(*) begin
	usb_setuphandler_eventmanager_status_w <= 2'd0;
	usb_setuphandler_eventmanager_status_w[0] <= usb_setuphandler_packet_status;
	usb_setuphandler_eventmanager_status_w[1] <= usb_setuphandler_reset_status;
end
always @(*) begin
	usb_setuphandler_reset_clear <= 1'd0;
	if ((usb_setuphandler_eventmanager_pending_re & usb_setuphandler_eventmanager_pending_r[1])) begin
		usb_setuphandler_reset_clear <= 1'd1;
	end
end
always @(*) begin
	usb_setuphandler_eventmanager_pending_w <= 2'd0;
	usb_setuphandler_eventmanager_pending_w[0] <= usb_setuphandler_packet_pending;
	usb_setuphandler_eventmanager_pending_w[1] <= usb_setuphandler_reset_pending;
end
assign usb_setuphandler_irq = ((usb_setuphandler_eventmanager_pending_w[0] & usb_setuphandler_eventmanager_storage[0]) | (usb_setuphandler_eventmanager_pending_w[1] & usb_setuphandler_eventmanager_storage[1]));
assign usb_setuphandler_packet_status = 1'd0;
assign usb_setuphandler_reset_status = usb_setuphandler_reset_trigger;
assign usb_setuphandler_setuphandlerinner_empty = (~usb_setuphandler_setuphandlerinner_readable);
assign usb_setuphandler_csrfield_have = usb_setuphandler_setuphandlerinner_readable;
assign usb_setuphandler_csrfield_is_in = usb_setuphandler_setuphandlerinner_is_in;
assign usb_setuphandler_csrfield_epno = usb_setuphandler_epno;
assign usb_setuphandler_csrfield_pend = usb_setuphandler_packet_pending;
assign usb_setuphandler_csrfield_data1 = usb_setuphandler_setuphandlerinner_have_data_stage;
assign usb_setuphandler_csrfield_data0 = usb_setuphandler_setuphandlerinner_syncfifo_dout;
assign usb_setuphandler_setuphandlerinner_re = usb_setuphandler_data_we;
always @(*) begin
	usb_setuphandler_setuphandlerinner_syncfifo_din <= 8'd0;
	usb_setuphandler_setuphandlerinner_syncfifo_we <= 1'd0;
	if ((usb_usb_core_tok == 4'd13)) begin
		usb_setuphandler_setuphandlerinner_syncfifo_din <= usb_setuphandler_data_recv_payload;
		usb_setuphandler_setuphandlerinner_syncfifo_we <= usb_setuphandler_data_recv_put;
	end
end
assign usb_setuphandler_packet_trigger = (usb_setuphandler_setuphandlerinner_readable & usb_usb_core_setup);
assign usb_setuphandler_setuphandlerinner_syncfifo_re = (usb_setuphandler_setuphandlerinner_syncfifo_readable & ((~usb_setuphandler_setuphandlerinner_readable) | usb_setuphandler_setuphandlerinner_re));
assign usb_setuphandler_setuphandlerinner_level1 = (usb_setuphandler_setuphandlerinner_level0 + usb_setuphandler_setuphandlerinner_readable);
always @(*) begin
	usb_setuphandler_setuphandlerinner_wrport_adr <= 4'd0;
	if (usb_setuphandler_setuphandlerinner_replace) begin
		usb_setuphandler_setuphandlerinner_wrport_adr <= (usb_setuphandler_setuphandlerinner_produce - 1'd1);
	end else begin
		usb_setuphandler_setuphandlerinner_wrport_adr <= usb_setuphandler_setuphandlerinner_produce;
	end
end
assign usb_setuphandler_setuphandlerinner_wrport_dat_w = usb_setuphandler_setuphandlerinner_syncfifo_din;
assign usb_setuphandler_setuphandlerinner_wrport_we = (usb_setuphandler_setuphandlerinner_syncfifo_we & (usb_setuphandler_setuphandlerinner_syncfifo_writable | usb_setuphandler_setuphandlerinner_replace));
assign usb_setuphandler_setuphandlerinner_do_read = (usb_setuphandler_setuphandlerinner_syncfifo_readable & usb_setuphandler_setuphandlerinner_syncfifo_re);
assign usb_setuphandler_setuphandlerinner_rdport_adr = usb_setuphandler_setuphandlerinner_consume;
assign usb_setuphandler_setuphandlerinner_syncfifo_dout = usb_setuphandler_setuphandlerinner_rdport_dat_r;
assign usb_setuphandler_setuphandlerinner_rdport_re = usb_setuphandler_setuphandlerinner_do_read;
assign usb_setuphandler_setuphandlerinner_syncfifo_writable = (usb_setuphandler_setuphandlerinner_level0 != 4'd10);
assign usb_setuphandler_setuphandlerinner_syncfifo_readable = (usb_setuphandler_setuphandlerinner_level0 != 1'd0);
assign usb_inhandler_ep_stall_mask = (1'd1 <<< usb_inhandler_csrfield_epno);
assign usb_inhandler_stalled = (usb_inhandler_stall_status >>> usb_usb_core_endp);
assign usb_inhandler_data_buf_reset = (usb_inhandler_csrfield_reset | ((usb_usb_core_commit & usb_inhandler_transmitted) & usb_inhandler_queued));
assign usb_inhandler_response = ((usb_inhandler_queued & usb_inhandler_is_our_packet) & usb_inhandler_is_in_packet);
assign usb_inhandler_csrfield_have = usb_inhandler_syncfifobuffered_readable;
assign usb_inhandler_csrfield_idle = (~usb_inhandler_queued);
assign usb_inhandler_csrfield_pend = usb_inhandler_packet_pending;
assign usb_inhandler_packet_trigger = ((~usb_inhandler_queued) & usb_inhandler_was_queued);
assign usb_inhandler_dtb = (usb_inhandler_dtbs >>> usb_usb_core_endp);
assign usb_inhandler_data_out = usb_inhandler_syncfifobuffered_syncfifo_dout;
assign usb_inhandler_data_out_have = usb_inhandler_syncfifobuffered_readable;
assign usb_inhandler_syncfifobuffered_re = ((usb_inhandler_data_out_advance & usb_inhandler_is_in_packet) & usb_inhandler_is_our_packet);
assign usb_inhandler_syncfifobuffered_syncfifo_we = usb_inhandler_data_re;
assign usb_inhandler_syncfifobuffered_syncfifo_din = usb_inhandler_data_storage;
assign usb_inhandler_is_our_packet = (usb_inhandler_csrfield_epno == usb_usb_core_endp);
assign usb_inhandler_is_in_packet = (usb_usb_core_tok == 4'd9);
assign usb_inhandler_syncfifobuffered_syncfifo_re = (usb_inhandler_syncfifobuffered_syncfifo_readable & ((~usb_inhandler_syncfifobuffered_readable) | usb_inhandler_syncfifobuffered_re));
assign usb_inhandler_syncfifobuffered_level1 = (usb_inhandler_syncfifobuffered_level0 + usb_inhandler_syncfifobuffered_readable);
always @(*) begin
	usb_inhandler_syncfifobuffered_wrport_adr <= 6'd0;
	if (usb_inhandler_syncfifobuffered_replace) begin
		usb_inhandler_syncfifobuffered_wrport_adr <= (usb_inhandler_syncfifobuffered_produce - 1'd1);
	end else begin
		usb_inhandler_syncfifobuffered_wrport_adr <= usb_inhandler_syncfifobuffered_produce;
	end
end
assign usb_inhandler_syncfifobuffered_wrport_dat_w = usb_inhandler_syncfifobuffered_syncfifo_din;
assign usb_inhandler_syncfifobuffered_wrport_we = (usb_inhandler_syncfifobuffered_syncfifo_we & (usb_inhandler_syncfifobuffered_syncfifo_writable | usb_inhandler_syncfifobuffered_replace));
assign usb_inhandler_syncfifobuffered_do_read = (usb_inhandler_syncfifobuffered_syncfifo_readable & usb_inhandler_syncfifobuffered_syncfifo_re);
assign usb_inhandler_syncfifobuffered_rdport_adr = usb_inhandler_syncfifobuffered_consume;
assign usb_inhandler_syncfifobuffered_syncfifo_dout = usb_inhandler_syncfifobuffered_rdport_dat_r;
assign usb_inhandler_syncfifobuffered_rdport_re = usb_inhandler_syncfifobuffered_do_read;
assign usb_inhandler_syncfifobuffered_syncfifo_writable = (usb_inhandler_syncfifobuffered_level0 != 7'd64);
assign usb_inhandler_syncfifobuffered_syncfifo_readable = (usb_inhandler_syncfifobuffered_level0 != 1'd0);
assign usb_inhandler_eventmanager_status_w = usb_inhandler_packet_status;
always @(*) begin
	usb_inhandler_packet_clear <= 1'd0;
	if ((usb_inhandler_eventmanager_pending_re & usb_inhandler_eventmanager_pending_r)) begin
		usb_inhandler_packet_clear <= 1'd1;
	end
end
assign usb_inhandler_eventmanager_pending_w = usb_inhandler_packet_pending;
assign usb_inhandler_irq = (usb_inhandler_eventmanager_pending_w & usb_inhandler_eventmanager_storage);
assign usb_inhandler_packet_status = 1'd0;
always @(*) begin
	usb_outhandler_ep_mask <= 16'd1;
	if ((usb_usb_core_setup | usb_usb_core_commit)) begin
		usb_outhandler_ep_mask <= (1'd1 <<< usb_usb_core_endp);
	end else begin
		usb_outhandler_ep_mask <= (1'd1 <<< usb_outhandler_csrfield_epno0);
	end
end
assign usb_outhandler_stalled = (usb_outhandler_stall_status >>> usb_usb_core_endp);
assign usb_outhandler_enabled = (usb_outhandler_enable_status >>> usb_usb_core_endp);
assign usb_outhandler_is_out_packet = (usb_usb_core_tok == 1'd1);
assign usb_outhandler_response = ((usb_outhandler_enabled & usb_outhandler_is_out_packet) & (~usb_outhandler_packet_pending));
assign usb_outhandler_syncfifobuffered_syncfifo_din = usb_outhandler_data_recv_payload;
assign usb_outhandler_syncfifobuffered_syncfifo_we = (usb_outhandler_data_recv_put & usb_outhandler_responding);
assign usb_outhandler_data_buf_reset = usb_outhandler_csrfield_reset;
assign usb_outhandler_csrfield_data = usb_outhandler_syncfifobuffered_syncfifo_dout;
assign usb_outhandler_syncfifobuffered_re = usb_outhandler_data_we;
assign usb_outhandler_csrfield_epno1 = usb_outhandler_epno;
assign usb_outhandler_csrfield_have = usb_outhandler_syncfifobuffered_readable;
assign usb_outhandler_csrfield_pend = usb_outhandler_packet_pending;
assign usb_outhandler_packet_trigger = (usb_outhandler_responding & usb_usb_core_commit);
assign usb_outhandler_syncfifobuffered_syncfifo_re = (usb_outhandler_syncfifobuffered_syncfifo_readable & ((~usb_outhandler_syncfifobuffered_readable) | usb_outhandler_syncfifobuffered_re));
assign usb_outhandler_syncfifobuffered_level1 = (usb_outhandler_syncfifobuffered_level0 + usb_outhandler_syncfifobuffered_readable);
always @(*) begin
	usb_outhandler_syncfifobuffered_wrport_adr <= 7'd0;
	if (usb_outhandler_syncfifobuffered_replace) begin
		usb_outhandler_syncfifobuffered_wrport_adr <= (usb_outhandler_syncfifobuffered_produce - 1'd1);
	end else begin
		usb_outhandler_syncfifobuffered_wrport_adr <= usb_outhandler_syncfifobuffered_produce;
	end
end
assign usb_outhandler_syncfifobuffered_wrport_dat_w = usb_outhandler_syncfifobuffered_syncfifo_din;
assign usb_outhandler_syncfifobuffered_wrport_we = (usb_outhandler_syncfifobuffered_syncfifo_we & (usb_outhandler_syncfifobuffered_syncfifo_writable | usb_outhandler_syncfifobuffered_replace));
assign usb_outhandler_syncfifobuffered_do_read = (usb_outhandler_syncfifobuffered_syncfifo_readable & usb_outhandler_syncfifobuffered_syncfifo_re);
assign usb_outhandler_syncfifobuffered_rdport_adr = usb_outhandler_syncfifobuffered_consume;
assign usb_outhandler_syncfifobuffered_syncfifo_dout = usb_outhandler_syncfifobuffered_rdport_dat_r;
assign usb_outhandler_syncfifobuffered_rdport_re = usb_outhandler_syncfifobuffered_do_read;
assign usb_outhandler_syncfifobuffered_syncfifo_writable = (usb_outhandler_syncfifobuffered_level0 != 7'd66);
assign usb_outhandler_syncfifobuffered_syncfifo_readable = (usb_outhandler_syncfifobuffered_level0 != 1'd0);
assign usb_outhandler_eventmanager_status_w = usb_outhandler_packet_status;
always @(*) begin
	usb_outhandler_packet_clear <= 1'd0;
	if ((usb_outhandler_eventmanager_pending_re & usb_outhandler_eventmanager_pending_r)) begin
		usb_outhandler_packet_clear <= 1'd1;
	end
end
assign usb_outhandler_eventmanager_pending_w = usb_outhandler_packet_pending;
assign usb_outhandler_irq = (usb_outhandler_eventmanager_pending_w & usb_outhandler_eventmanager_storage);
assign usb_outhandler_packet_status = 1'd0;
assign usb_ev_irq = ((usb_setuphandler_irq | usb_inhandler_irq) | usb_outhandler_irq);
always @(*) begin
	usb_setuphandler_data_recv_payload <= 8'd0;
	usb_setuphandler_data_recv_put <= 1'd0;
	triendpointinterface_next_state <= 3'd0;
	usb_usb_core_addr_next_value <= 7'd0;
	usb_outhandler_data_recv_payload <= 8'd0;
	usb_usb_core_addr_next_value_ce <= 1'd0;
	usb_inhandler_data_out_advance <= 1'd0;
	usb_outhandler_data_recv_put <= 1'd0;
	usb_setuphandler_begin <= 1'd0;
	usb_usb_core_data_send_have <= 1'd0;
	usb_usb_core_data_send_payload <= 8'd0;
	usb_usb_core_arm <= 1'd0;
	usb_usb_core_sta <= 1'd0;
	usb_inhandler_dtb_reset <= 1'd0;
	triendpointinterface_next_state <= triendpointinterface_state;
	case (triendpointinterface_state)
		1'd1: begin
			if (usb_usb_core_idle) begin
				triendpointinterface_next_state <= 1'd0;
			end else begin
				if ((usb_usb_core_tok == 4'd13)) begin
					triendpointinterface_next_state <= 2'd3;
					usb_setuphandler_begin <= 1'd1;
					usb_inhandler_dtb_reset <= 1'd1;
					usb_usb_core_sta <= 1'd0;
					usb_usb_core_arm <= 1'd1;
				end else begin
					if ((usb_usb_core_tok == 4'd9)) begin
						triendpointinterface_next_state <= 3'd4;
						usb_usb_core_sta <= usb_inhandler_stalled;
						usb_usb_core_arm <= usb_inhandler_response;
					end else begin
						if ((usb_usb_core_tok == 1'd1)) begin
							triendpointinterface_next_state <= 3'd5;
							usb_usb_core_sta <= usb_outhandler_stalled;
							usb_usb_core_arm <= usb_outhandler_response;
						end else begin
							triendpointinterface_next_state <= 1'd0;
						end
					end
				end
			end
		end
		2'd2: begin
			triendpointinterface_next_state <= 1'd0;
		end
		2'd3: begin
			usb_setuphandler_data_recv_payload <= usb_usb_core_data_recv_payload;
			usb_setuphandler_data_recv_put <= usb_usb_core_data_recv_put;
			usb_usb_core_sta <= 1'd0;
			usb_usb_core_arm <= 1'd1;
			if (usb_debug_packet_detected) begin
				triendpointinterface_next_state <= 2'd2;
			end
			if (usb_usb_core_end) begin
				triendpointinterface_next_state <= 1'd0;
			end
		end
		3'd4: begin
			if ((usb_usb_core_tok == 4'd9)) begin
				usb_usb_core_data_send_have <= usb_inhandler_data_out_have;
				usb_usb_core_data_send_payload <= usb_inhandler_data_out;
				usb_inhandler_data_out_advance <= usb_usb_core_data_send_get;
				usb_usb_core_sta <= usb_inhandler_stalled;
				usb_usb_core_arm <= usb_inhandler_response;
				if (usb_usb_core_end) begin
					triendpointinterface_next_state <= 1'd0;
				end
			end
		end
		3'd5: begin
			if ((usb_usb_core_tok == 1'd1)) begin
				usb_outhandler_data_recv_payload <= usb_usb_core_data_recv_payload;
				usb_outhandler_data_recv_put <= usb_usb_core_data_recv_put;
				usb_usb_core_sta <= usb_outhandler_stalled;
				usb_usb_core_arm <= usb_outhandler_response;
				if (usb_usb_core_end) begin
					triendpointinterface_next_state <= 1'd0;
				end
			end
		end
		default: begin
			usb_usb_core_addr_next_value <= usb_csrstorage_storage;
			usb_usb_core_addr_next_value_ce <= 1'd1;
			if (usb_usb_core_start) begin
				triendpointinterface_next_state <= 1'd1;
			end
		end
	endcase
end
assign touch_touch1_o = touch_o_storage[0];
assign touch_touch2_o = touch_o_storage[1];
assign touch_touch3_o = touch_o_storage[2];
assign touch_touch4_o = touch_o_storage[3];
assign touch_touch1_oe = touch_oe_storage[0];
assign touch_touch2_oe = touch_oe_storage[1];
assign touch_touch3_oe = touch_oe_storage[2];
assign touch_touch4_oe = touch_oe_storage[3];
assign touch_status = {touch_touch4_i, touch_touch3_i, touch_touch2_i, touch_touch1_i};
assign do_reset = (((((ctrl_storage[2] & ctrl_storage[3]) & (~ctrl_storage[4])) & ctrl_storage[5]) & (~ctrl_storage[6])) & ctrl_storage[7]);
always @(*) begin
	sbled_rgba_pwm <= 3'd0;
	if (sbled_ctrl_storage[3]) begin
		sbled_rgba_pwm[1] <= sbled_raw_storage[0];
	end else begin
		sbled_rgba_pwm[1] <= sbled_ledd_value[0];
	end
	if (sbled_ctrl_storage[4]) begin
		sbled_rgba_pwm[0] <= sbled_raw_storage[1];
	end else begin
		sbled_rgba_pwm[0] <= sbled_ledd_value[1];
	end
	if (sbled_ctrl_storage[5]) begin
		sbled_rgba_pwm[2] <= sbled_raw_storage[2];
	end else begin
		sbled_rgba_pwm[2] <= sbled_ledd_value[2];
	end
end
assign shared_adr = array_muxed0;
assign shared_dat_w = array_muxed1;
assign shared_sel = array_muxed2;
assign shared_cyc = array_muxed3;
assign shared_stb = array_muxed4;
assign shared_we = array_muxed5;
assign shared_cti = array_muxed6;
assign shared_bte = array_muxed7;
assign basesoc_cpu_ibus_dat_r = shared_dat_r;
assign basesoc_cpu_dbus_dat_r = shared_dat_r;
assign basesoc_cpu_ibus_ack = (shared_ack & (grant == 1'd0));
assign basesoc_cpu_dbus_ack = (shared_ack & (grant == 1'd1));
assign basesoc_cpu_ibus_err = (shared_err & (grant == 1'd0));
assign basesoc_cpu_dbus_err = (shared_err & (grant == 1'd1));
assign request = {basesoc_cpu_dbus_cyc, basesoc_cpu_ibus_cyc};
always @(*) begin
	slave_sel <= 5'd0;
	slave_sel[0] <= (shared_adr[29:14] == 16'd57344);
	slave_sel[1] <= (shared_adr[29:14] == 13'd4096);
	slave_sel[2] <= (shared_adr[29:14] == 16'd49152);
	slave_sel[3] <= (shared_adr[29:11] == 1'd0);
	slave_sel[4] <= (shared_adr[29:19] == 9'd256);
end
assign basesoc_wishbone_adr = shared_adr;
assign basesoc_wishbone_dat_w = shared_dat_w;
assign basesoc_wishbone_sel = shared_sel;
assign basesoc_wishbone_stb = shared_stb;
assign basesoc_wishbone_we = shared_we;
assign basesoc_wishbone_cti = shared_cti;
assign basesoc_wishbone_bte = shared_bte;
assign spram_bus_adr = shared_adr;
assign spram_bus_dat_w = shared_dat_w;
assign spram_bus_sel = shared_sel;
assign spram_bus_stb = shared_stb;
assign spram_bus_we = shared_we;
assign spram_bus_cti = shared_cti;
assign spram_bus_bte = shared_bte;
assign a2mem_bus_adr = shared_adr;
assign a2mem_bus_dat_w = shared_dat_w;
assign a2mem_bus_sel = shared_sel;
assign a2mem_bus_stb = shared_stb;
assign a2mem_bus_we = shared_we;
assign a2mem_bus_cti = shared_cti;
assign a2mem_bus_bte = shared_bte;
assign rom_bus_adr = shared_adr;
assign rom_bus_dat_w = shared_dat_w;
assign rom_bus_sel = shared_sel;
assign rom_bus_stb = shared_stb;
assign rom_bus_we = shared_we;
assign rom_bus_cti = shared_cti;
assign rom_bus_bte = shared_bte;
assign lxspi_bus_adr = shared_adr;
assign lxspi_bus_dat_w = shared_dat_w;
assign lxspi_bus_sel = shared_sel;
assign lxspi_bus_stb = shared_stb;
assign lxspi_bus_we = shared_we;
assign lxspi_bus_cti = shared_cti;
assign lxspi_bus_bte = shared_bte;
assign basesoc_wishbone_cyc = (shared_cyc & slave_sel[0]);
assign spram_bus_cyc = (shared_cyc & slave_sel[1]);
assign a2mem_bus_cyc = (shared_cyc & slave_sel[2]);
assign rom_bus_cyc = (shared_cyc & slave_sel[3]);
assign lxspi_bus_cyc = (shared_cyc & slave_sel[4]);
assign shared_err = ((((basesoc_wishbone_err | spram_bus_err) | a2mem_bus_err) | rom_bus_err) | lxspi_bus_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	shared_ack <= 1'd0;
	error <= 1'd0;
	shared_dat_r <= 32'd0;
	shared_ack <= ((((basesoc_wishbone_ack | spram_bus_ack) | a2mem_bus_ack) | rom_bus_ack) | lxspi_bus_ack);
	shared_dat_r <= ((((({32{slave_sel_r[0]}} & basesoc_wishbone_dat_r) | ({32{slave_sel_r[1]}} & spram_bus_dat_r)) | ({32{slave_sel_r[2]}} & a2mem_bus_dat_r)) | ({32{slave_sel_r[3]}} & rom_bus_dat_r)) | ({32{slave_sel_r[4]}} & lxspi_bus_dat_r));
	if (done) begin
		shared_dat_r <= 32'd4294967295;
		shared_ack <= 1'd1;
		error <= 1'd1;
	end
end
assign done = (count == 1'd0);
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 5'd17);
assign csrbank0_control0_r = interface0_bank_bus_dat_w[11:0];
assign csrbank0_control0_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[2:0] == 1'd0));
assign csrbank0_control0_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[2:0] == 1'd0));
assign csrbank0_keyboard0_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_keyboard0_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[2:0] == 1'd1));
assign csrbank0_keyboard0_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[2:0] == 1'd1));
assign apple2_strobe_r = interface0_bank_bus_dat_w[0];
assign apple2_strobe_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[2:0] == 2'd2));
assign apple2_strobe_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[2:0] == 2'd2));
assign csrbank0_screen_r = interface0_bank_bus_dat_w[28:0];
assign csrbank0_screen_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[2:0] == 2'd3));
assign csrbank0_screen_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[2:0] == 2'd3));
assign csrbank0_diskctrl_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_diskctrl_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[2:0] == 3'd4));
assign csrbank0_diskctrl_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[2:0] == 3'd4));
assign csrbank0_diskdata0_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_diskdata0_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[2:0] == 3'd5));
assign csrbank0_diskdata0_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[2:0] == 3'd5));
assign apple2_Reset = apple2_control_storage[0];
assign apple2_Divisor = apple2_control_storage[11:8];
assign csrbank0_control0_w = apple2_control_storage[11:0];
assign csrbank0_keyboard0_w = apple2_keyboard_storage[7:0];
always @(*) begin
	apple2_screen_status <= 29'd0;
	apple2_screen_status[7:0] <= apple2_Character;
	apple2_screen_status[8] <= apple2_Valid;
	apple2_screen_status[9] <= apple2_More;
	apple2_screen_status[11] <= apple2_Repeat;
	apple2_screen_status[12] <= apple2_ScrollStart;
	apple2_screen_status[13] <= apple2_ScrollEnd;
	apple2_screen_status[21:16] <= apple2_Horizontal;
	apple2_screen_status[28:24] <= apple2_Vertical;
end
assign csrbank0_screen_w = apple2_screen_status[28:0];
always @(*) begin
	apple2_screen_we <= 1'd0;
	apple2_screen_we <= apple2_display_fifo_re;
	apple2_screen_we <= csrbank0_screen_we;
end
always @(*) begin
	apple2_diskctrl_status <= 8'd0;
	apple2_diskctrl_status[3:0] <= apple2_Phase;
	apple2_diskctrl_status[4] <= apple2_Motor;
	apple2_diskctrl_status[5] <= apple2_Drive;
	apple2_diskctrl_status[6] <= apple2_Wanted;
	apple2_diskctrl_status[7] <= apple2_Pending;
end
assign csrbank0_diskctrl_w = apple2_diskctrl_status[7:0];
assign apple2_diskctrl_we = csrbank0_diskctrl_we;
assign csrbank0_diskdata0_w = apple2_diskdata_storage[7:0];
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 1'd0);
assign csrbank1_reset0_r = interface1_bank_bus_dat_w[0];
assign csrbank1_reset0_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[1:0] == 1'd0));
assign csrbank1_reset0_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[1:0] == 1'd0));
assign csrbank1_scratch0_r = interface1_bank_bus_dat_w[31:0];
assign csrbank1_scratch0_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[1:0] == 1'd1));
assign csrbank1_scratch0_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[1:0] == 1'd1));
assign csrbank1_bus_errors_r = interface1_bank_bus_dat_w[31:0];
assign csrbank1_bus_errors_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[1:0] == 2'd2));
assign csrbank1_bus_errors_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[1:0] == 2'd2));
assign csrbank1_reset0_w = basesoc_soccontroller_reset_storage;
assign csrbank1_scratch0_w = basesoc_soccontroller_scratch_storage[31:0];
assign csrbank1_bus_errors_w = basesoc_soccontroller_bus_errors_status[31:0];
assign basesoc_soccontroller_bus_errors_we = csrbank1_bus_errors_we;
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 4'd15);
assign csrbank2_bitbang0_r = interface2_bank_bus_dat_w[3:0];
assign csrbank2_bitbang0_re = ((csrbank2_sel & interface2_bank_bus_we) & (interface2_bank_bus_adr[1:0] == 1'd0));
assign csrbank2_bitbang0_we = ((csrbank2_sel & (~interface2_bank_bus_we)) & (interface2_bank_bus_adr[1:0] == 1'd0));
assign csrbank2_miso_r = interface2_bank_bus_dat_w[0];
assign csrbank2_miso_re = ((csrbank2_sel & interface2_bank_bus_we) & (interface2_bank_bus_adr[1:0] == 1'd1));
assign csrbank2_miso_we = ((csrbank2_sel & (~interface2_bank_bus_we)) & (interface2_bank_bus_adr[1:0] == 1'd1));
assign csrbank2_bitbang_en0_r = interface2_bank_bus_dat_w[0];
assign csrbank2_bitbang_en0_re = ((csrbank2_sel & interface2_bank_bus_we) & (interface2_bank_bus_adr[1:0] == 2'd2));
assign csrbank2_bitbang_en0_we = ((csrbank2_sel & (~interface2_bank_bus_we)) & (interface2_bank_bus_adr[1:0] == 2'd2));
assign lxspi_mosi = lxspi_bitbang_storage[0];
assign lxspi_clk0 = lxspi_bitbang_storage[1];
assign lxspi_cs_n0 = lxspi_bitbang_storage[2];
assign lxspi_dir = lxspi_bitbang_storage[3];
assign csrbank2_bitbang0_w = lxspi_bitbang_storage[3:0];
assign csrbank2_miso_w = lxspi_status;
assign lxspi_we = csrbank2_miso_we;
assign csrbank2_bitbang_en0_w = lxspi_bitbang_en_storage;
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 4'd12);
assign csrbank3_ctrl0_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_ctrl0_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[0] == 1'd0));
assign csrbank3_ctrl0_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[0] == 1'd0));
assign csrbank3_addr0_r = interface3_bank_bus_dat_w[31:0];
assign csrbank3_addr0_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[0] == 1'd1));
assign csrbank3_addr0_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[0] == 1'd1));
assign image = ctrl_storage[1:0];
assign key = ctrl_storage[7:2];
assign csrbank3_ctrl0_w = ctrl_storage[7:0];
assign csrbank3_addr0_w = addr_storage[31:0];
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 4'd13);
assign csrbank4_dat0_r = interface4_bank_bus_dat_w[7:0];
assign csrbank4_dat0_re = ((csrbank4_sel & interface4_bank_bus_we) & (interface4_bank_bus_adr[1:0] == 1'd0));
assign csrbank4_dat0_we = ((csrbank4_sel & (~interface4_bank_bus_we)) & (interface4_bank_bus_adr[1:0] == 1'd0));
assign csrbank4_addr0_r = interface4_bank_bus_dat_w[3:0];
assign csrbank4_addr0_re = ((csrbank4_sel & interface4_bank_bus_we) & (interface4_bank_bus_adr[1:0] == 1'd1));
assign csrbank4_addr0_we = ((csrbank4_sel & (~interface4_bank_bus_we)) & (interface4_bank_bus_adr[1:0] == 1'd1));
assign csrbank4_ctrl0_r = interface4_bank_bus_dat_w[5:0];
assign csrbank4_ctrl0_re = ((csrbank4_sel & interface4_bank_bus_we) & (interface4_bank_bus_adr[1:0] == 2'd2));
assign csrbank4_ctrl0_we = ((csrbank4_sel & (~interface4_bank_bus_we)) & (interface4_bank_bus_adr[1:0] == 2'd2));
assign csrbank4_raw0_r = interface4_bank_bus_dat_w[2:0];
assign csrbank4_raw0_re = ((csrbank4_sel & interface4_bank_bus_we) & (interface4_bank_bus_adr[1:0] == 2'd3));
assign csrbank4_raw0_we = ((csrbank4_sel & (~interface4_bank_bus_we)) & (interface4_bank_bus_adr[1:0] == 2'd3));
assign csrbank4_dat0_w = sbled_dat_storage[7:0];
assign csrbank4_addr0_w = sbled_addr_storage[3:0];
assign sbled_exe = sbled_ctrl_storage[0];
assign sbled_curren = sbled_ctrl_storage[1];
assign sbled_rgbleden = sbled_ctrl_storage[2];
assign sbled_rraw = sbled_ctrl_storage[3];
assign sbled_graw = sbled_ctrl_storage[4];
assign sbled_braw = sbled_ctrl_storage[5];
assign csrbank4_ctrl0_w = sbled_ctrl_storage[5:0];
assign sbled_r = sbled_raw_storage[0];
assign sbled_g = sbled_raw_storage[1];
assign sbled_b = sbled_raw_storage[2];
assign csrbank4_raw0_w = sbled_raw_storage[2:0];
assign csrbank5_sel = (interface5_bank_bus_adr[13:9] == 3'd5);
assign csrbank5_load0_r = interface5_bank_bus_dat_w[31:0];
assign csrbank5_load0_re = ((csrbank5_sel & interface5_bank_bus_we) & (interface5_bank_bus_adr[2:0] == 1'd0));
assign csrbank5_load0_we = ((csrbank5_sel & (~interface5_bank_bus_we)) & (interface5_bank_bus_adr[2:0] == 1'd0));
assign csrbank5_reload0_r = interface5_bank_bus_dat_w[31:0];
assign csrbank5_reload0_re = ((csrbank5_sel & interface5_bank_bus_we) & (interface5_bank_bus_adr[2:0] == 1'd1));
assign csrbank5_reload0_we = ((csrbank5_sel & (~interface5_bank_bus_we)) & (interface5_bank_bus_adr[2:0] == 1'd1));
assign csrbank5_en0_r = interface5_bank_bus_dat_w[0];
assign csrbank5_en0_re = ((csrbank5_sel & interface5_bank_bus_we) & (interface5_bank_bus_adr[2:0] == 2'd2));
assign csrbank5_en0_we = ((csrbank5_sel & (~interface5_bank_bus_we)) & (interface5_bank_bus_adr[2:0] == 2'd2));
assign csrbank5_update_value0_r = interface5_bank_bus_dat_w[0];
assign csrbank5_update_value0_re = ((csrbank5_sel & interface5_bank_bus_we) & (interface5_bank_bus_adr[2:0] == 2'd3));
assign csrbank5_update_value0_we = ((csrbank5_sel & (~interface5_bank_bus_we)) & (interface5_bank_bus_adr[2:0] == 2'd3));
assign csrbank5_value_r = interface5_bank_bus_dat_w[31:0];
assign csrbank5_value_re = ((csrbank5_sel & interface5_bank_bus_we) & (interface5_bank_bus_adr[2:0] == 3'd4));
assign csrbank5_value_we = ((csrbank5_sel & (~interface5_bank_bus_we)) & (interface5_bank_bus_adr[2:0] == 3'd4));
assign basesoc_eventmanager_status_r = interface5_bank_bus_dat_w[0];
assign basesoc_eventmanager_status_re = ((csrbank5_sel & interface5_bank_bus_we) & (interface5_bank_bus_adr[2:0] == 3'd5));
assign basesoc_eventmanager_status_we = ((csrbank5_sel & (~interface5_bank_bus_we)) & (interface5_bank_bus_adr[2:0] == 3'd5));
assign basesoc_eventmanager_pending_r = interface5_bank_bus_dat_w[0];
assign basesoc_eventmanager_pending_re = ((csrbank5_sel & interface5_bank_bus_we) & (interface5_bank_bus_adr[2:0] == 3'd6));
assign basesoc_eventmanager_pending_we = ((csrbank5_sel & (~interface5_bank_bus_we)) & (interface5_bank_bus_adr[2:0] == 3'd6));
assign csrbank5_ev_enable0_r = interface5_bank_bus_dat_w[0];
assign csrbank5_ev_enable0_re = ((csrbank5_sel & interface5_bank_bus_we) & (interface5_bank_bus_adr[2:0] == 3'd7));
assign csrbank5_ev_enable0_we = ((csrbank5_sel & (~interface5_bank_bus_we)) & (interface5_bank_bus_adr[2:0] == 3'd7));
assign csrbank5_load0_w = basesoc_load_storage[31:0];
assign csrbank5_reload0_w = basesoc_reload_storage[31:0];
assign csrbank5_en0_w = basesoc_en_storage;
assign csrbank5_update_value0_w = basesoc_update_value_storage;
assign csrbank5_value_w = basesoc_value_status[31:0];
assign basesoc_value_we = csrbank5_value_we;
assign csrbank5_ev_enable0_w = basesoc_eventmanager_storage;
assign csrbank6_sel = (interface6_bank_bus_adr[13:9] == 4'd11);
assign csrbank6_o0_r = interface6_bank_bus_dat_w[3:0];
assign csrbank6_o0_re = ((csrbank6_sel & interface6_bank_bus_we) & (interface6_bank_bus_adr[1:0] == 1'd0));
assign csrbank6_o0_we = ((csrbank6_sel & (~interface6_bank_bus_we)) & (interface6_bank_bus_adr[1:0] == 1'd0));
assign csrbank6_oe0_r = interface6_bank_bus_dat_w[3:0];
assign csrbank6_oe0_re = ((csrbank6_sel & interface6_bank_bus_we) & (interface6_bank_bus_adr[1:0] == 1'd1));
assign csrbank6_oe0_we = ((csrbank6_sel & (~interface6_bank_bus_we)) & (interface6_bank_bus_adr[1:0] == 1'd1));
assign csrbank6_i_r = interface6_bank_bus_dat_w[3:0];
assign csrbank6_i_re = ((csrbank6_sel & interface6_bank_bus_we) & (interface6_bank_bus_adr[1:0] == 2'd2));
assign csrbank6_i_we = ((csrbank6_sel & (~interface6_bank_bus_we)) & (interface6_bank_bus_adr[1:0] == 2'd2));
assign csrbank6_o0_w = touch_o_storage[3:0];
assign csrbank6_oe0_w = touch_oe_storage[3:0];
assign csrbank6_i_w = touch_status[3:0];
assign touch_we = csrbank6_i_we;
assign csrbank7_sel = (interface7_bank_bus_adr[13:9] == 4'd9);
assign csrbank7_pullup_out0_r = interface7_bank_bus_dat_w[0];
assign csrbank7_pullup_out0_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 1'd0));
assign csrbank7_pullup_out0_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 1'd0));
assign csrbank7_address0_r = interface7_bank_bus_dat_w[6:0];
assign csrbank7_address0_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 1'd1));
assign csrbank7_address0_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 1'd1));
assign csrbank7_next_ev_r = interface7_bank_bus_dat_w[3:0];
assign csrbank7_next_ev_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 2'd2));
assign csrbank7_next_ev_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 2'd2));
assign csrbank7_setup_data_r = interface7_bank_bus_dat_w[7:0];
assign csrbank7_setup_data_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 2'd3));
assign csrbank7_setup_data_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 2'd3));
assign csrbank7_setup_ctrl0_r = interface7_bank_bus_dat_w[5:0];
assign csrbank7_setup_ctrl0_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 3'd4));
assign csrbank7_setup_ctrl0_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 3'd4));
assign csrbank7_setup_status_r = interface7_bank_bus_dat_w[7:0];
assign csrbank7_setup_status_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 3'd5));
assign csrbank7_setup_status_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 3'd5));
assign usb_setuphandler_eventmanager_status_r = interface7_bank_bus_dat_w[1:0];
assign usb_setuphandler_eventmanager_status_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 3'd6));
assign usb_setuphandler_eventmanager_status_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 3'd6));
assign usb_setuphandler_eventmanager_pending_r = interface7_bank_bus_dat_w[1:0];
assign usb_setuphandler_eventmanager_pending_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 3'd7));
assign usb_setuphandler_eventmanager_pending_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 3'd7));
assign csrbank7_setup_ev_enable0_r = interface7_bank_bus_dat_w[1:0];
assign csrbank7_setup_ev_enable0_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 4'd8));
assign csrbank7_setup_ev_enable0_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 4'd8));
assign csrbank7_in_data0_r = interface7_bank_bus_dat_w[7:0];
assign csrbank7_in_data0_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 4'd9));
assign csrbank7_in_data0_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 4'd9));
assign csrbank7_in_ctrl0_r = interface7_bank_bus_dat_w[6:0];
assign csrbank7_in_ctrl0_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 4'd10));
assign csrbank7_in_ctrl0_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 4'd10));
assign csrbank7_in_status_r = interface7_bank_bus_dat_w[5:0];
assign csrbank7_in_status_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 4'd11));
assign csrbank7_in_status_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 4'd11));
assign usb_inhandler_eventmanager_status_r = interface7_bank_bus_dat_w[0];
assign usb_inhandler_eventmanager_status_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 4'd12));
assign usb_inhandler_eventmanager_status_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 4'd12));
assign usb_inhandler_eventmanager_pending_r = interface7_bank_bus_dat_w[0];
assign usb_inhandler_eventmanager_pending_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 4'd13));
assign usb_inhandler_eventmanager_pending_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 4'd13));
assign csrbank7_in_ev_enable0_r = interface7_bank_bus_dat_w[0];
assign csrbank7_in_ev_enable0_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 4'd14));
assign csrbank7_in_ev_enable0_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 4'd14));
assign csrbank7_out_data_r = interface7_bank_bus_dat_w[7:0];
assign csrbank7_out_data_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 4'd15));
assign csrbank7_out_data_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 4'd15));
assign csrbank7_out_ctrl0_r = interface7_bank_bus_dat_w[6:0];
assign csrbank7_out_ctrl0_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 5'd16));
assign csrbank7_out_ctrl0_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 5'd16));
assign csrbank7_out_status_r = interface7_bank_bus_dat_w[5:0];
assign csrbank7_out_status_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 5'd17));
assign csrbank7_out_status_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 5'd17));
assign usb_outhandler_eventmanager_status_r = interface7_bank_bus_dat_w[0];
assign usb_outhandler_eventmanager_status_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 5'd18));
assign usb_outhandler_eventmanager_status_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 5'd18));
assign usb_outhandler_eventmanager_pending_r = interface7_bank_bus_dat_w[0];
assign usb_outhandler_eventmanager_pending_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 5'd19));
assign usb_outhandler_eventmanager_pending_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 5'd19));
assign csrbank7_out_ev_enable0_r = interface7_bank_bus_dat_w[0];
assign csrbank7_out_ev_enable0_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[4:0] == 5'd20));
assign csrbank7_out_ev_enable0_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[4:0] == 5'd20));
assign csrbank7_pullup_out0_w = usb_pullup_storage;
assign usb_csrfield_addr = usb_csrstorage_storage[6:0];
assign csrbank7_address0_w = usb_csrstorage_storage[6:0];
always @(*) begin
	usb_status <= 4'd0;
	usb_status[0] <= usb_csrfield_in;
	usb_status[1] <= usb_csrfield_out;
	usb_status[2] <= usb_csrfield_setup;
	usb_status[3] <= usb_csrfield_reset;
end
assign csrbank7_next_ev_w = usb_status[3:0];
assign usb_we = csrbank7_next_ev_we;
assign usb_setuphandler_data_status[7:0] = usb_setuphandler_csrfield_data0;
assign csrbank7_setup_data_w = usb_setuphandler_data_status[7:0];
assign usb_setuphandler_data_we = csrbank7_setup_data_we;
always @(*) begin
	usb_setuphandler_csrfield_reset <= 1'd0;
	if (usb_setuphandler_ctrl_re) begin
		usb_setuphandler_csrfield_reset <= usb_setuphandler_ctrl_storage[5];
	end
end
assign csrbank7_setup_ctrl0_w = usb_setuphandler_ctrl_storage[5:0];
always @(*) begin
	usb_setuphandler_status_status <= 8'd0;
	usb_setuphandler_status_status[3:0] <= usb_setuphandler_csrfield_epno;
	usb_setuphandler_status_status[4] <= usb_setuphandler_csrfield_have;
	usb_setuphandler_status_status[5] <= usb_setuphandler_csrfield_pend;
	usb_setuphandler_status_status[6] <= usb_setuphandler_csrfield_is_in;
	usb_setuphandler_status_status[7] <= usb_setuphandler_csrfield_data1;
end
assign csrbank7_setup_status_w = usb_setuphandler_status_status[7:0];
assign usb_setuphandler_status_we = csrbank7_setup_status_we;
assign csrbank7_setup_ev_enable0_w = usb_setuphandler_eventmanager_storage[1:0];
assign usb_inhandler_csrfield_data = usb_inhandler_data_storage[7:0];
assign csrbank7_in_data0_w = usb_inhandler_data_storage[7:0];
assign usb_inhandler_csrfield_epno = usb_inhandler_ctrl_storage[3:0];
always @(*) begin
	usb_inhandler_csrfield_reset <= 1'd0;
	if (usb_inhandler_ctrl_re) begin
		usb_inhandler_csrfield_reset <= usb_inhandler_ctrl_storage[5];
	end
end
always @(*) begin
	usb_inhandler_csrfield_stall <= 1'd0;
	if (usb_inhandler_ctrl_re) begin
		usb_inhandler_csrfield_stall <= usb_inhandler_ctrl_storage[6];
	end
end
assign csrbank7_in_ctrl0_w = usb_inhandler_ctrl_storage[6:0];
always @(*) begin
	usb_inhandler_status_status <= 6'd0;
	usb_inhandler_status_status[0] <= usb_inhandler_csrfield_idle;
	usb_inhandler_status_status[4] <= usb_inhandler_csrfield_have;
	usb_inhandler_status_status[5] <= usb_inhandler_csrfield_pend;
end
assign csrbank7_in_status_w = usb_inhandler_status_status[5:0];
assign usb_inhandler_status_we = csrbank7_in_status_we;
assign csrbank7_in_ev_enable0_w = usb_inhandler_eventmanager_storage;
assign usb_outhandler_data_status[7:0] = usb_outhandler_csrfield_data;
assign csrbank7_out_data_w = usb_outhandler_data_status[7:0];
assign usb_outhandler_data_we = csrbank7_out_data_we;
assign usb_outhandler_csrfield_epno0 = usb_outhandler_ctrl_storage[3:0];
assign usb_outhandler_csrfield_enable = usb_outhandler_ctrl_storage[4];
always @(*) begin
	usb_outhandler_csrfield_reset <= 1'd0;
	if (usb_outhandler_ctrl_re) begin
		usb_outhandler_csrfield_reset <= usb_outhandler_ctrl_storage[5];
	end
end
assign usb_outhandler_csrfield_stall = usb_outhandler_ctrl_storage[6];
assign csrbank7_out_ctrl0_w = usb_outhandler_ctrl_storage[6:0];
always @(*) begin
	usb_outhandler_status_status <= 6'd0;
	usb_outhandler_status_status[3:0] <= usb_outhandler_csrfield_epno1;
	usb_outhandler_status_status[4] <= usb_outhandler_csrfield_have;
	usb_outhandler_status_status[5] <= usb_outhandler_csrfield_pend;
end
assign csrbank7_out_status_w = usb_outhandler_status_status[5:0];
assign usb_outhandler_status_we = csrbank7_out_status_we;
assign csrbank7_out_ev_enable0_w = usb_outhandler_eventmanager_storage;
assign adr = basesoc_adr;
assign we = basesoc_we;
assign dat_w = basesoc_dat_w;
assign basesoc_dat_r = dat_r;
assign interface0_bank_bus_adr = adr;
assign interface1_bank_bus_adr = adr;
assign interface2_bank_bus_adr = adr;
assign interface3_bank_bus_adr = adr;
assign interface4_bank_bus_adr = adr;
assign interface5_bank_bus_adr = adr;
assign interface6_bank_bus_adr = adr;
assign interface7_bank_bus_adr = adr;
assign interface0_bank_bus_we = we;
assign interface1_bank_bus_we = we;
assign interface2_bank_bus_we = we;
assign interface3_bank_bus_we = we;
assign interface4_bank_bus_we = we;
assign interface5_bank_bus_we = we;
assign interface6_bank_bus_we = we;
assign interface7_bank_bus_we = we;
assign interface0_bank_bus_dat_w = dat_w;
assign interface1_bank_bus_dat_w = dat_w;
assign interface2_bank_bus_dat_w = dat_w;
assign interface3_bank_bus_dat_w = dat_w;
assign interface4_bank_bus_dat_w = dat_w;
assign interface5_bank_bus_dat_w = dat_w;
assign interface6_bank_bus_dat_w = dat_w;
assign interface7_bank_bus_dat_w = dat_w;
assign dat_r = (((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface5_bank_bus_dat_r) | interface6_bank_bus_dat_r) | interface7_bank_bus_dat_r);
assign slice_proxy = 9'd1;
always @(*) begin
	array_muxed0 <= 30'd0;
	case (grant)
		1'd0: begin
			array_muxed0 <= basesoc_cpu_ibus_adr;
		end
		default: begin
			array_muxed0 <= basesoc_cpu_dbus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 32'd0;
	case (grant)
		1'd0: begin
			array_muxed1 <= basesoc_cpu_ibus_dat_w;
		end
		default: begin
			array_muxed1 <= basesoc_cpu_dbus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 4'd0;
	case (grant)
		1'd0: begin
			array_muxed2 <= basesoc_cpu_ibus_sel;
		end
		default: begin
			array_muxed2 <= basesoc_cpu_dbus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed3 <= basesoc_cpu_ibus_cyc;
		end
		default: begin
			array_muxed3 <= basesoc_cpu_dbus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed4 <= basesoc_cpu_ibus_stb;
		end
		default: begin
			array_muxed4 <= basesoc_cpu_dbus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed5 <= basesoc_cpu_ibus_we;
		end
		default: begin
			array_muxed5 <= basesoc_cpu_dbus_we;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 3'd0;
	case (grant)
		1'd0: begin
			array_muxed6 <= basesoc_cpu_ibus_cti;
		end
		default: begin
			array_muxed6 <= basesoc_cpu_dbus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 2'd0;
	case (grant)
		1'd0: begin
			array_muxed7 <= basesoc_cpu_ibus_bte;
		end
		default: begin
			array_muxed7 <= basesoc_cpu_dbus_bte;
		end
	endcase
end
assign usb_iobuf_usb_p_t_i1 = multiregimpl0_regs1;
assign usb_iobuf_usb_n_t_i1 = multiregimpl1_regs1;
assign usb_usb_core_tx_nrzi_dat = multiregimpl2_regs2;
assign usb_usb_core_tx_nrzi_oe1 = multiregimpl3_regs2;
assign usb_usb_core_txstate_o_oe12 = multiregimpl4_regs;
assign usb_usb_core_rx_payloadFifo_produce_rdomain = multiregimpl5_regs1;
assign usb_usb_core_rx_payloadFifo_consume_wdomain = multiregimpl6_regs1;
assign usb_usb_core_rx_flagsFifo_produce_rdomain = multiregimpl7_regs1;
assign usb_usb_core_rx_flagsFifo_consume_wdomain = multiregimpl8_regs1;

always @(posedge por_clk) begin
	if ((reset_delay != 1'd0)) begin
		reset_delay <= (reset_delay - 1'd1);
	end
	if (por_rst) begin
		reset_delay <= 12'd4095;
	end
end

always @(posedge sys_clk) begin
	if ((basesoc_soccontroller_bus_errors != 32'd4294967295)) begin
		if (basesoc_soccontroller_bus_error) begin
			basesoc_soccontroller_bus_errors <= (basesoc_soccontroller_bus_errors + 1'd1);
		end
	end
	if (basesoc_en_storage) begin
		if ((basesoc_value == 1'd0)) begin
			basesoc_value <= basesoc_reload_storage;
		end else begin
			basesoc_value <= (basesoc_value - 1'd1);
		end
	end else begin
		basesoc_value <= basesoc_load_storage;
	end
	if (basesoc_update_value_re) begin
		basesoc_value_status <= basesoc_value;
	end
	if (basesoc_zero_clear) begin
		basesoc_zero_pending <= 1'd0;
	end
	basesoc_zero_old_trigger <= basesoc_zero_trigger;
	if (((~basesoc_zero_trigger) & basesoc_zero_old_trigger)) begin
		basesoc_zero_pending <= 1'd1;
	end
	wb2csr_state <= wb2csr_next_state;
	spram_bus_ack <= ((spram_bus_stb & spram_bus_cyc) & (~spram_bus_ack));
	a2mem_read_shift <= a2mem_shift;
	a2mem_hold_en6502 <= a2mem_access6502;
	if (a2mem_hold_en6502) begin
		a2mem_hold6502 <= a2mem_transparent6502;
	end
	if (a2mem_access6502) begin
		a2mem_bus_ack <= 1'd0;
	end else begin
		a2mem_accesswb <= ((a2mem_bus_stb & a2mem_bus_cyc) & (~a2mem_accesswb));
		a2mem_bus_ack <= ((a2mem_accesswb & a2mem_bus_stb) & a2mem_bus_cyc);
	end
	if ((apple2_Divisor == apple2_idlecount)) begin
		apple2_idlecount <= 1'd0;
		apple2_clk_en <= 1'd1;
	end else begin
		apple2_idlecount <= (apple2_idlecount + 1'd1);
		apple2_clk_en <= 1'd0;
	end
	if (apple2_active) begin
		apple2_r_memsel <= apple2_w_memsel;
		apple2_ior_addr <= apple2_addr[7:0];
	end
	if (apple2_keyboard_re) begin
		apple2_available <= 1'd1;
	end
	if (apple2_iosel) begin
		if ((apple2_addr[7:4] == 1'd1)) begin
			apple2_available <= 1'd0;
		end
	end
	if (apple2_diskdata_re) begin
		apple2_disk_data_available <= 1'd1;
	end
	if ((apple2_active & apple2_disk_read)) begin
		apple2_disk_reading <= 1'd0;
		if (apple2_disk_data_available) begin
			apple2_disk_data_wanted <= 1'd0;
		end else begin
			apple2_disk_data_wanted <= 1'd1;
		end
		apple2_disk_data_available <= 1'd0;
	end
	if (apple2_iosel) begin
		if ((apple2_addr[7:4] == 4'd14)) begin
			if ((apple2_addr[3:0] == 1'd0)) begin
				apple2_disk_phase[0] <= 1'd0;
			end
			if ((apple2_addr[3:0] == 1'd1)) begin
				apple2_disk_phase[0] <= 1'd1;
			end
			if ((apple2_addr[3:0] == 2'd2)) begin
				apple2_disk_phase[1] <= 1'd0;
			end
			if ((apple2_addr[3:0] == 2'd3)) begin
				apple2_disk_phase[1] <= 1'd1;
			end
			if ((apple2_addr[3:0] == 3'd4)) begin
				apple2_disk_phase[2] <= 1'd0;
			end
			if ((apple2_addr[3:0] == 3'd5)) begin
				apple2_disk_phase[2] <= 1'd1;
			end
			if ((apple2_addr[3:0] == 3'd6)) begin
				apple2_disk_phase[3] <= 1'd0;
			end
			if ((apple2_addr[3:0] == 3'd7)) begin
				apple2_disk_phase[3] <= 1'd1;
			end
			if ((apple2_addr[3:0] == 4'd8)) begin
				apple2_disk_motor <= 1'd0;
			end
			if ((apple2_addr[3:0] == 4'd9)) begin
				apple2_disk_motor <= 1'd1;
			end
			if ((apple2_addr[3:0] == 4'd10)) begin
				apple2_disk_drive <= 1'd0;
			end
			if ((apple2_addr[3:0] == 4'd11)) begin
				apple2_disk_drive <= 1'd1;
			end
			if ((apple2_addr[3:0] == 4'd12)) begin
				apple2_disk_reading <= 1'd1;
			end
		end
	end
	apple2_fifo_out <= apple2_display_fifo_syncfifo_dout;
	if (apple2_scroll_start) begin
		apple2_scroll_active <= 1'd1;
	end
	if (apple2_scroll_end) begin
		apple2_push_save <= 1'd1;
		apple2_scroll_active <= 1'd0;
		apple2_prev_start <= apple2_scroll_start;
	end
	if (apple2_fb_r) begin
		if (((apple2_scroll_read & (apple2_scroll_sequential | (~apple2_scroll_active))) | (apple2_repeat_active & apple2_repeat_sequential))) begin
		end else begin
			apple2_scroll_read <= 1'd1;
			apple2_read_horiz <= apple2_horiz;
			apple2_read_vert <= apple2_vert;
		end
	end
	if (apple2_fb_w) begin
		apple2_scroll_read <= 1'd0;
		apple2_prev_vert <= apple2_vert;
		apple2_prev_horiz <= apple2_horiz;
		apple2_prev_char <= apple2_dout;
		if ((apple2_repeat_match & apple2_repeat_sequential)) begin
			apple2_repeat_active <= 1'd1;
		end else begin
			if ((apple2_repeat_active & (~apple2_repeat_sequential))) begin
				apple2_push_save <= 1'd1;
				apple2_prev_start <= apple2_scroll_start;
				apple2_repeat_active <= 1'd0;
			end else begin
				apple2_repeat_active <= 1'd0;
			end
		end
	end
	if (apple2_push_save) begin
		apple2_push_save <= 1'd0;
	end
	if (apple2_display_fifo_syncfifo_re) begin
		apple2_display_fifo_readable <= 1'd1;
	end else begin
		if (apple2_display_fifo_re) begin
			apple2_display_fifo_readable <= 1'd0;
		end
	end
	if (((apple2_display_fifo_syncfifo_we & apple2_display_fifo_syncfifo_writable) & (~apple2_display_fifo_replace))) begin
		apple2_display_fifo_produce <= (apple2_display_fifo_produce + 1'd1);
	end
	if (apple2_display_fifo_do_read) begin
		apple2_display_fifo_consume <= (apple2_display_fifo_consume + 1'd1);
	end
	if (((apple2_display_fifo_syncfifo_we & apple2_display_fifo_syncfifo_writable) & (~apple2_display_fifo_replace))) begin
		if ((~apple2_display_fifo_do_read)) begin
			apple2_display_fifo_level0 <= (apple2_display_fifo_level0 + 1'd1);
		end
	end else begin
		if (apple2_display_fifo_do_read) begin
			apple2_display_fifo_level0 <= (apple2_display_fifo_level0 - 1'd1);
		end
	end
	rom_bus_ack <= 1'd0;
	if (((rom_bus_cyc & rom_bus_stb) & (~rom_bus_ack))) begin
		rom_bus_ack <= 1'd1;
	end
	if ((lxspi_i1 == 1'd0)) begin
		lxspi_clk1 <= 1'd1;
		lxspi_dqi <= lxspi_i0;
	end
	if ((lxspi_i1 == 1'd1)) begin
		lxspi_i1 <= 1'd0;
		lxspi_clk1 <= 1'd0;
		lxspi_sr <= {lxspi_sr[27:0], lxspi_dqi};
	end else begin
		lxspi_i1 <= (lxspi_i1 + 1'd1);
	end
	if ((((lxspi_bus_cyc & lxspi_bus_stb) & (lxspi_i1 == 1'd1)) & (lxspi_counter == 1'd0))) begin
		lxspi_dq_oe <= 1'd1;
		lxspi_cs_n1 <= 1'd0;
		lxspi_sr[31:0] <= 32'd4294901503;
	end
	if ((lxspi_counter == 5'd16)) begin
		lxspi_sr[31:8] <= {lxspi_bus_adr, {2{1'd0}}};
	end
	if ((lxspi_counter == 5'd28)) begin
		lxspi_dq_oe <= 1'd0;
	end
	if ((lxspi_counter == 6'd56)) begin
		lxspi_bus_ack <= 1'd1;
		lxspi_cs_n1 <= 1'd1;
	end
	if ((lxspi_counter == 6'd57)) begin
		lxspi_bus_ack <= 1'd0;
	end
	if ((lxspi_counter == 6'd59)) begin
	end
	if ((lxspi_counter == 6'd59)) begin
		lxspi_counter <= 1'd0;
	end else begin
		if ((lxspi_counter != 1'd0)) begin
			lxspi_counter <= (lxspi_counter + 1'd1);
		end else begin
			if (((lxspi_bus_cyc & lxspi_bus_stb) & (lxspi_i1 == 1'd1))) begin
				lxspi_counter <= 1'd1;
			end
		end
	end
	if (usb_usb_core_usb_reset) begin
		usb_in_next <= 1'd0;
		usb_out_next <= 1'd0;
	end else begin
		if ((usb_inhandler_packet_pending & (~usb_outhandler_packet_pending))) begin
			usb_in_next <= 1'd1;
			usb_out_next <= 1'd0;
		end else begin
			if (((~usb_inhandler_packet_pending) & usb_outhandler_packet_pending)) begin
				usb_in_next <= 1'd0;
				usb_out_next <= 1'd1;
			end else begin
				if (((~usb_inhandler_packet_pending) & (~usb_outhandler_packet_pending))) begin
					usb_in_next <= 1'd0;
					usb_out_next <= 1'd0;
				end
			end
		end
	end
	case (grant)
		1'd0: begin
			if ((~request[0])) begin
				if (request[1]) begin
					grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~request[1])) begin
				if (request[0]) begin
					grant <= 1'd0;
				end
			end
		end
	endcase
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	interface0_bank_bus_dat_r <= 1'd0;
	if (csrbank0_sel) begin
		case (interface0_bank_bus_adr[2:0])
			1'd0: begin
				interface0_bank_bus_dat_r <= csrbank0_control0_w;
			end
			1'd1: begin
				interface0_bank_bus_dat_r <= csrbank0_keyboard0_w;
			end
			2'd2: begin
				interface0_bank_bus_dat_r <= apple2_strobe_w;
			end
			2'd3: begin
				interface0_bank_bus_dat_r <= csrbank0_screen_w;
			end
			3'd4: begin
				interface0_bank_bus_dat_r <= csrbank0_diskctrl_w;
			end
			3'd5: begin
				interface0_bank_bus_dat_r <= csrbank0_diskdata0_w;
			end
		endcase
	end
	if (csrbank0_control0_re) begin
		apple2_control_storage[11:0] <= csrbank0_control0_r;
	end
	apple2_control_re <= csrbank0_control0_re;
	if (apple2_keyboard_we) begin
		apple2_keyboard_storage <= apple2_keyboard_dat_w;
	end
	if (csrbank0_keyboard0_re) begin
		apple2_keyboard_storage[7:0] <= csrbank0_keyboard0_r;
	end
	apple2_keyboard_re <= csrbank0_keyboard0_re;
	if (csrbank0_diskdata0_re) begin
		apple2_diskdata_storage[7:0] <= csrbank0_diskdata0_r;
	end
	apple2_diskdata_re <= csrbank0_diskdata0_re;
	interface1_bank_bus_dat_r <= 1'd0;
	if (csrbank1_sel) begin
		case (interface1_bank_bus_adr[1:0])
			1'd0: begin
				interface1_bank_bus_dat_r <= csrbank1_reset0_w;
			end
			1'd1: begin
				interface1_bank_bus_dat_r <= csrbank1_scratch0_w;
			end
			2'd2: begin
				interface1_bank_bus_dat_r <= csrbank1_bus_errors_w;
			end
		endcase
	end
	if (csrbank1_reset0_re) begin
		basesoc_soccontroller_reset_storage <= csrbank1_reset0_r;
	end
	basesoc_soccontroller_reset_re <= csrbank1_reset0_re;
	if (csrbank1_scratch0_re) begin
		basesoc_soccontroller_scratch_storage[31:0] <= csrbank1_scratch0_r;
	end
	basesoc_soccontroller_scratch_re <= csrbank1_scratch0_re;
	interface2_bank_bus_dat_r <= 1'd0;
	if (csrbank2_sel) begin
		case (interface2_bank_bus_adr[1:0])
			1'd0: begin
				interface2_bank_bus_dat_r <= csrbank2_bitbang0_w;
			end
			1'd1: begin
				interface2_bank_bus_dat_r <= csrbank2_miso_w;
			end
			2'd2: begin
				interface2_bank_bus_dat_r <= csrbank2_bitbang_en0_w;
			end
		endcase
	end
	if (csrbank2_bitbang0_re) begin
		lxspi_bitbang_storage[3:0] <= csrbank2_bitbang0_r;
	end
	lxspi_bitbang_re <= csrbank2_bitbang0_re;
	if (csrbank2_bitbang_en0_re) begin
		lxspi_bitbang_en_storage <= csrbank2_bitbang_en0_r;
	end
	lxspi_bitbang_en_re <= csrbank2_bitbang_en0_re;
	interface3_bank_bus_dat_r <= 1'd0;
	if (csrbank3_sel) begin
		case (interface3_bank_bus_adr[0])
			1'd0: begin
				interface3_bank_bus_dat_r <= csrbank3_ctrl0_w;
			end
			1'd1: begin
				interface3_bank_bus_dat_r <= csrbank3_addr0_w;
			end
		endcase
	end
	if (csrbank3_ctrl0_re) begin
		ctrl_storage[7:0] <= csrbank3_ctrl0_r;
	end
	ctrl_re <= csrbank3_ctrl0_re;
	if (csrbank3_addr0_re) begin
		addr_storage[31:0] <= csrbank3_addr0_r;
	end
	addr_re <= csrbank3_addr0_re;
	interface4_bank_bus_dat_r <= 1'd0;
	if (csrbank4_sel) begin
		case (interface4_bank_bus_adr[1:0])
			1'd0: begin
				interface4_bank_bus_dat_r <= csrbank4_dat0_w;
			end
			1'd1: begin
				interface4_bank_bus_dat_r <= csrbank4_addr0_w;
			end
			2'd2: begin
				interface4_bank_bus_dat_r <= csrbank4_ctrl0_w;
			end
			2'd3: begin
				interface4_bank_bus_dat_r <= csrbank4_raw0_w;
			end
		endcase
	end
	if (csrbank4_dat0_re) begin
		sbled_dat_storage[7:0] <= csrbank4_dat0_r;
	end
	sbled_dat_re <= csrbank4_dat0_re;
	if (csrbank4_addr0_re) begin
		sbled_addr_storage[3:0] <= csrbank4_addr0_r;
	end
	sbled_addr_re <= csrbank4_addr0_re;
	if (csrbank4_ctrl0_re) begin
		sbled_ctrl_storage[5:0] <= csrbank4_ctrl0_r;
	end
	sbled_ctrl_re <= csrbank4_ctrl0_re;
	if (csrbank4_raw0_re) begin
		sbled_raw_storage[2:0] <= csrbank4_raw0_r;
	end
	sbled_raw_re <= csrbank4_raw0_re;
	interface5_bank_bus_dat_r <= 1'd0;
	if (csrbank5_sel) begin
		case (interface5_bank_bus_adr[2:0])
			1'd0: begin
				interface5_bank_bus_dat_r <= csrbank5_load0_w;
			end
			1'd1: begin
				interface5_bank_bus_dat_r <= csrbank5_reload0_w;
			end
			2'd2: begin
				interface5_bank_bus_dat_r <= csrbank5_en0_w;
			end
			2'd3: begin
				interface5_bank_bus_dat_r <= csrbank5_update_value0_w;
			end
			3'd4: begin
				interface5_bank_bus_dat_r <= csrbank5_value_w;
			end
			3'd5: begin
				interface5_bank_bus_dat_r <= basesoc_eventmanager_status_w;
			end
			3'd6: begin
				interface5_bank_bus_dat_r <= basesoc_eventmanager_pending_w;
			end
			3'd7: begin
				interface5_bank_bus_dat_r <= csrbank5_ev_enable0_w;
			end
		endcase
	end
	if (csrbank5_load0_re) begin
		basesoc_load_storage[31:0] <= csrbank5_load0_r;
	end
	basesoc_load_re <= csrbank5_load0_re;
	if (csrbank5_reload0_re) begin
		basesoc_reload_storage[31:0] <= csrbank5_reload0_r;
	end
	basesoc_reload_re <= csrbank5_reload0_re;
	if (csrbank5_en0_re) begin
		basesoc_en_storage <= csrbank5_en0_r;
	end
	basesoc_en_re <= csrbank5_en0_re;
	if (csrbank5_update_value0_re) begin
		basesoc_update_value_storage <= csrbank5_update_value0_r;
	end
	basesoc_update_value_re <= csrbank5_update_value0_re;
	if (csrbank5_ev_enable0_re) begin
		basesoc_eventmanager_storage <= csrbank5_ev_enable0_r;
	end
	basesoc_eventmanager_re <= csrbank5_ev_enable0_re;
	interface6_bank_bus_dat_r <= 1'd0;
	if (csrbank6_sel) begin
		case (interface6_bank_bus_adr[1:0])
			1'd0: begin
				interface6_bank_bus_dat_r <= csrbank6_o0_w;
			end
			1'd1: begin
				interface6_bank_bus_dat_r <= csrbank6_oe0_w;
			end
			2'd2: begin
				interface6_bank_bus_dat_r <= csrbank6_i_w;
			end
		endcase
	end
	if (csrbank6_o0_re) begin
		touch_o_storage[3:0] <= csrbank6_o0_r;
	end
	touch_o_re <= csrbank6_o0_re;
	if (csrbank6_oe0_re) begin
		touch_oe_storage[3:0] <= csrbank6_oe0_r;
	end
	touch_oe_re <= csrbank6_oe0_re;
	interface7_bank_bus_dat_r <= 1'd0;
	if (csrbank7_sel) begin
		case (interface7_bank_bus_adr[4:0])
			1'd0: begin
				interface7_bank_bus_dat_r <= csrbank7_pullup_out0_w;
			end
			1'd1: begin
				interface7_bank_bus_dat_r <= csrbank7_address0_w;
			end
			2'd2: begin
				interface7_bank_bus_dat_r <= csrbank7_next_ev_w;
			end
			2'd3: begin
				interface7_bank_bus_dat_r <= csrbank7_setup_data_w;
			end
			3'd4: begin
				interface7_bank_bus_dat_r <= csrbank7_setup_ctrl0_w;
			end
			3'd5: begin
				interface7_bank_bus_dat_r <= csrbank7_setup_status_w;
			end
			3'd6: begin
				interface7_bank_bus_dat_r <= usb_setuphandler_eventmanager_status_w;
			end
			3'd7: begin
				interface7_bank_bus_dat_r <= usb_setuphandler_eventmanager_pending_w;
			end
			4'd8: begin
				interface7_bank_bus_dat_r <= csrbank7_setup_ev_enable0_w;
			end
			4'd9: begin
				interface7_bank_bus_dat_r <= csrbank7_in_data0_w;
			end
			4'd10: begin
				interface7_bank_bus_dat_r <= csrbank7_in_ctrl0_w;
			end
			4'd11: begin
				interface7_bank_bus_dat_r <= csrbank7_in_status_w;
			end
			4'd12: begin
				interface7_bank_bus_dat_r <= usb_inhandler_eventmanager_status_w;
			end
			4'd13: begin
				interface7_bank_bus_dat_r <= usb_inhandler_eventmanager_pending_w;
			end
			4'd14: begin
				interface7_bank_bus_dat_r <= csrbank7_in_ev_enable0_w;
			end
			4'd15: begin
				interface7_bank_bus_dat_r <= csrbank7_out_data_w;
			end
			5'd16: begin
				interface7_bank_bus_dat_r <= csrbank7_out_ctrl0_w;
			end
			5'd17: begin
				interface7_bank_bus_dat_r <= csrbank7_out_status_w;
			end
			5'd18: begin
				interface7_bank_bus_dat_r <= usb_outhandler_eventmanager_status_w;
			end
			5'd19: begin
				interface7_bank_bus_dat_r <= usb_outhandler_eventmanager_pending_w;
			end
			5'd20: begin
				interface7_bank_bus_dat_r <= csrbank7_out_ev_enable0_w;
			end
		endcase
	end
	if (csrbank7_pullup_out0_re) begin
		usb_pullup_storage <= csrbank7_pullup_out0_r;
	end
	usb_pullup_re <= csrbank7_pullup_out0_re;
	if (csrbank7_address0_re) begin
		usb_csrstorage_storage[6:0] <= csrbank7_address0_r;
	end
	usb_csrstorage_re <= csrbank7_address0_re;
	if (usb_address_reset) begin
		usb_csrstorage_storage <= 7'd0;
		usb_csrstorage_re <= 1'd0;
	end
	if (csrbank7_setup_ctrl0_re) begin
		usb_setuphandler_ctrl_storage[5:0] <= csrbank7_setup_ctrl0_r;
	end
	usb_setuphandler_ctrl_re <= csrbank7_setup_ctrl0_re;
	if (csrbank7_setup_ev_enable0_re) begin
		usb_setuphandler_eventmanager_storage[1:0] <= csrbank7_setup_ev_enable0_r;
	end
	usb_setuphandler_eventmanager_re <= csrbank7_setup_ev_enable0_re;
	if (csrbank7_in_data0_re) begin
		usb_inhandler_data_storage[7:0] <= csrbank7_in_data0_r;
	end
	usb_inhandler_data_re <= csrbank7_in_data0_re;
	if (csrbank7_in_ctrl0_re) begin
		usb_inhandler_ctrl_storage[6:0] <= csrbank7_in_ctrl0_r;
	end
	usb_inhandler_ctrl_re <= csrbank7_in_ctrl0_re;
	if (csrbank7_in_ev_enable0_re) begin
		usb_inhandler_eventmanager_storage <= csrbank7_in_ev_enable0_r;
	end
	usb_inhandler_eventmanager_re <= csrbank7_in_ev_enable0_re;
	if (csrbank7_out_ctrl0_re) begin
		usb_outhandler_ctrl_storage[6:0] <= csrbank7_out_ctrl0_r;
	end
	usb_outhandler_ctrl_re <= csrbank7_out_ctrl0_re;
	if (csrbank7_out_ev_enable0_re) begin
		usb_outhandler_eventmanager_storage <= csrbank7_out_ev_enable0_r;
	end
	usb_outhandler_eventmanager_re <= csrbank7_out_ev_enable0_re;
	if (sys_rst) begin
		basesoc_soccontroller_reset_storage <= 1'd0;
		basesoc_soccontroller_reset_re <= 1'd0;
		basesoc_soccontroller_scratch_storage <= 32'd305419896;
		basesoc_soccontroller_scratch_re <= 1'd0;
		basesoc_soccontroller_bus_errors <= 32'd0;
		basesoc_load_storage <= 32'd0;
		basesoc_load_re <= 1'd0;
		basesoc_reload_storage <= 32'd0;
		basesoc_reload_re <= 1'd0;
		basesoc_en_storage <= 1'd0;
		basesoc_en_re <= 1'd0;
		basesoc_update_value_storage <= 1'd0;
		basesoc_update_value_re <= 1'd0;
		basesoc_value_status <= 32'd0;
		basesoc_zero_pending <= 1'd0;
		basesoc_zero_old_trigger <= 1'd0;
		basesoc_eventmanager_storage <= 1'd0;
		basesoc_eventmanager_re <= 1'd0;
		basesoc_value <= 32'd0;
		spram_bus_ack <= 1'd0;
		a2mem_bus_ack <= 1'd0;
		a2mem_hold_en6502 <= 1'd0;
		a2mem_read_shift <= 2'd0;
		a2mem_hold6502 <= 8'd0;
		a2mem_accesswb <= 1'd0;
		apple2_ior_addr <= 8'd0;
		apple2_r_memsel <= 1'd0;
		apple2_clk_en <= 1'd0;
		apple2_available <= 1'd0;
		apple2_idlecount <= 4'd0;
		apple2_disk_phase <= 4'd0;
		apple2_disk_motor <= 1'd0;
		apple2_disk_drive <= 1'd0;
		apple2_disk_reading <= 1'd0;
		apple2_disk_data_available <= 1'd0;
		apple2_disk_data_wanted <= 1'd0;
		apple2_control_storage <= 12'd2817;
		apple2_control_re <= 1'd0;
		apple2_keyboard_storage <= 8'd0;
		apple2_keyboard_re <= 1'd0;
		apple2_diskdata_storage <= 8'd0;
		apple2_diskdata_re <= 1'd0;
		apple2_display_fifo_readable <= 1'd0;
		apple2_display_fifo_level0 <= 9'd0;
		apple2_display_fifo_produce <= 8'd0;
		apple2_display_fifo_consume <= 8'd0;
		apple2_scroll_active <= 1'd0;
		apple2_scroll_read <= 1'd0;
		apple2_read_horiz <= 6'd0;
		apple2_read_vert <= 5'd0;
		apple2_repeat_active <= 1'd0;
		apple2_prev_horiz <= 6'd0;
		apple2_prev_vert <= 5'd0;
		apple2_prev_char <= 8'd0;
		apple2_prev_start <= 1'd0;
		apple2_push_save <= 1'd0;
		apple2_fifo_out <= 32'd0;
		rom_bus_ack <= 1'd0;
		lxspi_bus_ack <= 1'd0;
		lxspi_bitbang_re <= 1'd0;
		lxspi_bitbang_en_storage <= 1'd0;
		lxspi_bitbang_en_re <= 1'd0;
		lxspi_cs_n1 <= 1'd1;
		lxspi_clk1 <= 1'd0;
		lxspi_dq_oe <= 1'd0;
		lxspi_sr <= 32'd0;
		lxspi_i1 <= 1'd0;
		lxspi_dqi <= 4'd0;
		lxspi_counter <= 6'd0;
		usb_pullup_storage <= 1'd0;
		usb_pullup_re <= 1'd0;
		usb_csrstorage_storage <= 7'd0;
		usb_csrstorage_re <= 1'd0;
		usb_setuphandler_ctrl_storage <= 6'd0;
		usb_setuphandler_ctrl_re <= 1'd0;
		usb_setuphandler_eventmanager_storage <= 2'd0;
		usb_setuphandler_eventmanager_re <= 1'd0;
		usb_inhandler_data_storage <= 8'd0;
		usb_inhandler_data_re <= 1'd0;
		usb_inhandler_ctrl_storage <= 7'd0;
		usb_inhandler_ctrl_re <= 1'd0;
		usb_inhandler_eventmanager_storage <= 1'd0;
		usb_inhandler_eventmanager_re <= 1'd0;
		usb_outhandler_ctrl_storage <= 7'd0;
		usb_outhandler_ctrl_re <= 1'd0;
		usb_outhandler_eventmanager_storage <= 1'd0;
		usb_outhandler_eventmanager_re <= 1'd0;
		usb_in_next <= 1'd0;
		usb_out_next <= 1'd0;
		touch_o_storage <= 4'd0;
		touch_o_re <= 1'd0;
		touch_oe_storage <= 4'd0;
		touch_oe_re <= 1'd0;
		ctrl_storage <= 8'd0;
		ctrl_re <= 1'd0;
		addr_storage <= 32'd0;
		addr_re <= 1'd0;
		sbled_dat_storage <= 8'd0;
		sbled_dat_re <= 1'd0;
		sbled_addr_storage <= 4'd0;
		sbled_addr_re <= 1'd0;
		sbled_ctrl_storage <= 6'd0;
		sbled_ctrl_re <= 1'd0;
		sbled_raw_storage <= 3'd0;
		sbled_raw_re <= 1'd0;
		wb2csr_state <= 1'd0;
		grant <= 1'd0;
		slave_sel_r <= 5'd0;
		count <= 20'd1000000;
	end
end

always @(posedge usb_12_clk) begin
	usb_usb_core_tx_bitstuff_valid_data <= (((~usb_usb_core_tx_stall) & usb_usb_core_tx_shifter_o_get) & usb_usb_core_tx_i_oe);
	triendpointinterface_fsm_state <= triendpointinterface_fsm_next_state;
	if (usb_usb_core_tx_sync_pulse_txpipeline_next_value_ce0) begin
		usb_usb_core_tx_sync_pulse <= usb_usb_core_tx_sync_pulse_txpipeline_next_value0;
	end
	if (usb_usb_core_tx_state_gray_txpipeline_next_value_ce1) begin
		usb_usb_core_tx_state_gray <= usb_usb_core_tx_state_gray_txpipeline_next_value1;
	end
	if (usb_usb_core_tx_shifter_ce) begin
		usb_usb_core_tx_shifter_pos <= (usb_usb_core_tx_shifter_pos >>> 1'd1);
		usb_usb_core_tx_shifter_shifter <= (usb_usb_core_tx_shifter_shifter >>> 1'd1);
		if (usb_usb_core_tx_shifter_empty) begin
			usb_usb_core_tx_shifter_shifter <= usb_usb_core_tx_shifter_i_data;
			usb_usb_core_tx_shifter_pos <= 8'd128;
		end
		usb_usb_core_tx_shifter_o_get <= usb_usb_core_tx_shifter_empty;
	end
	if (usb_usb_core_tx_shifter_reset) begin
		usb_usb_core_tx_shifter_o_get <= 1'd0;
		usb_usb_core_tx_shifter_shifter <= 8'd0;
		usb_usb_core_tx_shifter_pos <= 8'd1;
	end
	if (usb_usb_core_tx_bitstuff_stuff_bit) begin
		usb_usb_core_tx_bitstuff_o_data <= 1'd0;
	end else begin
		usb_usb_core_tx_bitstuff_o_data <= usb_usb_core_tx_bitstuff_i_data;
	end
	triendpointinterface_resetinserter_state <= triendpointinterface_resetinserter_next_state;
	if (usb_usb_core_tx_bitstuff_reset) begin
		usb_usb_core_tx_bitstuff_o_data <= 1'd0;
		triendpointinterface_resetinserter_state <= 3'd0;
	end
	triendpointinterface_txpacketsend_state <= triendpointinterface_txpacketsend_next_state;
	if (usb_usb_core_tx_i_oe_txpacketsend_next_value_ce0) begin
		usb_usb_core_tx_i_oe <= usb_usb_core_tx_i_oe_txpacketsend_next_value0;
	end
	if (usb_usb_core_txstate_pid_txpacketsend_next_value_ce1) begin
		usb_usb_core_txstate_pid <= usb_usb_core_txstate_pid_txpacketsend_next_value1;
	end
	if (usb_usb_core_txstate_i_data_strobe) begin
		usb_usb_core_txstate_crc_cur <= usb_usb_core_txstate_crc_next;
	end
	if (usb_usb_core_txstate_reset) begin
		usb_usb_core_txstate_crc_cur <= 16'd65535;
	end
	if (usb_usb_core_rx_o_pkt_start) begin
		usb_usb_core_rx_o_pkt_in_progress <= 1'd1;
	end else begin
		if (usb_usb_core_rx_o_pkt_end) begin
			usb_usb_core_rx_o_pkt_in_progress <= 1'd0;
		end
	end
	usb_usb_core_rx_payloadFifo_graycounter1_q_binary <= usb_usb_core_rx_payloadFifo_graycounter1_q_next_binary;
	usb_usb_core_rx_payloadFifo_graycounter1_q <= usb_usb_core_rx_payloadFifo_graycounter1_q_next;
	usb_usb_core_rx_flagsFifo_graycounter1_q_binary <= usb_usb_core_rx_flagsFifo_graycounter1_q_next_binary;
	usb_usb_core_rx_flagsFifo_graycounter1_q <= usb_usb_core_rx_flagsFifo_graycounter1_q_next;
	triendpointinterface_packetheaderdecode_state <= triendpointinterface_packetheaderdecode_next_state;
	if (usb_usb_core_o_pid_packetheaderdecode_next_value_ce0) begin
		usb_usb_core_o_pid <= usb_usb_core_o_pid_packetheaderdecode_next_value0;
	end
	if (triendpointinterface_packetheaderdecode_next_value_ce) begin
		usb_usb_core_o_addr[6:0] <= triendpointinterface_packetheaderdecode_next_value;
	end
	if (usb_usb_core_endp4_packetheaderdecode_next_value_ce1) begin
		usb_usb_core_endp4 <= usb_usb_core_endp4_packetheaderdecode_next_value1;
	end
	if (usb_usb_core_o_endp_packetheaderdecode_next_value_ce2) begin
		usb_usb_core_o_endp <= usb_usb_core_o_endp_packetheaderdecode_next_value2;
	end
	if (usb_usb_core_crc5_packetheaderdecode_next_value_ce3) begin
		usb_usb_core_crc5 <= usb_usb_core_crc5_packetheaderdecode_next_value3;
	end
	triendpointinterface_clockdomainsrenamer_state <= triendpointinterface_clockdomainsrenamer_next_state;
	if (usb_usb_core_tok_f_next_value_ce0) begin
		usb_usb_core_tok <= usb_usb_core_tok_f_next_value0;
	end
	if (usb_usb_core_endp_f_next_value_ce1) begin
		usb_usb_core_endp <= usb_usb_core_endp_f_next_value1;
	end
	if (usb_usb_core_response_pid_t_next_value_ce) begin
		usb_usb_core_response_pid <= usb_usb_core_response_pid_t_next_value;
	end
	if (usb_usb_core_transfer_reset) begin
		usb_usb_core_tok <= 4'd0;
		usb_usb_core_endp <= 4'd0;
		usb_usb_core_response_pid <= 4'd0;
		triendpointinterface_clockdomainsrenamer_state <= 4'd1;
	end
	if (usb_setuphandler_packet_clear) begin
		usb_setuphandler_packet_pending <= 1'd0;
	end
	if (usb_setuphandler_packet_trigger) begin
		usb_setuphandler_packet_pending <= 1'd1;
	end
	if (usb_setuphandler_reset_clear) begin
		usb_setuphandler_reset_pending <= 1'd0;
	end
	usb_setuphandler_reset_old_trigger <= usb_setuphandler_reset_trigger;
	if (((~usb_setuphandler_reset_trigger) & usb_setuphandler_reset_old_trigger)) begin
		usb_setuphandler_reset_pending <= 1'd1;
	end
	if (usb_setuphandler_data_recv_put) begin
		if ((usb_setuphandler_setuphandlerinner_data_byte == 1'd0)) begin
			usb_setuphandler_epno <= usb_usb_core_endp;
			usb_setuphandler_setuphandlerinner_is_in <= usb_setuphandler_data_recv_payload[7];
		end else begin
			if ((usb_setuphandler_setuphandlerinner_data_byte == 3'd6)) begin
				if (usb_setuphandler_data_recv_payload) begin
					usb_setuphandler_setuphandlerinner_have_data_stage <= 1'd1;
				end
			end else begin
				if ((usb_setuphandler_setuphandlerinner_data_byte == 3'd7)) begin
					if (usb_setuphandler_data_recv_payload) begin
						usb_setuphandler_setuphandlerinner_have_data_stage <= 1'd1;
					end
				end
			end
		end
		usb_setuphandler_setuphandlerinner_data_byte <= (usb_setuphandler_setuphandlerinner_data_byte + 1'd1);
	end
	if (usb_setuphandler_setuphandlerinner_syncfifo_re) begin
		usb_setuphandler_setuphandlerinner_readable <= 1'd1;
	end else begin
		if (usb_setuphandler_setuphandlerinner_re) begin
			usb_setuphandler_setuphandlerinner_readable <= 1'd0;
		end
	end
	if (((usb_setuphandler_setuphandlerinner_syncfifo_we & usb_setuphandler_setuphandlerinner_syncfifo_writable) & (~usb_setuphandler_setuphandlerinner_replace))) begin
		if ((usb_setuphandler_setuphandlerinner_produce == 4'd9)) begin
			usb_setuphandler_setuphandlerinner_produce <= 1'd0;
		end else begin
			usb_setuphandler_setuphandlerinner_produce <= (usb_setuphandler_setuphandlerinner_produce + 1'd1);
		end
	end
	if (usb_setuphandler_setuphandlerinner_do_read) begin
		if ((usb_setuphandler_setuphandlerinner_consume == 4'd9)) begin
			usb_setuphandler_setuphandlerinner_consume <= 1'd0;
		end else begin
			usb_setuphandler_setuphandlerinner_consume <= (usb_setuphandler_setuphandlerinner_consume + 1'd1);
		end
	end
	if (((usb_setuphandler_setuphandlerinner_syncfifo_we & usb_setuphandler_setuphandlerinner_syncfifo_writable) & (~usb_setuphandler_setuphandlerinner_replace))) begin
		if ((~usb_setuphandler_setuphandlerinner_do_read)) begin
			usb_setuphandler_setuphandlerinner_level0 <= (usb_setuphandler_setuphandlerinner_level0 + 1'd1);
		end
	end else begin
		if (usb_setuphandler_setuphandlerinner_do_read) begin
			usb_setuphandler_setuphandlerinner_level0 <= (usb_setuphandler_setuphandlerinner_level0 - 1'd1);
		end
	end
	if (usb_setuphandler_inner_reset) begin
		usb_setuphandler_epno <= 1'd0;
		usb_setuphandler_setuphandlerinner_readable <= 1'd0;
		usb_setuphandler_setuphandlerinner_level0 <= 4'd0;
		usb_setuphandler_setuphandlerinner_produce <= 4'd0;
		usb_setuphandler_setuphandlerinner_consume <= 4'd0;
		usb_setuphandler_setuphandlerinner_data_byte <= 4'd0;
		usb_setuphandler_setuphandlerinner_have_data_stage <= 1'd0;
		usb_setuphandler_setuphandlerinner_is_in <= 1'd0;
	end
	if (usb_inhandler_csrfield_reset) begin
		usb_inhandler_stall_status <= 1'd0;
	end else begin
		if ((usb_usb_core_setup | (usb_inhandler_ctrl_re & (~usb_inhandler_csrfield_stall)))) begin
			usb_inhandler_stall_status <= (usb_inhandler_stall_status & (~usb_inhandler_ep_stall_mask));
		end else begin
			if (usb_inhandler_ctrl_re) begin
				usb_inhandler_stall_status <= (usb_inhandler_stall_status | usb_inhandler_ep_stall_mask);
			end
		end
	end
	if (usb_inhandler_csrfield_reset) begin
		usb_inhandler_queued <= 1'd0;
		usb_inhandler_was_queued <= 1'd0;
		usb_inhandler_transmitted <= 1'd0;
		usb_inhandler_dtbs <= 1'd1;
	end else begin
		if (usb_inhandler_dtb_reset) begin
			usb_inhandler_dtbs <= (usb_inhandler_dtbs | 1'd1);
		end else begin
			if ((usb_inhandler_ctrl_re & (~usb_inhandler_csrfield_stall))) begin
				usb_inhandler_queued <= 1'd1;
			end else begin
				if ((usb_usb_core_poll & usb_inhandler_response)) begin
					usb_inhandler_transmitted <= 1'd1;
				end else begin
					if ((((usb_usb_core_commit & usb_inhandler_transmitted) & usb_inhandler_response) & (~usb_inhandler_stalled))) begin
						usb_inhandler_queued <= 1'd0;
						usb_inhandler_transmitted <= 1'd0;
						usb_inhandler_dtbs <= (usb_inhandler_dtbs ^ (1'd1 <<< usb_inhandler_csrfield_epno));
					end else begin
						usb_inhandler_was_queued <= usb_inhandler_queued;
					end
				end
			end
		end
	end
	if (usb_inhandler_syncfifobuffered_syncfifo_re) begin
		usb_inhandler_syncfifobuffered_readable <= 1'd1;
	end else begin
		if (usb_inhandler_syncfifobuffered_re) begin
			usb_inhandler_syncfifobuffered_readable <= 1'd0;
		end
	end
	if (((usb_inhandler_syncfifobuffered_syncfifo_we & usb_inhandler_syncfifobuffered_syncfifo_writable) & (~usb_inhandler_syncfifobuffered_replace))) begin
		usb_inhandler_syncfifobuffered_produce <= (usb_inhandler_syncfifobuffered_produce + 1'd1);
	end
	if (usb_inhandler_syncfifobuffered_do_read) begin
		usb_inhandler_syncfifobuffered_consume <= (usb_inhandler_syncfifobuffered_consume + 1'd1);
	end
	if (((usb_inhandler_syncfifobuffered_syncfifo_we & usb_inhandler_syncfifobuffered_syncfifo_writable) & (~usb_inhandler_syncfifobuffered_replace))) begin
		if ((~usb_inhandler_syncfifobuffered_do_read)) begin
			usb_inhandler_syncfifobuffered_level0 <= (usb_inhandler_syncfifobuffered_level0 + 1'd1);
		end
	end else begin
		if (usb_inhandler_syncfifobuffered_do_read) begin
			usb_inhandler_syncfifobuffered_level0 <= (usb_inhandler_syncfifobuffered_level0 - 1'd1);
		end
	end
	if (usb_inhandler_data_buf_reset) begin
		usb_inhandler_syncfifobuffered_readable <= 1'd0;
		usb_inhandler_syncfifobuffered_level0 <= 7'd0;
		usb_inhandler_syncfifobuffered_produce <= 6'd0;
		usb_inhandler_syncfifobuffered_consume <= 6'd0;
	end
	if (usb_inhandler_packet_clear) begin
		usb_inhandler_packet_pending <= 1'd0;
	end
	if (usb_inhandler_packet_trigger) begin
		usb_inhandler_packet_pending <= 1'd1;
	end
	if ((usb_outhandler_csrfield_reset | usb_outhandler_usb_reset)) begin
		usb_outhandler_stall_status <= 1'd0;
	end else begin
		if ((usb_usb_core_setup | (usb_outhandler_ctrl_re & (~usb_outhandler_csrfield_stall)))) begin
			usb_outhandler_stall_status <= (usb_outhandler_stall_status & (~usb_outhandler_ep_mask));
		end else begin
			if (usb_outhandler_ctrl_re) begin
				usb_outhandler_stall_status <= (usb_outhandler_stall_status | usb_outhandler_ep_mask);
			end
		end
	end
	if (usb_usb_core_poll) begin
		usb_outhandler_responding <= usb_outhandler_response;
	end
	if (usb_outhandler_csrfield_reset) begin
		usb_outhandler_enable_status <= 1'd0;
	end else begin
		if ((usb_usb_core_commit & usb_outhandler_responding)) begin
			usb_outhandler_epno <= usb_usb_core_endp;
			usb_outhandler_enable_status <= (usb_outhandler_enable_status & (~usb_outhandler_ep_mask));
			usb_outhandler_responding <= 1'd0;
		end else begin
			if (usb_outhandler_ctrl_re) begin
				if (usb_outhandler_csrfield_enable) begin
					usb_outhandler_enable_status <= (usb_outhandler_enable_status | usb_outhandler_ep_mask);
				end else begin
					usb_outhandler_enable_status <= (usb_outhandler_enable_status & (~usb_outhandler_ep_mask));
				end
			end
		end
	end
	if (usb_outhandler_syncfifobuffered_syncfifo_re) begin
		usb_outhandler_syncfifobuffered_readable <= 1'd1;
	end else begin
		if (usb_outhandler_syncfifobuffered_re) begin
			usb_outhandler_syncfifobuffered_readable <= 1'd0;
		end
	end
	if (((usb_outhandler_syncfifobuffered_syncfifo_we & usb_outhandler_syncfifobuffered_syncfifo_writable) & (~usb_outhandler_syncfifobuffered_replace))) begin
		if ((usb_outhandler_syncfifobuffered_produce == 7'd65)) begin
			usb_outhandler_syncfifobuffered_produce <= 1'd0;
		end else begin
			usb_outhandler_syncfifobuffered_produce <= (usb_outhandler_syncfifobuffered_produce + 1'd1);
		end
	end
	if (usb_outhandler_syncfifobuffered_do_read) begin
		if ((usb_outhandler_syncfifobuffered_consume == 7'd65)) begin
			usb_outhandler_syncfifobuffered_consume <= 1'd0;
		end else begin
			usb_outhandler_syncfifobuffered_consume <= (usb_outhandler_syncfifobuffered_consume + 1'd1);
		end
	end
	if (((usb_outhandler_syncfifobuffered_syncfifo_we & usb_outhandler_syncfifobuffered_syncfifo_writable) & (~usb_outhandler_syncfifobuffered_replace))) begin
		if ((~usb_outhandler_syncfifobuffered_do_read)) begin
			usb_outhandler_syncfifobuffered_level0 <= (usb_outhandler_syncfifobuffered_level0 + 1'd1);
		end
	end else begin
		if (usb_outhandler_syncfifobuffered_do_read) begin
			usb_outhandler_syncfifobuffered_level0 <= (usb_outhandler_syncfifobuffered_level0 - 1'd1);
		end
	end
	if (usb_outhandler_data_buf_reset) begin
		usb_outhandler_syncfifobuffered_readable <= 1'd0;
		usb_outhandler_syncfifobuffered_level0 <= 7'd0;
		usb_outhandler_syncfifobuffered_produce <= 7'd0;
		usb_outhandler_syncfifobuffered_consume <= 7'd0;
	end
	if (usb_outhandler_packet_clear) begin
		usb_outhandler_packet_pending <= 1'd0;
	end
	if (usb_outhandler_packet_trigger) begin
		usb_outhandler_packet_pending <= 1'd1;
	end
	triendpointinterface_state <= triendpointinterface_next_state;
	if (usb_usb_core_addr_next_value_ce) begin
		usb_usb_core_addr <= usb_usb_core_addr_next_value;
	end
	if (usb_resetinserter_reset) begin
		usb_usb_core_addr <= 7'd0;
		triendpointinterface_state <= 3'd0;
	end
	if (usb_12_rst) begin
		usb_usb_core_tx_i_oe <= 1'd0;
		usb_usb_core_tx_shifter_o_get <= 1'd0;
		usb_usb_core_tx_shifter_shifter <= 8'd0;
		usb_usb_core_tx_shifter_pos <= 8'd1;
		usb_usb_core_tx_bitstuff_o_data <= 1'd0;
		usb_usb_core_tx_sync_pulse <= 8'd0;
		usb_usb_core_tx_bitstuff_valid_data <= 1'd0;
		usb_usb_core_tx_state_gray <= 2'd0;
		usb_usb_core_txstate_pid <= 4'd0;
		usb_usb_core_txstate_crc_cur <= 16'd65535;
		usb_usb_core_rx_o_pkt_in_progress <= 1'd0;
		usb_usb_core_rx_payloadFifo_graycounter1_q <= 2'd0;
		usb_usb_core_rx_payloadFifo_graycounter1_q_binary <= 2'd0;
		usb_usb_core_rx_flagsFifo_graycounter1_q <= 2'd0;
		usb_usb_core_rx_flagsFifo_graycounter1_q_binary <= 2'd0;
		usb_usb_core_o_pid <= 4'd0;
		usb_usb_core_o_addr <= 7'd0;
		usb_usb_core_endp4 <= 1'd0;
		usb_usb_core_o_endp <= 4'd0;
		usb_usb_core_crc5 <= 5'd0;
		usb_usb_core_addr <= 7'd0;
		usb_usb_core_tok <= 4'd0;
		usb_usb_core_endp <= 4'd0;
		usb_usb_core_response_pid <= 4'd0;
		usb_setuphandler_epno <= 1'd0;
		usb_setuphandler_packet_pending <= 1'd0;
		usb_setuphandler_reset_pending <= 1'd0;
		usb_setuphandler_reset_old_trigger <= 1'd0;
		usb_setuphandler_setuphandlerinner_readable <= 1'd0;
		usb_setuphandler_setuphandlerinner_level0 <= 4'd0;
		usb_setuphandler_setuphandlerinner_produce <= 4'd0;
		usb_setuphandler_setuphandlerinner_consume <= 4'd0;
		usb_setuphandler_setuphandlerinner_data_byte <= 4'd0;
		usb_setuphandler_setuphandlerinner_have_data_stage <= 1'd0;
		usb_setuphandler_setuphandlerinner_is_in <= 1'd0;
		usb_inhandler_dtbs <= 16'd1;
		usb_inhandler_stall_status <= 16'd0;
		usb_inhandler_syncfifobuffered_readable <= 1'd0;
		usb_inhandler_syncfifobuffered_level0 <= 7'd0;
		usb_inhandler_syncfifobuffered_produce <= 6'd0;
		usb_inhandler_syncfifobuffered_consume <= 6'd0;
		usb_inhandler_packet_pending <= 1'd0;
		usb_inhandler_queued <= 1'd0;
		usb_inhandler_was_queued <= 1'd0;
		usb_inhandler_transmitted <= 1'd0;
		usb_outhandler_syncfifobuffered_readable <= 1'd0;
		usb_outhandler_syncfifobuffered_level0 <= 7'd0;
		usb_outhandler_syncfifobuffered_produce <= 7'd0;
		usb_outhandler_syncfifobuffered_consume <= 7'd0;
		usb_outhandler_packet_pending <= 1'd0;
		usb_outhandler_stall_status <= 16'd0;
		usb_outhandler_enable_status <= 16'd0;
		usb_outhandler_epno <= 4'd0;
		usb_outhandler_responding <= 1'd0;
		triendpointinterface_fsm_state <= 2'd0;
		triendpointinterface_resetinserter_state <= 3'd0;
		triendpointinterface_txpacketsend_state <= 4'd0;
		triendpointinterface_packetheaderdecode_state <= 3'd0;
		triendpointinterface_clockdomainsrenamer_state <= 4'd1;
		triendpointinterface_state <= 3'd0;
	end
	multiregimpl4_regs <= usb_usb_core_tx_o_oe;
	multiregimpl5_regs0 <= usb_usb_core_rx_payloadFifo_graycounter0_q;
	multiregimpl5_regs1 <= multiregimpl5_regs0;
	multiregimpl7_regs0 <= usb_usb_core_rx_flagsFifo_graycounter0_q;
	multiregimpl7_regs1 <= multiregimpl7_regs0;
end

always @(posedge usb_48_clk) begin
	usb_usb_core_tx_nrzi_o_oe <= usb_usb_core_tx_nrzi_oe0;
	usb_usb_core_tx_nrzi_o_usbp <= usb_usb_core_tx_nrzi_usbp;
	usb_usb_core_tx_nrzi_o_usbn <= usb_usb_core_tx_nrzi_usbn;
	triendpointinterface_txnrziencoder_state <= triendpointinterface_txnrziencoder_next_state;
	if (usb_usb_core_rx_line_state_valid) begin
		if (usb_usb_core_rx_line_state_se01) begin
			if ((~usb_usb_core_rx_reset_counter[6])) begin
				usb_usb_core_rx_reset_counter <= (usb_usb_core_rx_reset_counter + 1'd1);
			end
		end else begin
			usb_usb_core_rx_reset_counter <= 1'd0;
		end
	end
	usb_usb_core_rx_last_reset <= usb_usb_core_rx_reset1;
	usb_usb_core_rx_line_state_valid <= (usb_usb_core_rx_line_state_phase == 1'd1);
	if (usb_usb_core_rx_line_state_dt) begin
		usb_usb_core_rx_line_state_phase <= 1'd0;
		usb_usb_core_rx_line_state_valid <= 1'd0;
	end else begin
		usb_usb_core_rx_line_state_phase <= (usb_usb_core_rx_line_state_phase + 1'd1);
	end
	usb_usb_core_rx_line_state_dj1 <= usb_usb_core_rx_line_state_dj0;
	usb_usb_core_rx_line_state_dk1 <= usb_usb_core_rx_line_state_dk0;
	usb_usb_core_rx_line_state_se01 <= usb_usb_core_rx_line_state_se00;
	usb_usb_core_rx_line_state_se11 <= usb_usb_core_rx_line_state_se10;
	triendpointinterface_rxpipeline_state <= triendpointinterface_rxpipeline_next_state;
	if (usb_usb_core_rx_nrzi_i_valid) begin
		usb_usb_core_rx_nrzi_last_data <= usb_usb_core_rx_nrzi_i_dk;
		usb_usb_core_rx_nrzi_o_data <= (~(usb_usb_core_rx_nrzi_i_dk ^ usb_usb_core_rx_nrzi_last_data));
		usb_usb_core_rx_nrzi_o_se0 <= ((~usb_usb_core_rx_nrzi_i_dj) & (~usb_usb_core_rx_nrzi_i_dk));
	end
	usb_usb_core_rx_nrzi_o_valid <= usb_usb_core_rx_nrzi_i_valid;
	triendpointinterface_rxpipeline_rxpacketdetect_state <= triendpointinterface_rxpipeline_rxpacketdetect_next_state;
	if (usb_usb_core_rx_detect_reset) begin
		triendpointinterface_rxpipeline_rxpacketdetect_state <= 3'd0;
	end
	usb_usb_core_rx_bitstuff_o_data <= usb_usb_core_rx_bitstuff_i_data;
	usb_usb_core_rx_bitstuff_o_stall <= (usb_usb_core_rx_bitstuff_drop_bit | (~usb_usb_core_rx_bitstuff_i_valid));
	usb_usb_core_rx_bitstuff_o_error <= ((usb_usb_core_rx_bitstuff_drop_bit & usb_usb_core_rx_bitstuff_i_data) & usb_usb_core_rx_bitstuff_i_valid);
	triendpointinterface_rxpipeline_rxbitstuffremover_state <= triendpointinterface_rxpipeline_rxbitstuffremover_next_state;
	if (usb_usb_core_rx_bitstuff_reset) begin
		usb_usb_core_rx_bitstuff_o_data <= 1'd0;
		usb_usb_core_rx_bitstuff_o_error <= 1'd0;
		usb_usb_core_rx_bitstuff_o_stall <= 1'd1;
		triendpointinterface_rxpipeline_rxbitstuffremover_state <= 3'd0;
	end
	usb_usb_core_rx_shifter_o_put <= ((usb_usb_core_rx_shifter_shift_reg[7] & (~usb_usb_core_rx_shifter_shift_reg[8])) & usb_usb_core_rx_shifter_i_valid);
	if (usb_usb_core_rx_shifter_i_valid) begin
		if (usb_usb_core_rx_shifter_shift_reg[8]) begin
			usb_usb_core_rx_shifter_shift_reg <= {slice_proxy[7:0], usb_usb_core_rx_shifter_i_data};
		end else begin
			usb_usb_core_rx_shifter_shift_reg <= {usb_usb_core_rx_shifter_shift_reg[7:0], usb_usb_core_rx_shifter_i_data};
		end
	end
	if (usb_usb_core_rx_shifter_reset) begin
		usb_usb_core_rx_shifter_o_put <= 1'd0;
		usb_usb_core_rx_shifter_shift_reg <= 9'd1;
	end
	usb_usb_core_rx_payloadFifo_graycounter0_q_binary <= usb_usb_core_rx_payloadFifo_graycounter0_q_next_binary;
	usb_usb_core_rx_payloadFifo_graycounter0_q <= usb_usb_core_rx_payloadFifo_graycounter0_q_next;
	usb_usb_core_rx_flagsFifo_graycounter0_q_binary <= usb_usb_core_rx_flagsFifo_graycounter0_q_next_binary;
	usb_usb_core_rx_flagsFifo_graycounter0_q <= usb_usb_core_rx_flagsFifo_graycounter0_q_next;
	if (usb_48_rst) begin
		usb_usb_core_tx_nrzi_o_usbp <= 1'd0;
		usb_usb_core_tx_nrzi_o_usbn <= 1'd0;
		usb_usb_core_tx_nrzi_o_oe <= 1'd0;
		usb_usb_core_rx_line_state_phase <= 2'd0;
		usb_usb_core_rx_line_state_valid <= 1'd0;
		usb_usb_core_rx_line_state_dj1 <= 1'd0;
		usb_usb_core_rx_line_state_dk1 <= 1'd0;
		usb_usb_core_rx_line_state_se01 <= 1'd0;
		usb_usb_core_rx_line_state_se11 <= 1'd0;
		usb_usb_core_rx_reset_counter <= 7'd0;
		usb_usb_core_rx_nrzi_o_valid <= 1'd0;
		usb_usb_core_rx_nrzi_o_data <= 1'd0;
		usb_usb_core_rx_nrzi_o_se0 <= 1'd0;
		usb_usb_core_rx_nrzi_last_data <= 1'd0;
		usb_usb_core_rx_bitstuff_o_data <= 1'd0;
		usb_usb_core_rx_bitstuff_o_error <= 1'd0;
		usb_usb_core_rx_bitstuff_o_stall <= 1'd1;
		usb_usb_core_rx_last_reset <= 1'd0;
		usb_usb_core_rx_shifter_o_put <= 1'd0;
		usb_usb_core_rx_shifter_shift_reg <= 9'd1;
		usb_usb_core_rx_payloadFifo_graycounter0_q <= 2'd0;
		usb_usb_core_rx_payloadFifo_graycounter0_q_binary <= 2'd0;
		usb_usb_core_rx_flagsFifo_graycounter0_q <= 2'd0;
		usb_usb_core_rx_flagsFifo_graycounter0_q_binary <= 2'd0;
		triendpointinterface_txnrziencoder_state <= 3'd0;
		triendpointinterface_rxpipeline_state <= 3'd0;
		triendpointinterface_rxpipeline_rxpacketdetect_state <= 3'd0;
		triendpointinterface_rxpipeline_rxbitstuffremover_state <= 3'd0;
	end
	multiregimpl0_regs0 <= usb_iobuf_usb_p_t_i0;
	multiregimpl0_regs1 <= multiregimpl0_regs0;
	multiregimpl1_regs0 <= usb_iobuf_usb_n_t_i0;
	multiregimpl1_regs1 <= multiregimpl1_regs0;
	multiregimpl2_regs0 <= usb_usb_core_tx_fit_dat;
	multiregimpl2_regs1 <= multiregimpl2_regs0;
	multiregimpl2_regs2 <= multiregimpl2_regs1;
	multiregimpl3_regs0 <= usb_usb_core_tx_fit_oe;
	multiregimpl3_regs1 <= multiregimpl3_regs0;
	multiregimpl3_regs2 <= multiregimpl3_regs1;
	multiregimpl6_regs0 <= usb_usb_core_rx_payloadFifo_graycounter1_q;
	multiregimpl6_regs1 <= multiregimpl6_regs0;
	multiregimpl8_regs0 <= usb_usb_core_rx_flagsFifo_graycounter1_q;
	multiregimpl8_regs1 <= multiregimpl8_regs0;
end

SB_PLL40_CORE #(
	.DELAY_ADJUSTMENT_MODE_FEEDBACK("FIXED"),
	.DELAY_ADJUSTMENT_MODE_RELATIVE("FIXED"),
	.DIVF(4'd15),
	.DIVQ(3'd5),
	.DIVR(1'd0),
	.ENABLE_ICEGATE(1'd0),
	.FDA_FEEDBACK(4'd15),
	.FDA_RELATIVE(1'd0),
	.FEEDBACK_PATH("SIMPLE"),
	.FILTER_RANGE(1'd1),
	.PLLOUT_SELECT("GENCLK_HALF"),
	.SHIFTREG_DIV_MODE(1'd1)
) SB_PLL40_CORE (
	.BYPASS(1'd0),
	.REFERENCECLK(clk48),
	.RESETB(1'd1),
	.PLLOUTCORE(clk12)
);

SB_SPRAM256KA SB_SPRAM256KA(
	.ADDRESS(spram_bus_adr[13:0]),
	.CHIPSELECT(1'd1),
	.CLOCK(sys_clk),
	.DATAIN(spram_datain0),
	.MASKWREN(spram_maskwren0),
	.POWEROFF(1'd1),
	.SLEEP(1'd0),
	.STANDBY(1'd0),
	.WREN(spram_wren0),
	.DATAOUT(spram_dataout0)
);

SB_SPRAM256KA SB_SPRAM256KA_1(
	.ADDRESS(spram_bus_adr[13:0]),
	.CHIPSELECT(1'd1),
	.CLOCK(sys_clk),
	.DATAIN(spram_datain1),
	.MASKWREN(spram_maskwren1),
	.POWEROFF(1'd1),
	.SLEEP(1'd0),
	.STANDBY(1'd0),
	.WREN(spram_wren1),
	.DATAOUT(spram_dataout1)
);

SB_SPRAM256KA SB_SPRAM256KA_2(
	.ADDRESS(a2mem_addr),
	.CHIPSELECT(1'd1),
	.CLOCK(sys_clk),
	.DATAIN(a2mem_din[15:0]),
	.MASKWREN(a2mem_wrenmask[3:0]),
	.POWEROFF(1'd1),
	.SLEEP(1'd0),
	.STANDBY(1'd0),
	.WREN(a2mem_wren),
	.DATAOUT(a2mem_dout[15:0])
);

SB_SPRAM256KA SB_SPRAM256KA_3(
	.ADDRESS(a2mem_addr),
	.CHIPSELECT(1'd1),
	.CLOCK(sys_clk),
	.DATAIN(a2mem_din[31:16]),
	.MASKWREN(a2mem_wrenmask[7:4]),
	.POWEROFF(1'd1),
	.SLEEP(1'd0),
	.STANDBY(1'd0),
	.WREN(a2mem_wren),
	.DATAOUT(a2mem_dout[31:16])
);

reg [31:0] storage[0:255];
reg [31:0] memdat;
reg [31:0] memdat_1;
always @(posedge sys_clk) begin
	if (apple2_display_fifo_wrport_we)
		storage[apple2_display_fifo_wrport_adr] <= apple2_display_fifo_wrport_dat_w;
	memdat <= storage[apple2_display_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (apple2_display_fifo_rdport_re)
		memdat_1 <= storage[apple2_display_fifo_rdport_adr];
end

assign apple2_display_fifo_wrport_dat_r = memdat;
assign apple2_display_fifo_rdport_dat_r = memdat_1;

cpu cpu(
	.DI(apple2_din),
	.IRQ(1'd0),
	.NMI(1'd0),
	.RDY(apple2_active),
	.clk(sys_clk),
	.reset((sys_rst | apple2_control_storage[0])),
	.AB(apple2_addr),
	.DO(apple2_dout),
	.WE(apple2_wren)
);

reg [31:0] mem[0:2047];
reg [31:0] memdat_2;
always @(posedge sys_clk) begin
	memdat_2 <= mem[rom_adr];
end

assign rom_dat_r = memdat_2;

initial begin
	$readmemh("mem.init", mem);
end

reg [7:0] storage_1[0:1];
reg [0:0] memadr;
reg [0:0] memadr_1;
always @(posedge usb_48_clk) begin
	if (usb_usb_core_rx_payloadFifo_wrport_we)
		storage_1[usb_usb_core_rx_payloadFifo_wrport_adr] <= usb_usb_core_rx_payloadFifo_wrport_dat_w;
	memadr <= usb_usb_core_rx_payloadFifo_wrport_adr;
end

always @(posedge usb_12_clk) begin
	memadr_1 <= usb_usb_core_rx_payloadFifo_rdport_adr;
end

assign usb_usb_core_rx_payloadFifo_wrport_dat_r = storage_1[memadr];
assign usb_usb_core_rx_payloadFifo_rdport_dat_r = storage_1[memadr_1];

reg [1:0] storage_2[0:1];
reg [0:0] memadr_2;
reg [0:0] memadr_3;
always @(posedge usb_48_clk) begin
	if (usb_usb_core_rx_flagsFifo_wrport_we)
		storage_2[usb_usb_core_rx_flagsFifo_wrport_adr] <= usb_usb_core_rx_flagsFifo_wrport_dat_w;
	memadr_2 <= usb_usb_core_rx_flagsFifo_wrport_adr;
end

always @(posedge usb_12_clk) begin
	memadr_3 <= usb_usb_core_rx_flagsFifo_rdport_adr;
end

assign usb_usb_core_rx_flagsFifo_wrport_dat_r = storage_2[memadr_2];
assign usb_usb_core_rx_flagsFifo_rdport_dat_r = storage_2[memadr_3];

reg [7:0] storage_3[0:9];
reg [7:0] memdat_3;
reg [7:0] memdat_4;
always @(posedge usb_12_clk) begin
	if (usb_setuphandler_setuphandlerinner_wrport_we)
		storage_3[usb_setuphandler_setuphandlerinner_wrport_adr] <= usb_setuphandler_setuphandlerinner_wrport_dat_w;
	memdat_3 <= storage_3[usb_setuphandler_setuphandlerinner_wrport_adr];
end

always @(posedge usb_12_clk) begin
	if (usb_setuphandler_setuphandlerinner_rdport_re)
		memdat_4 <= storage_3[usb_setuphandler_setuphandlerinner_rdport_adr];
end

assign usb_setuphandler_setuphandlerinner_wrport_dat_r = memdat_3;
assign usb_setuphandler_setuphandlerinner_rdport_dat_r = memdat_4;

reg [7:0] storage_4[0:63];
reg [7:0] memdat_5;
reg [7:0] memdat_6;
always @(posedge usb_12_clk) begin
	if (usb_inhandler_syncfifobuffered_wrport_we)
		storage_4[usb_inhandler_syncfifobuffered_wrport_adr] <= usb_inhandler_syncfifobuffered_wrport_dat_w;
	memdat_5 <= storage_4[usb_inhandler_syncfifobuffered_wrport_adr];
end

always @(posedge usb_12_clk) begin
	if (usb_inhandler_syncfifobuffered_rdport_re)
		memdat_6 <= storage_4[usb_inhandler_syncfifobuffered_rdport_adr];
end

assign usb_inhandler_syncfifobuffered_wrport_dat_r = memdat_5;
assign usb_inhandler_syncfifobuffered_rdport_dat_r = memdat_6;

reg [7:0] storage_5[0:65];
reg [7:0] memdat_7;
reg [7:0] memdat_8;
always @(posedge usb_12_clk) begin
	if (usb_outhandler_syncfifobuffered_wrport_we)
		storage_5[usb_outhandler_syncfifobuffered_wrport_adr] <= usb_outhandler_syncfifobuffered_wrport_dat_w;
	memdat_7 <= storage_5[usb_outhandler_syncfifobuffered_wrport_adr];
end

always @(posedge usb_12_clk) begin
	if (usb_outhandler_syncfifobuffered_rdport_re)
		memdat_8 <= storage_5[usb_outhandler_syncfifobuffered_rdport_adr];
end

assign usb_outhandler_syncfifobuffered_wrport_dat_r = memdat_7;
assign usb_outhandler_syncfifobuffered_rdport_dat_r = memdat_8;

SB_WARMBOOT SB_WARMBOOT(
	.BOOT(do_reset),
	.S0(ctrl_storage[0]),
	.S1(ctrl_storage[1])
);

SB_RGBA_DRV #(
	.CURRENT_MODE("0b1"),
	.RGB0_CURRENT("0b000011"),
	.RGB1_CURRENT("0b000011"),
	.RGB2_CURRENT("0b000011")
) SB_RGBA_DRV (
	.CURREN(sbled_ctrl_storage[1]),
	.RGB0PWM(sbled_rgba_pwm[0]),
	.RGB1PWM(sbled_rgba_pwm[1]),
	.RGB2PWM(sbled_rgba_pwm[2]),
	.RGBLEDEN(sbled_ctrl_storage[2]),
	.RGB0(rgb_led_r),
	.RGB1(rgb_led_g),
	.RGB2(rgb_led_b)
);

SB_LEDDA_IP SB_LEDDA_IP(
	.LEDDADDR0(sbled_addr_storage[0]),
	.LEDDADDR1(sbled_addr_storage[1]),
	.LEDDADDR2(sbled_addr_storage[2]),
	.LEDDADDR3(sbled_addr_storage[3]),
	.LEDDCLK(sys_clk),
	.LEDDCS(sbled_dat_re),
	.LEDDDAT0(sbled_dat_storage[0]),
	.LEDDDAT1(sbled_dat_storage[1]),
	.LEDDDAT2(sbled_dat_storage[2]),
	.LEDDDAT3(sbled_dat_storage[3]),
	.LEDDDAT4(sbled_dat_storage[4]),
	.LEDDDAT5(sbled_dat_storage[5]),
	.LEDDDAT6(sbled_dat_storage[6]),
	.LEDDDAT7(sbled_dat_storage[7]),
	.LEDDDEN(sbled_dat_re),
	.LEDDEXE(sbled_ctrl_storage[0]),
	.LEDDON(sbled),
	.PWMOUT0(sbled_ledd_value[0]),
	.PWMOUT1(sbled_ledd_value[1]),
	.PWMOUT2(sbled_ledd_value[2])
);

VexRiscv VexRiscv(
	.clk(sys_clk),
	.dBusWishbone_ACK(basesoc_cpu_dbus_ack),
	.dBusWishbone_DAT_MISO(basesoc_cpu_dbus_dat_r),
	.dBusWishbone_ERR(basesoc_cpu_dbus_err),
	.externalInterruptArray(basesoc_cpu_interrupt),
	.externalResetVector(addr_storage),
	.iBusWishbone_ACK(basesoc_cpu_ibus_ack),
	.iBusWishbone_DAT_MISO(basesoc_cpu_ibus_dat_r),
	.iBusWishbone_ERR(basesoc_cpu_ibus_err),
	.reset((sys_rst | basesoc_cpu_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(basesoc_cpu_dbus_adr),
	.dBusWishbone_BTE(basesoc_cpu_dbus_bte),
	.dBusWishbone_CTI(basesoc_cpu_dbus_cti),
	.dBusWishbone_CYC(basesoc_cpu_dbus_cyc),
	.dBusWishbone_DAT_MOSI(basesoc_cpu_dbus_dat_w),
	.dBusWishbone_SEL(basesoc_cpu_dbus_sel),
	.dBusWishbone_STB(basesoc_cpu_dbus_stb),
	.dBusWishbone_WE(basesoc_cpu_dbus_we),
	.iBusWishbone_ADR(basesoc_cpu_ibus_adr),
	.iBusWishbone_BTE(basesoc_cpu_ibus_bte),
	.iBusWishbone_CTI(basesoc_cpu_ibus_cti),
	.iBusWishbone_CYC(basesoc_cpu_ibus_cyc),
	.iBusWishbone_DAT_MOSI(basesoc_cpu_ibus_dat_w),
	.iBusWishbone_SEL(basesoc_cpu_ibus_sel),
	.iBusWishbone_STB(basesoc_cpu_ibus_stb),
	.iBusWishbone_WE(basesoc_cpu_ibus_we)
);

SB_DFFS SB_DFFS(
	.C(por_clk),
	.D(1'd0),
	.S(reset),
	.Q(rst1)
);

SB_DFFS SB_DFFS_1(
	.C(por_clk),
	.D(rst1),
	.S(reset),
	.Q(por_rst)
);

SB_IO #(
	.PIN_TYPE(6'd41)
) SB_IO (
	.D_OUT_0(lxspi_o[0]),
	.OUTPUT_ENABLE(lxspi_oe),
	.PACKAGE_PIN(spiflash4x_dq[0]),
	.D_IN_0(lxspi_i0[0])
);

SB_IO #(
	.PIN_TYPE(6'd41)
) SB_IO_1 (
	.D_OUT_0(lxspi_o[1]),
	.OUTPUT_ENABLE(lxspi_oe),
	.PACKAGE_PIN(spiflash4x_dq[1]),
	.D_IN_0(lxspi_i0[1])
);

SB_IO #(
	.PIN_TYPE(6'd41)
) SB_IO_2 (
	.D_OUT_0(lxspi_o[2]),
	.OUTPUT_ENABLE((lxspi_oe | lxspi_bitbang_en_storage)),
	.PACKAGE_PIN(spiflash4x_dq[2]),
	.D_IN_0(lxspi_i0[2])
);

SB_IO #(
	.PIN_TYPE(6'd41)
) SB_IO_3 (
	.D_OUT_0(lxspi_o[3]),
	.OUTPUT_ENABLE((lxspi_oe | lxspi_bitbang_en_storage)),
	.PACKAGE_PIN(spiflash4x_dq[3]),
	.D_IN_0(lxspi_i0[3])
);

SB_IO #(
	.PIN_TYPE(6'd41)
) SB_IO_4 (
	.D_OUT_0(usb_iobuf_usb_p_t_o),
	.OUTPUT_ENABLE(usb_iobuf_usb_p_t_oe),
	.PACKAGE_PIN(usb_d_p),
	.D_IN_0(usb_iobuf_usb_p_t_i0)
);

SB_IO #(
	.PIN_TYPE(6'd41)
) SB_IO_5 (
	.D_OUT_0(usb_iobuf_usb_n_t_o),
	.OUTPUT_ENABLE(usb_iobuf_usb_n_t_oe),
	.PACKAGE_PIN(usb_d_n),
	.D_IN_0(usb_iobuf_usb_n_t_i0)
);

SB_IO #(
	.PIN_TYPE(6'd41)
) SB_IO_6 (
	.D_OUT_0(touch_touch1_o),
	.OUTPUT_ENABLE(touch_touch1_oe),
	.PACKAGE_PIN(touch_pads_t1),
	.D_IN_0(touch_touch1_i)
);

SB_IO #(
	.PIN_TYPE(6'd41)
) SB_IO_7 (
	.D_OUT_0(touch_touch2_o),
	.OUTPUT_ENABLE(touch_touch2_oe),
	.PACKAGE_PIN(touch_pads_t2),
	.D_IN_0(touch_touch2_i)
);

SB_IO #(
	.PIN_TYPE(6'd41)
) SB_IO_8 (
	.D_OUT_0(touch_touch3_o),
	.OUTPUT_ENABLE(touch_touch3_oe),
	.PACKAGE_PIN(touch_pads_t3),
	.D_IN_0(touch_touch3_i)
);

SB_IO #(
	.PIN_TYPE(6'd41)
) SB_IO_9 (
	.D_OUT_0(touch_touch4_o),
	.OUTPUT_ENABLE(touch_touch4_oe),
	.PACKAGE_PIN(touch_pads_t4),
	.D_IN_0(touch_touch4_i)
);

endmodule
